{"version":3,"sources":["src/map.js","src/Cell.js","src/Agent.js","node_modules/easystarjs/src/instance.js","node_modules/easystarjs/src/node.js","node_modules/heap/lib/heap.js","node_modules/heap/index.js","node_modules/easystarjs/src/easystar.js","src/World.js","src/index.js","node_modules/parcel-bundler/src/builtins/bundle-url.js","node_modules/parcel-bundler/src/builtins/css-loader.js"],"names":["map","MAX_PARKED_BIKES","Cell","world","type","x","y","agents","bikes","agent","filter","length","push","a","ctx","squareSize","canvas_x","canvas_y","color","getCellColor","fillStyle","fillRect","font","fillText","bikeAgents","pedestrianAgents","forEach","i","drawBike","drawPedestrian","Agent","cell","strategy","spawn","parked_cell","move_to","path","calculatingPath","stage","bikePathfinder","pedestrianPathfinder","canPark","addBike","removeBike","callback","pathfinder","getPathfinder","findPath","console","log","calculate","nextCell","checkAddAgent","moveAgent","shift","parkingCell","getRandomCellOfType","changeMoveTo","getCellAtCoordinates","makeMove","park","unpark","removeAgent","World","worldmap","state","spawns","rows","split","row","types","S","X","b","w","p","e","o","entries","rowData","c","EasyStar","js","setGrid","setAcceptableTiles","setTileCost","cells","flat","Math","floor","random","addAgent","sort","act","tickdelay","spawnspeed","paused","document","getElementById","addEventListener","innerHTML","target","value","gameTick","spawnAgent","tick","setTimeout","gridWidth","gridHeight","canvasWidth","canvasHeight","getContext","canvas","width","height","drawCanvas","draw","requestAnimationFrame","bundleURL","getBundleURLCached","getBundleURL","Error","err","matches","stack","match","getBaseURL","url","replace","exports","bundle","require","updateLink","link","newLink","cloneNode","onload","remove","href","Date","now","parentNode","insertBefore","nextSibling","cssTimeout","reloadCSS","links","querySelectorAll","module"],"mappings":"AOAA,AJAA,ACAA,AEAA,AIAA,ACAA,IDAIsH,ACAAY,MAAM,GDAG,ACAAC,GDAG,IAAhB,ACAoB,CAAC,cAAD,CAApB;AJCA,AJAA,ACAA,AEAA,ADDA;AEEA,AJAA,ACAA,ACDA,AKAA,ACCA,AFFA,SCCSZ,ACCAa,UAAT,CAAoBC,IAApB,EAA0B,CDD1B,GAA8B;AHE9B,AJAA,ACAA,ACDA,EKAE,ACCA,IDDI,ACCAC,CDDChB,MCCM,GDDX,ACCce,EDDE,ECCE,CAACE,SAAL,EAAd;AJCF,AJAA,ACAA,ACDA,AIFA,ICEIjB,SAAS,GAAGE,YAAY,EAAxB;AHEJ,AJAA,ACAA,ACDA,EKAG,ACADc,OAAO,CAACE,MAAR,GAAiB,YAAY;AJE/B,AJAA,ACAA,ACDA,AIFA,ATHA,IWKIH,IAAI,CAACI,MAAL;AJEJ,AJAA,ACAA,ACDA,AGNA,ARCA,EUKE,ACAC,CAFD,MDEOnB,SAAP;AHEF,AJAA,ACAA,ACDA,AKAC,AVLD;AOOA,AJAA,ACAA,ACDA,AGPA,AREA,EWIEgB,OAAO,CAACI,IAAR,GAAeL,IAAI,CAACK,IAAL,CAAUtE,KAAV,CAAgB,GAAhB,EAAqB,CAArB,IAA0B,GAA1B,GAAgCuE,IAAI,CAACC,GAAL,EAA/C;AJGF,AJAA,ACAA,ACDA,AKAA,AVLA,EWIEP,IAAI,CAACQ,EDCErB,QCDP,CAAgBsB,GDClB,GAAwB,MCDtB,CAA6BR,OAA7B,EAAsCD,IAAI,CAACU,WAA3C;AJGF,AJAA,ACAA,ACDA,AMDC,AHPD,ARGA,EUKE;AHEF,AJAA,ACAA,ACDA,ALLA,EUKE,IAAI;AHEN,AJAA,ACAA,ACDA,AMDA,AVXA,ADOA,IUKI,ACDAC,ATXElH,ADAA7B,MSYI,IAAIwH,ACDA,GAAG,EDCP,CTZY,CSYlB,ACDJ,EVXyB,CAAzB;AMcA,AHAA,ACDA,ALLA,EUKG,ARZD,CQUA,CAEE,OAAOC,GAAP,EAAY,CRZFvH,KAAZ,EAAmBC,IAAnB,EAAyB2B,IAAzB,EAA+BC,QAA/B,EAAyC;AKc3C,AHAA,ACDA,AMFA,AXFA,IUII,ARbuC,ADCrC9B,ADQAF,GAAG,CUID2H,CCFCsB,MDEM,GAAG,ACFlB,CDEmB,ECFE,GDEGvB,GAAG,CAACE,KAAV,EAAiBC,KAAjB,CAAuB,+DAAvB,CAAd,+3BVJJ;AOMA,AHAA,ACDA,EMFE,AVVA,IUUImB,SXkCShJ,CWlCb,AVVYG,EUUI,GVVhB,EAAmBC,IAAnB,EAAyBC,CAAzB,EAA4BC,CAA5B,EAA+B;AMcjC,AHAA,ACDA,IKDI,ACDA,ATZA,ADC6B,ISYzBqH,CRbCxH,KAAL,CQaA,EAAa,ARbAA,KAAb;AKgBJ,AHAA,ACDA,EMFG,ETZC,EQaE,GRbGC,IQaI0H,ARbT,GAAY1H,IAAZ,GQamB,CAACuH,OAAO,CAAC,CAAD,CAAR,CAAjB;AHGN,AHAA,ACDA,IKDK,ARbD,ADAA,KCAK1F,ADAA7B,IAAL,CCAA,EDAYA,CCAC2B,GDAb,CCAA;AKgBJ,AHAA,ACDA,EKDG,ACDDiH,ETZE,ADAA,KCAKjH,ADAA1B,CAAL,EUYQ,CTZR,ADASA,CAAT,CUYWqG,CTZC3E,IAAZ,KSYqB,CAAC,YAAY;AJItC,AHAA,ACDA,IMFI,ATZA,ADAA,IUYImH,CTZChH,ADAA5B,CAAL,GUYS,AVZAA,CAAT,EUYY2F,ITZZ,GAAmB,CSYC,CAACkD,ETZrB,cSYY,CAA0B,wBAA1B,CAAZ;AJIJ,AFDA,EKDE,ERbE,ADAA,KSaK,ARbAnH,ADAAzB,GSaP,GTbE,ECAA,CDAc,ECAEyB,ADAhB,QCAA;AKgBJ,AFDA,AKDC,ICFG,ATXA,ADAA,KUWK,ATXAG,ADAA3B,IUWImB,CAAC,AVXV,ECAA,CSWa,AVXA,CUWb,AVXA,CCAe,CSWCA,CAAC,ETXjB,CSWoBuH,ATlBmB,CAQvC,ISUyB,CAACvI,MAA1B,EAAkCgB,CAAC,EAAnC,EAAuC;AJK3C,AFDA,AIlBA,ERIG,ECCC,ADCF,AQNIZ,EEeA,IAAImH,IFfM,EEeA,CAACJ,AFfE,EAAnB,QEeU,CAAkBoB,KAAK,CAACvH,CAAD,CAAL,CAAS+G,IAA3B,MAAqCR,MAAM,CAACV,YAAP,EAAzC,EAAgE;AJKtE,AFDA,AKDA,ADhBA,IAAI1B,IEcIsC,CDECN,IDhBI,GAAG,EEcE,CDElB,ACFmBoB,AFdnB,CCgBoBnB,GAApB,CCFwB,CDEC,ACFApG,CAAD,CAAN,CAAV;AJKR,AFDA,AIjBA,ECgBE,ERbE,AOHAoE,EEcG,GDEE,ARbA3D,CQaC,GRbN,COHU,CCgBC2F,CRbC,COHC,CCgBR,EAAWC,ARbhB,AOHJ,OCgBS,CAAmB,gFAAnB,EAAqG,IAArG,IAA6G,GAApH;AHGF,AFDA,AKDC,ADhBD,IEcK,ATXD,AOHAhC,KPGK3D,COHC,GAAG,KAAb,EAEA,IPCI,GAAuB,KAAvB;AKgBJ,AFDA,AIfA,IPCI,KAAKC,KAAL,GAAa,UAAb;AKgBJ,AFDA,AKDA2F,ADdA,EPCG,ESWCe,GDEG,CAACxB,GTfN,GUaY,GAAG,GDEjB,CCFI,EDEmBD,WTfP9G,KAAd,ESeF,ATfuB;AMkBvB,AFDA,AKDAwH,ADbA,EEWG,CATsB,EASpB,CVbD,CSeG,ACXkB,CDWjBH,ACXN,EVJM,KAAK1H,GSeb,CTfQ,ESea0H,GTfC,OSetB,ATfI,EAA2B;AMkB/B,AFDA,AMHC,QVbK,OAAO,IAAP;AMkBN,AFDA,AIfA7B,MRDK,EQCG,CAACC,cAAT,CAAwB,YAAxB,EAAsCC,gBAAtC,CAAuD,OAAvD,EAAgE,YAAM;AFiBtE,AFDA,AMHAiD,EFZE,IEYI,AFZAnD,CEYCgC,ITbL,GSaF,AFZc,CAAC/B,EEYE+C,SAAjB,GFZM,CAAwB,MPDZ,MOCZ,EAAsC7C,SAAtC,KAAoD,MAAxD,EAAgE;AFiBlE,AFDA,IIfIH,EPDA,ADAA,IAAI,EQCI,CPDD,AOCEC,ERDA9F,GCAGA,CDAR,GCAG,EDAW,GCAG,AOCrB,CAAwB,KPDjB,GACH,IOAJ,CPASD,COA6BiG,CRDlC,GCCA,CAAW7D,ADD0B9B,IQCzC,CRD8C,CAACL,CQCG,GRDT,ICAlC,AOCP,CRDwD,ECEpD,KAAKD,KAAL,ADFJ,CCEeqC,CDFuD,mBCAtE;AKkBJ,AFDA,IHdG,AODCwD,IRDE,EQCI,GAAG,ERDA,GQCT,CRDE;AMkBN,AFDA,EIfG,CAHD,GREG,CAPkB,CAQnB,CQAK;AFiBT,AFDA,IIfIC,ERAA,MQAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCE,SAAtC,GAAkD,MAAlD;AFiBJ,AFDA,IIfIJ,ERAA,IQAM,CPAR,EOAW,IAAT,UPAK;AKiBT,AFDA,EIfG,IPAC,ADAA,ICAI,KAAKjE,IAAL,CAAUU,OAAV,EAAJ,EAAyB;AKiB7B,AFDA,AIfC,CARD,GAUA,ERFI,ECAE,IACE,KAAKrC,IAAL,KAAc,MAAd,IACA,KAAK2B,IAAL,CAAU3B,IAAV,KAAmB,SADnB,IAEA,KAAK8B,WAAL,KAAqB,IAHvB,EAIE;AKaR,AFDA,UHXQ,KAAKA,WAAL,GAAmB,KAAKH,IAAxB;AKaR,AFDA,AIdAkE,QAAQ,CAACC,CPGD,KAAK9F,IAAL,GAAY,COHpB,CAAwB,UPGhB,COHR,EAAqC+F,gBAArC,CAAsD,OAAtD,EAA+D,UAACvB,CAAD,EAAO;AFgBtE,AFDA,EIdEkB,EDxBI/B,EPqBF,ICMI,ADLFtD,CQEK,GAAGmE,CPGD7C,ADLF,AQEI,CRFH3B,AQEIiG,GPGR,CAAU3D,ADLZ,EQEQ,CAAS4D,ERFF,ECKb,COHN,GRFI,IACA,KAAK/F,MAAL,CAAYG,MAAZ,CAAmB;AMiBzB,AFDA,AIdC,CAFD,CDtBE,MPsBuB,ECKjB,EDLoBN,IAAH,CCKV,AM3BD4D,IN2BN,GDLoB5D,COtB1B,EAAsB,CPsBC;AMkBzB,AFDA,AIbA6F,ID1BwB,IN4BjB,ADNkB,AQIjB,CAACC,MRJ8B9F,IAAI,IQI3C,CRJgD,AQIxB,MRJC,MQIzB,EAAsC+F,gBAAtC,CAAuD,OAAvD,EAAgE,UAACvB,CAAD,EAAO;AFevE,AFDA,EIbEmB,IPEG,ADPoB,CAAnB,EAAkDpF,GQK5C,GRLN,AQKSiE,CAAC,CAACyB,ERLiD,CAF9D,EAGE,CQIS,CAASC,KAAtB;AFeF,AFDA,AIbC,CAFD,GD1BwB,AC8BxB,IRNM,OAAO,KAAP;AMmBN,AFDA,AIXA,MPDI,ADLC,OCKM,KAAP;AKcJ,AFDA,AIXA,IPDG,AM9BC,KAAKrC,KAAL,GAAa,EAAb;AD4CJ,AFDA,IG1CI,EPwBA,GOxBK1D,CPyBHE,KAAK,AOzBP,CPyBQL,EOzBM,EPyBZ,AOzBF,KPyBiB,YAAf,IACA,KAAKG,MAAL,CAAYG,MAAZ,CAAmB;AMkBzB,AFDA,AIXA,ID/BI,AC+BEP,IRNmB,COzBhB+D,AC+BE,GRNiB9D,AQMd,GD/BV,CPyBqB,AQMP2D,ED/BA,EAAd,CAHoB,CAKpB,GPuBwB3D,IAAH,CQMX,CAAU4D,YAAV,CAAd,EAEA;AFWA,AFDA,AITA,QRTyB,GCKvB,IDLqC5D,IAAI,KAAK,KCKrC,ODLc;AMoBzB,AFDA,AITA,IDhCI,EN4BA,ADNqB,CAAnB,COtBI+D,CPsBoDxD,CCOxD,EM7BQ,GN6BHP,ADPL,AOtBW4D,IN6BX,ADPkE,CAFpE,EAGE,COvBmB,CN6BL,AM7BMI,KAAT,CAAe,IAAf,EN6BX,AM7BgC1D,IN8BhC,EM9BW,CAA4B,EN8BlCqB,IAAL,CAAU3B,GM9B8BiE,CN8BxC,EM9BuC,GN8BpB,SADnB,IAEA,KAAKnC,WAAL,KAAqB,IAHvB,EAIE;AKWN,AFDA,AITA,MDjC6C,ENiCvC,ADTA,KCSKH,AMjC2CsC,EPwBzC,COxB4C,CNiCnD,AMjCoD1D,CNiC1CgC,EDTV,GOxBgD,GAAa,CAAtB,CNiCvC;AKWN,AFDA,IG3C6C,CAA5B,CPyBZ,AOzBD,CANoB,CNwClB,AMhCF,KNgCOT,WAAL,GAAmB,IAAnB;AKWN,AFDA,AITA,QPAM,COAGqE,IPAEnG,IAAL,AOAN,GPAkB,AOAE,MPAd;AKWN,AFDA,EITE,EDjCE,ENiCC,ADVD,AQUE,CAAC4F,CDjCG1B,EPwBJ7D,GOxBS,ACiCb,ERTS,AQSI,CRTHL,AOxBM,IPwBZ,KAAe,MAAf,IACA,KAAKG,MAAL,CAAYG,MAAZ,CAAmB;AMmBzB,AFDA,IHTG,AOAC,EDjCE,EPwBmB,IAAGN,IAAH,SAAGA,IAAH;AMoBzB,AFDA,IITI,EDjCEmE,CAAC,CPuBkB,AQUjBiB,CDjCC,GCiCG,CAACE,ERV0BtF,COzBrB,GPyByB,AQUnC,KRVwC,AQUxB2F,UAApB,ERVqB,AQUW;AFWpC,AFDA,MJpByB,AOtBnBvB,ACiCArE,CRXA,AOtBC,EPsBuDQ,AOtBrD,ECiCE,CAAC6F,GRXN,IAAkE,CAFpE,EAGE,AQUA,CAAiB,KDpCL,UCoCZ;AFWN,AFDA,IITK,CAJU,CD7BT/B,ACmCF,CDnCG,CPuBD,COvBG,ENgCP,IDTW,KAAP,AO3BY,aNoCHpE,CAAb,EAAgBC,CAAhB,EAAmBsC,QAAnB,EAA6B;AKY/B,AFDA,MHX+B,ADR1B,AOvBC8B,CAAC,EAAE,iBALS;ADiDlB,AFDA,MG1CM7D,CAAC,EAAE,UANS;ADkDlB,AFDA,IITIV,EPHA,ADRA,AOtBEwE,CAAC,EAAE,ACiCA,CRVHlE,AQUIgG,CPHDpE,GOGL,CRVO,CAACjC,EO9BM,EP8BZ,KAAe,CCOjB,GAAuB,IAAvB,IDPE,IACA,KAAKG,MAAL,CAAYG,MAAZ,CAAmB;AMoBzB,AFDA,EITG,IPHC,AM9BE,EPuBmB,GCOhByB,CDPmB/B,IAAH,ECOrB,GAAe,CAACC,CAAD,EAAIC,ADPKF,CCOT,CAAf,EDPqB;AMqBzB,AFDA,MHZI,AM9BEwE,CAAC,CPsBkB,COtBhB,EN8BAxC,IAAL,ADRmChC,CO/BrB,ENuCF,CDR2B,GCQvC,EDR4C,MAAvB;AMsBzB,AFDA,EIVEsG,IPDE,ADVqB,AOrBnB7B,CPqBA,AOrBC,EPqBiDlE,AOrB/C,CN+BCkC,EOCE,CAAC0D,ERXP,IAA4D,CCU9C,ADZhB,CQaQ,CRVN,CCSiB,AOCAT,KPDKhD,IOChB,CAAV,QPDqB,EAAnB;AKaJ,AFDA,AIVC,ID3CiB,CAAd,CN0CAD,AMnDoB,CAsBpB,CPoBE,OAAO,CCSC,CAACE,GDTT,KCSF,CACE,KAAKhB,IAAL,CAAU1B,CADZ,EAEE,KAAK0B,IAAL,CAAUzB,CAFZ,EAGE,KAAK6B,OAAL,CAAa,CAAb,CAHF,EAIE,KAAKA,OAAL,CAAa,CAAb,CAJF,EAKE,UAACC,IAAD,EAAU;AKQhB,AFDA,IGxCI,EPoBC,ECcG,IAAIA,IAAI,KAAK,IAAb,EAAmB;AKQ3B,AFDA,AIVAmE,QAAQ,EPIE,EOFV,GPEc,CAACnE,IAAL,GAAYA,IAAZ;AKQV,AFDA,AIRA,IDzDwB,EP4CpB,ECeK,CAFD,IDbG,ECeI,EDfX,8BOpBuB+B,IAAI,CAACW,OAAL,EAxBH;ADmExB,AFDA,AIRA,IRbG,AO7CqB,MN4Dd9B,OAAO,CAACC,GAAR,CAAY,oCAAZ;AKQV,AFDA,QHNS;AKQT,AFDA,AIRA,ID5DwB,AC4DlB0D,SAAS,GAAGxG,KAAK,CAAC8D,KAAN,CAAY,CAAZ,EAAetD,MAAjC;AFUA,AFDA,AIRA,IAAMiG,ED7DkB,EN8DhB,GDfN,ECeU,CAACvE,AODG,GAAGlC,KAAK,CAAC8D,KAAN,CPCX,ADfGxD,AQcoBE,GPCA,EDf7B,CQcF,CRdkB,CCeV;AKSR,AFDA,AIPA,IAAMkG,ERfF,EOhDoB,GPgDftG,IQeQ,ERfb,CAAYK,AQeI+F,IRfhB,CAAiBlG,IQeQ,CRfzB,EQe4BM,UAAhC;AFSA,AFDA,AIPA,IRfG,AQeG+F,IPDE,AM/DgB,IN+DZlE,AMvCItC,CAxBQ,GCgEN,GAAGsG,CPDb,EAAc,OOCS,GAAG7F,UAAlC;AFSA,AFDA,AINA,IAAIiE,CAAC,GDlEmB,ACkEhBiB,EPFErD,EMxCSyB,GAxBK,CCkER,CAAC6B,CPFC,aOEV,CAAwB,QAAxB,CAAR;AFQA,AFDA,AINA,IAAIpF,GAAG,CPFE,EOECkE,CAAC,CAAC+B,UAAF,CAAa,IAAb,CAAV;AFQA,AFDA,AINAjG,GAAG,CAACkG,EPFG,CAfH,CM1BE,EC2CN,CRjBE,AQiBSC,CD3CClC,IC2CZ,GD3CmB,AC2CA8B,GD3CG,QC2CtB,ERjBcpG,KAAZ,EAAmB,EO1BK4D,GAAJ,EAASrE,GAAT,CAAa,UAACgF,CAAD,EAAI3E,CAAJ,EAAU;ADmD7C,AFDA,AINAS,GAAG,CAACkG,EPAAnE,ADjBA,IO1BI,AC2CR,CRjBStC,AQiBE2G,GD3CG9G,EN2CA,CAAC8C,ADjBX,AQiBJ,CD3CkB,EP0BA,AQiBE4D,CD3CCxC,IP0BE/D,CCiBnB,AM3CsB,CAACyE,CAAD,CAAlB,EP0BU,CAAYtE,AQiB9B,MRjBkB,CAAmB,UAACG,CAAD;AMyBrC,AFDA,IHNG,IDlBkC,EOzB7B,IAAMkB,CPyB8BlB,CAAC,EOzB3B,GPyBgCJ,AOzB7B,IAAIP,CPyBY,YOzBhB,CAAS,KAAT,EAAeE,IAAf,EAAqBC,CAArB,EAAwBC,CAAxB,CAAb;ADmDR,AFDA,AINA,MRnBqC,CAAnB,CAAd,CQmBK6G,UAAT,GAAsB;AFQtB,AFDA,EIPsB,ERlBnB,MOxBK,IAAI/G,IAAI,KAAK,OAAb,EAAsB,aC2CLD,KAAK,CAAC8D,KAAN,CAAYa,OAAZ,EADH;AFStB,AFDA,EIRsB,SPCpB,CM1CQ,KAAI,CAACZ,MAAL,CAAYtD,IN0CXuC,AM1CD,CAAiBpB,IAAjB,GN0CR,EAAmB;AKSrB,AFDA,MHPI,IAAIoB,AM1CC,QN0CO,CAACC,aAAT,CAAuB,IAAvB,CAAJ,EAAkC;AKStC,AFDA,EIVsB,MPGhB,GDnBJ,ECmBSjD,KAAL,CAAWkD,SAAX,CAAqB,CDnBf,GCmBN,EAA2BF,QAA3B;AKSN,AFDA,IIVE,ERhBE,ECmBE,EM1CE,GN0CGf,ADnBA,ICmBL,AM1CSL,CN0CCuB,ADnBAlD,GOvBR,CPuBG,CCmBL,IDnBmB,SAAd,IAA2B,KAAKI,KAAL,GAAaP,GQgBH,aRhB5C;AM4BJ,AFDA,IJ1BG,ECmBE,AOJ2C,EDtCzC,CATe,CAAhB;AD4DN,AFDA,IHPG,EAED,AOP8C,IAAlCK,CAAkC;AFchD,AFDA,MIbgD,EDrC1C,ECqCW+D,GDrCP,ACqCsC,CDrCrCJ,KAAL,CAAWrD,IAAX,CAAgBmE,OAAhB;ADoDN,AFDA,MGtFwB,KP2DtB,mBAAU;AM6BZ,AFDA,MJ3BI,AQY4C,KRZvCvE,KAAL,kCQawB6D,GAAG,CAACS,OAAJ,EADoB;AFiBhD,AFDA,IJ3BG,EOrCC,ACgD4C,KPQ9C,eAAM,gCMxDmC;ADkE3C,AFDA,MHTQ,EMxDmC;ADmE3C,AFDA,MGtDK,ACoC2C;AFoBhD,AFDA,IG3FwB,ENiFpB,EORA,GRVF,GCkBU,KAAK9C,QAAb,MDlBW,8BQU4B;AFoB3C,AFDA,MJ5BI,AOhEoB,ENkFlB,EOTqC,CRTlCxB,ECkBE,GDlBP,YCkBE;AKYN,AFDA,IJ5BG,AOjEqB,MNmFhB,AOVmC,IAA3BH,CAA2B,GPU3B,KAAKiC,KAAb;AKYR,AFDA,MG9FwB,ICyEmB,EPWjC,EOXSP,GPWJ,COX4B,SPWjC;AKYV,AFDA,IG/FwB,UNqFZ,IAAMwB,WAAW,GAAG,KAAKpD,KAAL,CAAWqD,mBAAX,CAA+B,SAA/B,CAApB;AKYZ,AFDA,UItBMzB,CRPJ,GCmBU,AOZF,CAACqF,IPYM3D,AOZX,CAAU3C,GAAV,ERPCA,AQOcT,CAAf,ERPJ,AQOsBC,CAAlB,CRPMD,CCmBA,ADnBV,AQOyBU,CPYGwC,CDnBfjD,CAAb,EAAgBS,KQOZ,EPYmC,CAACV,CAA9B,CDnBV,CCmB2CkD,CDnBf,UCmB0B,CAACjD,CAA7C,EAAgD,YAAM;AKYlE,AFDA,IG3DI,EP6B0B,EQQzB,CDrCIiC,ONiDK,MAAI,CAACD,AMjDf,GAAsB,ENiDZ,EMjDgB2C,CNiDH,kBMjDG,CAASC,EAAb,EAAtB,KNiDU;AKYd,AFDA,IG3DI,ECiC4C,GDjCvC1C,KNiDI,CAFD,cM/CR,GAA4B,IAAIyC,mBAAA,CAASC,EAAb,EAA5B;AD6DJ,AFDA,IG1DI,EP2BA,EQI4C,CD/BvC3C,CP2BCvB,ICqBE,IDrBM,GAAGX,CAAC,CO3BlB,CAAoB8E,CP2BCpE,MO3BrB,CACE,GP0BF,EO1BOkD,KAAL,CAAWjE,GAAX,CAAe,UAACqE,GAAD;AD2DrB,AFDA,MJ/BI,AO3BiB,AC8B2B,IRHtCpD,GO3BoBoD,GAAG,CAACrE,CP2BhB,EO3BY,CP2BTM,AO3BiB,CP2BhB,GAAGS,MO3BcgB,IP2BnC,AO3BkC;AD4DtC,AFDA,MJ9BI,EO7BkC,AC8BU,ERDxCb,ECmBE,GDnBG,AO7BmCa,ENgDjC,CDnBC,CO7BoC,CAAC3B,IAAf,GP6BlC,kBCmBM;AKaV,AFDA,MJ7BIc,AO/BkC,AC8BU,CD9BlB,CAAT,GP+BZ,GCkBG,ADlBA,ICmBE,CDnBGC,ICmBEkB,QDnBP,CAAkBnB,KAAlB,CCmBE,ADnBV,ICmBkC,KAAxB,IACA,KAAKkB,IAAL,KAAc,IADd,IAEA,KAAKA,IAAL,CAAUzB,MAAV,GAAmB,CAHrB,EAIE;AKSd,AFDA,IG7DqB,ACkClB,CDlCG,CPiCFG,AOlCA,GPkCG,CAACM,MCqBM,GDrBV,CCqBgB+B,EDrBAjC,KAAhB,CCqBwB,GAAG,KAAKf,KAAL,CAAWuD,oBAAX,CACf,KAAKtB,IAAL,CAAU,CAAV,EAAa/B,CADE,EAEf,KAAK+B,IAAL,CAAU,CAAV,EAAa9B,CAFE,CAAjB;AKSd,AFDA,EIjCsB,ED3BlB,EPgCAQ,GAAG,AOhCEyB,CPgCDlB,MCwBM,EDxBV,CAAaL,ECwBE2C,EMxDf,CAAoByB,GPgCpB,ECwBU,ADxBanE,CCwBCkC,ODxBxB,CCwBU,CDxBuBpC,GOhCjC,CAAuC,CACrC,KP+BF,EAA6CA,AOhCN,EAErC,QP8BF,EAT0B,CAW1B,AOlCuC,EAGrC,UAHqC,EAIrC,SAJqC,CAAvC;AD8DJ,AFDA,IGvDI,ACqBkB,KDrBbwB,KNmDI,CAVD,MAUO,EMnDf,CAAoB8C,WAApB,CAAgC,UAAhC,EAA4C,CAA5C;ADyDJ,AFDA,EInCsB,EDpBlB,EP4BA,GO5BK9C,CP4BD,KAAKnC,CCuBC,GDvBN,ECuBWkC,EMnDf,CP4BkB,AO5BE+C,ENmDV,GAAa,IDvBvB,EAA6B,AO5B7B,CAAgC,ENmDtB,OMnDV,EAA2C,CAA3C;ADyDJ,AFDA,IGtDI,ACkBkB,IRShBvE,CO3BG0B,EP2BA,CAACpB,ECuBG,ODvBP,GAAgB,KO3BlB,CAA0B+D,GP2BxB,IO3BF,CACE,KAAKlB,KAAL,CAAWjE,GAAX,CAAe,UAACqE,GAAD;ADuDrB,AFDA,EIrCsB,IDjBD,EP2BfvD,GAAG,CAACO,CO3BoBgD,GAAG,CAACrE,GP2B5B,AO3BwB,CP2BXgB,AO3BmB,QP2BX,EO3BYe,CP2BT,CAAxB,EAA2Bd,AO3BK,QP2BG,GAAGF,UAAX,GAAwB,CAAnD,EAAsDA,UAAU,GAAG,CAAnE,EAAsE,CAAtE;AM6BN,AFDA,QJ3BMD,AO5BgC,GP4B7B,CAACM,ECsBE,CMlDoCW,IAAI,CAAC3B,CP4B/C,GAAgB,AO5BgB,SP4BhC;AM6BN,AFDA,EIjCEiH,IDvBoC,CAAR,CP6BxBvG,AO7Be,GP6BZ,CAACO,QAAJ,CACEL,EQPe,CAACmG,KROR,GAAG,CADb,CQNiB,CRQflG,AQRN,QRQc,GAAGF,UAAX,GAAwB,CAF1B,EAGE,CAACA,UAAU,GAAG,CAAd,KAAoB,KAAKP,KAAL,GAAaP,gBAAjC,CAHF,EAIE,CAJF;AM6BN,AFDA,AIjCC,IDxBoB,CAAf,CPmCD,AOpCD,MNoDM,KAAK,SAAL;AKQV,AFDA,IGxDI,KAAKuC,KNkDG,IAAI,KAAKoB,IAAL,EAAJ,AMlDR,CAA0BwB,CNkDD,iBMlDzB,CAA6C,CAC3C,iBAD2C,EAE3C,UAF2C,EAG3C,SAH2C,EAI3C,mBAJ2C,CAA7C;AD0DJ,AFDA,AIjCAiC,IDlBI,EP6BA,GO7BK7E,CP6BD,KAAKpC,CCgBC,GDhBN,ECgBWkC,AO3BE,CAAC6E,ERWA,ECgBR,GAAa,AM7CvB,CAA0B9B,ECkBT,CAArB,QDlBI,CAAsC,CP6BtC,EAAuC,CCgB7B,MM7CV,EAAkD,CAAlD;ADqDJ,AFDA,IGnDI,IP6BEvE,CO7BG0B,EP6BA,CAACpB,ECgBG,CAFD,MAEO,ADhBb,GAAgB,KO7BlB,CAA0BiE,GP6BxB,QO7BF,CAAsC,SAAtC,EAAiD,CAAjD;ADqDJ,AFDA,EGnDG,MP6BGvE,GAAG,CAACQ,ICgBI0B,ADhBR,GAAW,ICgBI,CAACC,GAAR,CAAY,ODhBpB,SCgBQ;AKQd,AFDA,QJtBMnC,GAAG,CAACS,ECgBG,MDhBP,CACE,KAAK,KAAKhB,MAAL,CAAYG,MAAZ,CAAmB;AMuBhC,AFDA,UJtBgC,IAAGN,IAAH,SAAGA,IAAH;AMwBhC,AFDA,UJvBgC,ICgBpB,GDhBkCA,IAAI,KAAK,YAAvB;AMyBhC,AFDA,QJxBgC,CAAnB,EAAwDO,AO7BnE,MP4BI,EAEEK,QAAQ,GAAG,CAFb,EAGEC,QAAQ,AO/BOZ,CAArB,EP+BiB,AO/BOC,CAAxB,CP4BI,CO5BuB;ADuD7B,AFDA,MJrBK,AOhCD,CPwBA,KCqBM,CDbC,AOhCA,IN6CI,CM7CC2D,KAAL,CAAW3D,CAAX,EAAcD,CAAd,CAAP,KN6CM;AKUV,AFDA,IGrDG,IPgCG,IAAMmB,ECaA,KAAKiC,GDbK,GAAG,KAAKlD,CCalB,CAAkB,EAAlB,EAAsB,ADbT,CAAYG,CCazB,EAA0B,GDbb,CAAmB,QCaA;AKU5C,AFDA,UJtB4C,IAAGN,ECcjC,EDd8B,ICc1B,CAACkC,IDd4BlC,CCcjC,GAAa,ADdiB,gBCc9B;AKUd,AFDA,UJvB4C,ICe/B,CAFD,EDb8CA,IAAI,KAAK,MAAvB;AMyB5C,AFDA,QJxB4C,CAAnB,CAAnB,CO9BJ,GN8CU,0BM9CUA,IAApB,EAA0B;ADwD5B,AFDA,MGtDI,EP8BE,EO9BIkF,EP8BE7D,GO9BG,GAAG,KAAKwC,KP8BK,AO9BV,CAAWsB,EP8BE,EO9Bb,GP8BkBhF,AO9BAG,MP8BL,AO9Bb,CP8ByBA,AO9BA,MP8BZ,CACvB,GO/BoCqB,IAAD;ADwD3C,AFDA,QGvD2C,EP+BnC,ECeE,EDfC3B,CO/B0C2B,EN8CtC,CDfP,CO/BiD,CAAC3B,IAAL,GP+B1CA,EO/BwDA,EP+B3D,ECeE,AM9CiC;ADyD3C,AFDA,MGxD2C,CAAzB,CAAd,EP+BI,ICgBI,GDhBUA,CCiBR,GDjBY,ECiBPiC,GDjBY,YCiBjB,ADjBN,ICiB8B,KAAxB,IACA,KAAKD,IAAL,KAAc,IADd,IAEA,KAAKA,IAAL,CAAUzB,MAAV,GAAmB,CAHrB,EAIE;AKOd,AFDA,MGxDI,EP8BI,CADuB,CAAzB,GO7BK2E,GNmDG,EMnDE,CAACE,CNmDGrC,GMnDC,CAACsC,KNmDM,AMnDX,CAAWD,ENmDG,EMnDC,CAACE,ENmDGvF,IMnDR,CNmDG,CAAWuD,GMnDE4B,KAAK,CAAC3E,MAAjC,CAAD,CAAZ,GNmD2B,CACf,KAAKyB,IAAL,CAAU,CAAV,EAAa/B,CADE,EAEf,KAAK+B,IAAL,CAAU,CAAV,EAAa9B,CAFE,CAAjB;AKOd,AFDA,IGxDG,EAED;ADwDF,AFDA,IGtDE,IP4BI,IAAIkB,ICuBI,KAAKmC,CDvBC,CAAChD,MCuBP,ADvBJ,CCuBkBwC,EDvBE,CAAxB,EAA2B,ICuBnB;AKKd,AFDA,IGtDE,MP4BM3B,ICuBK,CAVD,KDbM,CCuBC,ADvBAE,OAAX,CAAmB,UAACjB,KAAD,EAAQkB,CAAR,EAAc;AM4BzC,AFDA,IGtDE,QP4BQ,ICuBI,CDvBA,CAACC,GCuBIU,KAAL,ADvBJ,CAAcxB,ECuBG,CDvBjB,EAAmBT,CAAC,GAAGU,ECuBnB,QDvBe,GAAiBY,CAAC,GAAG,EAAxC,EAA4CrB,CAAC,GAAGS,UAAhD;AM4BV,AFDA,IGrDE,MP2BO,CAFD,GCyBK;AKKb,AFDA,IGrDE;ADuDF,AFDA,IGrDE,MP0BM,ICuBI,ADvBAU,gBAAgB,CAACd,MAAjB,GAA0B,CAA9B,EAAiC;AM6BzC,AFDA,IGrDE,QP0BQc,gBAAgB,CAACC,OAAjB,CAAyB,UAACjB,KAAD,EAAQkB,CAAR,EAAc;AM6BjD,AFDA,IGrDE,QNgDQ,EDtBE,GCsBG,EDtBC,CAACE,MCsBP,QDtBE,CACEf,GADF,EAEET,CAAC,GAAGU,UAAJ,GAAiB,EAFnB,EAGET,CAAC,GAAGS,UAAJ,GAAiBY,CAAC,GAAG,EAHvB;AM6BZ,AFDA,IGrDE,QP8BS,CAND,CCwBE;AKOZ,AFDA,IGrDE,MP8BO,ICkBG,KAAKW,KAAL,GAAa,cAAb;AKOZ,AFDA,IGrDE,IP8BK,CAbD,KC+BM,CDlBC,IAAIb,gBAAgB,CAACd,MAAjB,GAA0B,CAA9B,EAAiC;AMyB9C,AFDA,IGrDE,MP8BMc,gBAAgB,CAACC,OAAjB,CAAyB,UAACjB,KAAD,EAAQkB,CAAR,EAAc;AMyB/C,AFDA,IGrDE,QN+CQ,ADjBA,IAAIA,CCiBC,ADjBA,GAAG,CAAR,EAAW,QCiBX;AKQV,AFDA,IGrDE,UN+CU,ADjBA,KCiBK8B,ADjBD,CAAC5B,WCiBL,CAAkB,EDjBlB,CAAoBf,ECiBGoB,CDjBvB,EAAyB7B,CAAC,GAAGU,ICiBX,CAAiBV,CAAnC,EAAsC,EDjBb,GCiBkB6B,ADjBDP,CAAC,GAAG,EAA9C,EAAkDrB,CAAC,ECiBb,CAAiBA,ADjBDS,CCiBtD,EAA0D,ODjB1D,KCiBgE;AKQ5E,AFDA,IGrDE,QP8BS,CAFD,GCmBI,GDjBG,GCiBC,CAACuB,KAAL,GAAa,2BAAb;AKQd,AFDA,IGrDE,UN+CW,ADjBD,CCeA,IDfI,CAACT,cAAL,CAAoBf,GAApB,EAAyBT,CAAC,GAAGU,UAAJ,GAAiB,CAA1C,EAA6CT,CAAC,GAAGS,UAAJ,GAAiB,EAA9D;AMyBZ,AFDA,IGrDE,QP8BS,ECiBC;AKQZ,AFDA,IGrDE,MP8BO,CAND;AM+BR,AFDA,IGpDE,IP6BK,ICgBG,KAAK,2BAAL;AKSV,AFDA,MJvBK,CA3DyB,CA6D1B,MCcQ,IACE,KAAKsB,eAAL,IAAwB,KAAxB,IACA,KAAKD,IAAL,KAAc,IADd,IAEA,KAAKA,IAAL,CAAUzB,MAAV,GAAmB,CAHrB,EAIE;AKKd,AFDA,MJrBI,UCkBU,IAAMwC,UAAQ,GAAG,KAAKhD,KAAL,CAAWuD,oBAAX,CACf,KAAKtB,IAAL,CAAU,CAAV,EAAa/B,CADE,EAEf,KAAK+B,IAAL,CAAU,CAAV,EAAa9B,CAFE,CAAjB;AKKd,AFDA,MJrBI;AMuBJ,AFDA,MJrBI,KOlCF,KNsDY,KAAKqD,QAAL,CAAcR,CMtDfnB,QAAX,CNsDY,CMtDS;ADyDvB,AFDA,MJrBI,AOlCA,QNsDS,CAVD,MAUO;AKGnB,AFDA,MJrBI,AOlCA,IAAMC,KAAK,CNsDD,EMtDI,GNsDCK,EMtDI4B,GNsDT,GAAa,AMtDT,CAAYsB,IAAI,CAACC,KNsDrB,AMtDgB,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAAKxB,MAAL,CAAYvD,MAAvC,CAAZ,CAAd;ADyDJ,AFDA,MJrBI,AOlCA,IAAMF,INsDG,CMtDE,GAAG,IAAIqB,cAAJ,CAAU,IAAV,EAAgB,MAAhB,EAAwBG,KAAxB,EAA+BD,QAA/B,CAAd;ADyDJ,AFDA,MJrBI;AMuBJ,AFDA,MJrBI,AOlCA,IAAIC,INqDI,CMrDC,CAACmB,aAAN,CAAoB3C,KAApB,CAAJ,EAAgC;ADyDpC,AFDA,MJrBI,EOlCE;ADyDN,AFDA,MJrBI,EOlCEwB,INoDI,CMpDC,CAAC0D,GNoDG,KMpDT,CAAelF,KNoDX,AMpDJ;ADyDN,AFDA,QGvDM,KAAKF,CNoDC,KAAKsD,AMpDX,CAAYjD,IAAZ,CNoDM,AMpDWH,KAAjB;ADyDN,AFDA,IJtBG,EAED,AOnCG,QNoDO,KAAK6B,KAAL,GAAa,SAAb;AKKZ,AFDA,IGvDG,EAED,QNkDU;AKKZ,AFDA;AEEA,AFDA,YHJU,KAAK,SAAL;AKMV,AFDA,WJtBE,GCkBU,KAAKmB,YAAL,CAAkB,CDlBfvC,ICkBoBe,CDlBjC,EAAoB,ECkBQ,CAAW5B,CAA7B,EAAgC,KAAK4B,KAAL,CAAW3B,CAA3C,EAA8C,YAAM;AKMhE,AFDA,MJtBI,KOlCF,GPkCU,ECkBE,GDlBGF,GCkBC,CAACkC,ADlBf,KCkBU,GAAa,CMpDb7B,KAAZ,EAAmB,QNoDP;AKMd,AFDA,MGxDI,EPkCE,GOlCGF,EPkCE,CCkBE,CAFD,EMlDR,GPkCE,AOlCY,KAAKA,MAAL,CAAYG,MAAZ,CAAmB,UAACG,CAAD;AD0DrC,AFDA,QGzDqC,EPmC7BK,ICkBI,CDlBC,AOnC+BL,CAAC,EPmC7B,GOnCkCJ,KAAb,CPmC7B;AMwBR,AFDA,MG1DqC,CAAnB,CAAd,EPoCI;AMwBR,AFDA,MG1DIA,KAAK,CNqDC,AMrDAsB,IAAN,CNqDW,AMrDA+B,WAAX,CAAuBrD,INqDjB,CMrDN;AD4DJ,AFDA,IG1DG,EAED,EPiCI,KAAK,CCkBC,IACE,KAAK4B,CDnBb,cCmBQ,IAAwB,KAAxB,IACA,KAAKD,IAAL,KAAc,IADd,IAEA,KAAKA,IAAL,CAAUzB,MAAV,GAAmB,CAHrB,EAIE;AKGd,AFDA,UJvBQO,KAAK,CCsBC,EDtBE,ECsBIiC,ODtBZ,GCsBoB,GAAG,KAAKhD,KAAL,CAAWuD,oBAAX,CACf,KAAKtB,IAAL,CAAU,CAAV,EAAa/B,CADE,EAEf,KAAK+B,IAAL,CAAU,CAAV,EAAa9B,CAFE,CAAjB;AKGd,AFDA,UJvBQ;AMyBR,AFDA,gBHCc,KAAKqD,QAAL,CAAcR,UAAd;AKCd,AFDA,QJxBM,GOnCJ,EPmCS,CCyBE,CAVD,MAUO,SDzBb,AOnCM1C,KAAV,EAAiBsB,IAAjB,EAAuB;AD6DzB,AFDA,MG3DI,IPmCIb,AOnCAa,IAAI,CPmCC,AOnCAqB,CN4DC,EDzBE,GCyBGd,KAAL,CDzBN,COnCA,CN4DmB,AM5DA7B,KAAnB,CAAJ,EN4DU,AM5DqB;AD6DnC,AFDA,QG3DMA,EPmCE,GOnCG,CN4DE,AM5DDsB,IAAN,CAAW+B,WAAX,CAAuBrD,KAAvB;AD6DN,AFDA,QG3DMsB,IAAI,CAAC4D,QAAL,CAAclF,KAAd;AD6DN,AFDA,QJzBM,AOlCAA,KPkCK,AOlCA,CN2DC,AM3DAsB,IAAN,GAAaA,EPkCb,EOlCA;AD6DN,AFDA,MG3DK,IPkCGb,KAAK,GAAG,SAAR;AM2BR,AFDA,IG3DG,MPkCK,ECwBE,KAAK,QAAL;AKGV,AFDA,cHDY,KAAKf,KAAL,CAAW2D,WAAX,CAAuB,IAAvB;AKGZ,AFDA,QJ1BM,KAAK,CCyBC,QDzBN;AM4BN,AFDA,UJ1BQ5C,COlCN,IPkCW,GAAG,SAAR,AOlCC;AD8DT,AFDA,MG5DI,IPkCI,COlCCX,CN0DC,KM1DN,CAAYqF,IAAZ,CAAiB,YAAY;AD8DjC,AFDA,QG5DM,MN0DM5C,CM1DC,MN0DM,AM1DAwC,CN0DCvC,GAAR,AM1DW,CN0DC,AM1DAyC,MAAL,EAAb,SN0DM,EAA+B,KAAKpD,KAApC;AKIZ,AFDA,MG5DK,CAFD,CPmCE,KAAK,CCyBC,MDzBN;AM6BN,AFDA,UHzGQ,AD8EApB,KAAK,GAAG,SAAR;AM6BR,AFDA,MGjES,IPsCD,wCOlCgB,KAAKX,MAJpB;ADmET,AFDA,MGlES,IN+DD;AKKR,AFDA,QJ5BM,KAAK,UAAL;AM8BN,AFDA,MGpES,ENgEH,EDxBEW,KAAK,GAAG,SAAR;AM8BR,AFDA,QGjEI,EN6DI8B,ADxBA,OCwBO,CAACC,GAAR,CAAY,oBAAZ,EAAkC,KAAKjB,QAAvC,MM7D6B;ADmErC,AFDA,MHjHI,IM+CiC,IAAtBvB,KAAsB;ADoErC,AFDA,IHJG,IDzBG,EOrCAA,GPqCK,EOrCA,CAACoF,GAAN,aPqCA;AM+BN,AFDA,QGlEK,EPqCG3E,KAAK,GAAG,SAAR;AM+BR,AFDA,MGzES,IP4CD;AM+BR,AFDA,MJtDI,EOpBK;AD4ET,AFDA,MG3ES;AD6ET,AFDA,MJ9BI,EO9CK,KP8CEA,KAAP;AMgCJ,AFDA,IJ9BG,EO/CM,SNsEMY;AKSf,AFDA,IGvEG;ADyEH,AFDA;AEEA,AFDA,WJ/BE,kBAAShB,GAAT,EAAcT,CAAd,EAAiBC,CAAjB,EAAoB;AMiCtB,AFDA,MJ/BIQ,GAAG,CAACM,SAAJ,GAAgB,SAAhB;AMiCJ,AFDA,MJ/BIN,GAAG,CAACO,QAAJ,CAAahB,CAAC,GAAG,CAAjB,EAAoBC,CAAC,GAAG,CAAxB,EAA2B,CAA3B,EAA8B,EAA9B;AMiCJ,AFDA,IJ/BG;AMiCH,AFDA,eG1EeyD;AD4Ef,AFDA;AEEA,AFDA,WJhCE,wBAAejD,GAAf,EAAoBT,CAApB,EAAuBC,CAAvB,EAA0B;AMkC5B,AFDA,MJhCIQ,GAAG,CAACM,SAAJ,GAAgB,SAAhB;AMkCJ,AFDA,MJhCIN,GAAG,CAACO,QAAJ,CAAahB,CAAC,GAAG,CAAjB,EAAoBC,CAAC,GAAG,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B;AMkCJ,AFDA,IJhCG;AMkCH,AFDA;AEEA,AFDA;AEEA,AFDA;AEEA,AFDA;AEEA,AFDA;AEEA,AFDA,eJnCeJ;AMqCffile":"src.a2b27638.js","sourceRoot":"..","sourcesContent":["// const map = `\n// eeeeeeeeeee\n// eeeebbbbbbs\n// ebbbbepepee\n// ebeeeepepee\n// ebaauwwwwee\n// ebeeeeeeeee\n// eseeeeeeeee\n// `;\n\nconst map = `\neeeeeeeeeeeeeeeeeeeeeeeeeee\naaaaaaaaaaaaaaaaaaaaaaaaaae\nebweeeeeeeeeeaeeeeeeeeeeeae\nebweeeeeeeeeeappppppppppeae\nebweeeeeeeeeeappppppppppaaS\nebweeeeeeeeeeappppppppppeee\nebweeeeeeeeeeaeeeeeeeeeeeee\nebweeooooooooaeeeeeeeeeeeee\nebweeooooooooaeeeeeeeeeeeee\nebweeooooooooabbbbbbbbbbbbb\nebweeooooooooaeeeeeeeeeeeee\nebweeooooooooaeeeeeeeeeeeee\nebweeooooooooaeeeeeeeeeeeee\nebweeooooooooaeeeeeeeeeeeee\nebweeooooooooaeeeeeeeeeeeee\nebwwwooooooooaeeeeeeeeeeeee\nebappoooppppoaeeeeeeeeeeeee\nebappoooppppoaeeeeeeeeeeeee\nebappooooooaaaeeeppppeeeeee\nebwwwooooooooaeeeppppeeeeee\nebwwwoooooooXaaaaaaaaaaaaaS\nebwwwooooooooaeeeppppeeeeee\nebwwwooooooooaeeeeeeeeeeeee\nebaaaaaaaaaaaaeeeeeeeeeeeee\nebaaaaaaaaaaaaaeeeeeeeeeeee\nebweeeeeeeeeeaaaeeeeeeeeeee\nebweeeeeeeeeeeeeeeeeeeeeeee\nebweeeeeeeeeeeeeeeeeeeeeeee\nebweeeeeeeeeeeeeeeeeeeeeeee\nebweeeeeeeeeeeeeeeeeeeeeeee\nebweeeeeeeeeeeeeeeeeeeeeeee\nebweeeeeeeeeeeeeeeeeeeeeeee\nebweeeeeeeeeeeeeeeeeeeeeeee\neSweeeeeeeeeeeeeeeeeeeeeeee\n`;\n\nexport default map;\n","const MAX_PARKED_BIKES = 8;\n\nclass Cell {\n  constructor(world, type, x, y) {\n    this.type = type;\n    this.x = x;\n    this.y = y;\n    this.agents = [];\n    this.bikes = 0;\n  }\n\n  // Check if agent can be added to this cell\n  checkAddAgent(agent) {\n    if (this.type === \"SPAWN\") {\n      return true;\n    }\n\n    if (this.type === \"BUILDING_ENTRANCE\" && agent.type === \"PEDESTRIAN\") {\n      return true;\n    }\n    // Allow a maximum of:\n    // 2 agents of type BIKE\n    // or 3 agents of type PEDESTRIAN\n    // or 1 agent of type BIKE and 2 agents of type PEDESTRIAN\n    // or 2 agent of type BIKE and 1 agents of type PEDESTRIAN\n    if (\n      agent.type === \"BIKE\" &&\n      this.agents.filter(({ type }) => type === \"BIKE\").length >= 2\n    ) {\n      return false;\n    }\n    if (\n      agent.type === \"PEDESTRIAN\" &&\n      this.agents.filter(({ type }) => type === \"PEDESTRIAN\").length >= 3\n    ) {\n      return false;\n    }\n    if (\n      agent.type === \"BIKE\" &&\n      this.agents.filter(({ type }) => type === \"PEDESTRIAN\").length >= 2\n    ) {\n      return false;\n    }\n    if (\n      agent.type === \"PEDESTRIAN\" &&\n      this.agents.filter(({ type }) => type === \"BIKE\").length >= 3\n    ) {\n      return false;\n    }\n    return true;\n  }\n\n  addAgent(agent) {\n    this.agents.push(agent);\n  }\n\n  removeAgent(agent) {\n    this.agents = this.agents.filter((a) => a !== agent);\n  }\n\n  canPark() {\n    return this.type === \"PARKING\" && this.bikes < MAX_PARKED_BIKES;\n  }\n\n  addBike() {\n    this.bikes++;\n  }\n\n  removeBike() {\n    this.bikes--;\n  }\n\n  draw(ctx, x, y, squareSize) {\n    const canvas_x = x * squareSize;\n    const canvas_y = y * squareSize;\n\n    let color = \"#fefefe\";\n\n    color = this.getCellColor(color);\n\n    ctx.fillStyle = color;\n    ctx.fillRect(canvas_x, canvas_y, squareSize, squareSize);\n\n    // Draw progress bar for amount of parked bikes\n    if (this.type === \"PARKING\") {\n      ctx.fillStyle = \"#ffffff\";\n      ctx.fillRect(canvas_x + 2, canvas_y + squareSize - 8, squareSize - 4, 4);\n      ctx.fillStyle = \"#316cf4\";\n      ctx.fillRect(\n        canvas_x + 2,\n        canvas_y + squareSize - 8,\n        (squareSize + 4) * (this.bikes / MAX_PARKED_BIKES),\n        4\n      );\n    }\n\n    if (this.type === \"BUILDING_ENTRANCE\") {\n      ctx.fillStyle = \"#000000\";\n      ctx.font = \"12px monospace\";\n      ctx.fillText(\n        \"\" + this.agents.filter(({ type }) => type === \"PEDESTRIAN\").length,\n        canvas_x + 2,\n        canvas_y + 24\n      );\n    } else {\n      const bikeAgents = this.agents.filter(({ type }) => type === \"BIKE\");\n      const pedestrianAgents = this.agents.filter(\n        ({ type }) => type === \"PEDESTRIAN\"\n      );\n      if (bikeAgents.length > 0) {\n        bikeAgents.forEach((agent, i) => {\n          this.drawBike(ctx, x * squareSize + i * 10, y * squareSize);\n        });\n        if (pedestrianAgents.length > 0) {\n          pedestrianAgents.forEach((agent, i) => {\n            this.drawPedestrian(\n              ctx,\n              x * squareSize + 10,\n              y * squareSize + i * 10\n            );\n          });\n        }\n      } else if (pedestrianAgents.length > 0) {\n        pedestrianAgents.forEach((agent, i) => {\n          if (i < 2) {\n            this.drawPedestrian(ctx, x * squareSize + i * 10, y * squareSize);\n          } else {\n            this.drawPedestrian(ctx, x * squareSize + 5, y * squareSize + 10);\n          }\n        });\n      }\n    }\n\n    // !! Debug to show number of agents in cell\n    // if([\"SPAWN\", \"BIKE_PATH\", \"PEDESTRIAN_PATH\", \"ALL_PATH\", \"PARKING\", \"BUILDING_ENTRANCE\"].includes(this.type)) {\n    //   ctx.font = '12px monospace';\n    //   ctx.fillStyle = \"black\";\n    //   // make text slightly transparent\n    //   ctx.globalAlpha = 0.3;\n    //   ctx.fillText(\"B:\" + this.agents.filter(({type}) => type === \"BIKE\").length, canvas_x + 2, canvas_y + 12);\n    //   ctx.fillText(\"P:\" + this.agents.filter(({type}) => type === \"PEDESTRIAN\").length, canvas_x + 2, canvas_y + 24);\n    //   // reset transparency\n    //   ctx.globalAlpha = 1;\n    // }\n  }\n\n  // Drawing utilities, nothing important after this point :)\n\n  getCellColor(color) {\n    switch (this.type) {\n      case \"SPAWN\":\n        color = \"#e7b1b6\";\n        break;\n      case \"BIKE_PATH\":\n        color = \"#f3d8da\";\n        break;\n      case \"PEDESTRIAN_PATH\":\n        color = \"#eaecef\";\n        break;\n      case \"ALL_PATH\":\n        color = \"#cfd4d9\";\n        break;\n      case \"PARKING\":\n        color = \"#aeb5bc\";\n        break;\n      case \"EMPTY\":\n        color = \"#d5e6de\";\n        break;\n      case \"BUILDING\":\n        color = \"#a6c4f9\";\n        break;\n      case \"BUILDING_ENTRANCE\":\n        color = \"#7ba6f7\";\n        break;\n    }\n    return color;\n  }\n\n  drawBike(ctx, x, y) {\n    ctx.fillStyle = \"#222529\";\n    ctx.fillRect(x + 6, y + 2, 5, 20);\n  }\n\n  drawPedestrian(ctx, x, y) {\n    ctx.fillStyle = \"#fd7e14\";\n    ctx.fillRect(x + 6, y + 2, 5, 5);\n  }\n}\n\nexport default Cell;\n","class Agent {\n  constructor(world, type, cell, strategy) {\n    this.world = world;\n    this.type = type;\n    this.spawn = cell;\n    this.cell = cell;\n    this.parked_cell = null;\n    this.strategy = strategy;\n    this.move_to = null;\n    // This is for storing the calculated path\n    // and not recalculating it every tick\n    this.path = null;\n    this.calculatingPath = false;\n    this.stage = \"ENTERING\";\n  }\n\n  getPathfinder() {\n    return this.type === \"BIKE\"\n      ? this.world.bikePathfinder\n      : this.world.pedestrianPathfinder;\n  }\n\n  park() {\n    if (this.cell.canPark()) {\n      if (\n        this.type === \"BIKE\" &&\n        this.cell.type === \"PARKING\" &&\n        this.parked_cell === null\n      ) {\n        this.parked_cell = this.cell;\n        this.type = \"PEDESTRIAN\";\n        this.cell.addBike();\n        return true;\n      }\n    }\n    return false;\n  }\n\n  unpark() {\n    if (\n      this.type === \"PEDESTRIAN\" &&\n      this.cell.type === \"PARKING\" &&\n      this.parked_cell !== null\n    ) {\n      this.cell.removeBike();\n      this.parked_cell = null;\n      this.type = \"BIKE\";\n    }\n  }\n\n  changeMoveTo(x, y, callback) {\n    this.calculatingPath = true;\n    this.move_to = [x, y];\n    this.path = null;\n\n    const pathfinder = this.getPathfinder();\n    pathfinder.findPath(\n      this.cell.x,\n      this.cell.y,\n      this.move_to[0],\n      this.move_to[1],\n      (path) => {\n        if (path !== null) {\n          this.path = path;\n        } else {\n          console.log(\"Agent has no way to reach its goal\");\n        }\n        this.calculatingPath = false;\n        if (callback) {\n          callback();\n        }\n      }\n    );\n\n    pathfinder.calculate();\n  }\n\n  makeMove(nextCell) {\n    if (nextCell.checkAddAgent(this)) {\n      this.world.moveAgent(this, nextCell);\n      this.path.shift();\n    }\n  }\n\n  // WORK ON AGENT STRATS HERE -->\n  act() {\n    switch (this.strategy) {\n      case \"TEST_STRATEGY\":\n        switch (this.stage) {\n          case \"ENTERING\":\n            const parkingCell = this.world.getRandomCellOfType(\"PARKING\");\n            this.changeMoveTo(parkingCell.x, parkingCell.y, () => {\n              this.stage = \"MOVING_TO_PARKING_ENTERING\";\n            });\n            break;\n          case \"MOVING_TO_PARKING_ENTERING\":\n            if (\n              this.calculatingPath == false &&\n              this.path !== null &&\n              this.path.length > 0\n            ) {\n              const nextCell = this.world.getCellAtCoordinates(\n                this.path[0].x,\n                this.path[0].y\n              );\n              this.makeMove(nextCell);\n            } else {\n              this.stage = \"PARKING\";\n            }\n            break;\n          case \"PARKING\":\n            if (this.park()) {\n              this.stage = \"LEAVING_PARKING\";\n            } else {\n              console.log(\"Could not park\");\n            }\n            break;\n          case \"LEAVING_PARKING\":\n            this.changeMoveTo(12, 20, () => {\n              this.stage = \"MOVING_TO_GOAL\";\n            });\n            break;\n          case \"MOVING_TO_GOAL\":\n            if (\n              this.calculatingPath == false &&\n              this.path !== null &&\n              this.path.length > 0\n            ) {\n              const nextCell = this.world.getCellAtCoordinates(\n                this.path[0].x,\n                this.path[0].y\n              );\n              this.makeMove(nextCell);\n            } else {\n              this.stage = \"IN_GOAL\";\n            }\n            break;\n          case \"IN_GOAL\":\n            // Todo: Wait for a bit\n            this.stage = \"LEAVING_GOAL\";\n            break;\n          case \"LEAVING_GOAL\":\n            this.changeMoveTo(this.parked_cell.x, this.parked_cell.y, () => {\n              this.stage = \"MOVING_TO_PARKING_LEAVING\";\n            });\n            break;\n          case \"MOVING_TO_PARKING_LEAVING\":\n            if (\n              this.calculatingPath == false &&\n              this.path !== null &&\n              this.path.length > 0\n            ) {\n              const nextCell = this.world.getCellAtCoordinates(\n                this.path[0].x,\n                this.path[0].y\n              );\n              this.makeMove(nextCell);\n            } else {\n              this.stage = \"UNPARKING\";\n            }\n            break;\n          case \"UNPARKING\":\n            this.unpark();\n            this.stage = \"LEAVING\";\n            break;\n          case \"LEAVING\":\n            this.changeMoveTo(this.spawn.x, this.spawn.y, () => {\n              this.stage = \"MOVING_TO_EXIT\";\n            });\n            break;\n          case \"MOVING_TO_EXIT\":\n            if (\n              this.calculatingPath == false &&\n              this.path !== null &&\n              this.path.length > 0\n            ) {\n              const nextCell = this.world.getCellAtCoordinates(\n                this.path[0].x,\n                this.path[0].y\n              );\n              this.makeMove(nextCell);\n            } else {\n              this.stage = \"EXITED\";\n            }\n            break;\n          case \"EXITED\":\n            this.world.removeAgent(this);\n            break;\n          default:\n            console.log(\"Unknown stage: \", this.stage);\n            break;\n        }\n        break;   \n      default:\n        console.log(\"Unknown strategy: \", this.strategy);\n    }\n  }\n}\n\nexport default Agent;\n","/**\n * Represents a single instance of EasyStar.\n * A path that is in the queue to eventually be found.\n */\nmodule.exports = function() {\n    this.pointsToAvoid = {};\n    this.startX;\n    this.callback;\n    this.startY;\n    this.endX;\n    this.endY;\n    this.nodeHash = {};\n    this.openList;\n};","/**\n* A simple Node that represents a single tile on the grid.\n* @param {Object} parent The parent node.\n* @param {Number} x The x position on the grid.\n* @param {Number} y The y position on the grid.\n* @param {Number} costSoFar How far this node is in moves*cost from the start.\n* @param {Number} simpleDistanceToTarget Manhatten distance to the end point.\n**/\nmodule.exports = function(parent, x, y, costSoFar, simpleDistanceToTarget) {\n    this.parent = parent;\n    this.x = x;\n    this.y = y;\n    this.costSoFar = costSoFar;\n    this.simpleDistanceToTarget = simpleDistanceToTarget;\n\n    /**\n    * @return {Number} Best guess distance of a cost using this node.\n    **/\n    this.bestGuessDistance = function() {\n        return this.costSoFar + this.simpleDistanceToTarget;\n    }\n};","// Generated by CoffeeScript 1.8.0\n(function() {\n  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;\n\n  floor = Math.floor, min = Math.min;\n\n\n  /*\n  Default comparison function to be used\n   */\n\n  defaultCmp = function(x, y) {\n    if (x < y) {\n      return -1;\n    }\n    if (x > y) {\n      return 1;\n    }\n    return 0;\n  };\n\n\n  /*\n  Insert item x in list a, and keep it sorted assuming a is sorted.\n  \n  If x is already in a, insert it to the right of the rightmost x.\n  \n  Optional args lo (default 0) and hi (default a.length) bound the slice\n  of a to be searched.\n   */\n\n  insort = function(a, x, lo, hi, cmp) {\n    var mid;\n    if (lo == null) {\n      lo = 0;\n    }\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (lo < 0) {\n      throw new Error('lo must be non-negative');\n    }\n    if (hi == null) {\n      hi = a.length;\n    }\n    while (lo < hi) {\n      mid = floor((lo + hi) / 2);\n      if (cmp(x, a[mid]) < 0) {\n        hi = mid;\n      } else {\n        lo = mid + 1;\n      }\n    }\n    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);\n  };\n\n\n  /*\n  Push item onto heap, maintaining the heap invariant.\n   */\n\n  heappush = function(array, item, cmp) {\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    array.push(item);\n    return _siftdown(array, 0, array.length - 1, cmp);\n  };\n\n\n  /*\n  Pop the smallest item off the heap, maintaining the heap invariant.\n   */\n\n  heappop = function(array, cmp) {\n    var lastelt, returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    lastelt = array.pop();\n    if (array.length) {\n      returnitem = array[0];\n      array[0] = lastelt;\n      _siftup(array, 0, cmp);\n    } else {\n      returnitem = lastelt;\n    }\n    return returnitem;\n  };\n\n\n  /*\n  Pop and return the current smallest value, and add the new item.\n  \n  This is more efficient than heappop() followed by heappush(), and can be\n  more appropriate when using a fixed size heap. Note that the value\n  returned may be larger than item! That constrains reasonable use of\n  this routine unless written as part of a conditional replacement:\n      if item > array[0]\n        item = heapreplace(array, item)\n   */\n\n  heapreplace = function(array, item, cmp) {\n    var returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    returnitem = array[0];\n    array[0] = item;\n    _siftup(array, 0, cmp);\n    return returnitem;\n  };\n\n\n  /*\n  Fast version of a heappush followed by a heappop.\n   */\n\n  heappushpop = function(array, item, cmp) {\n    var _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (array.length && cmp(array[0], item) < 0) {\n      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];\n      _siftup(array, 0, cmp);\n    }\n    return item;\n  };\n\n\n  /*\n  Transform list into a heap, in-place, in O(array.length) time.\n   */\n\n  heapify = function(array, cmp) {\n    var i, _i, _j, _len, _ref, _ref1, _results, _results1;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    _ref1 = (function() {\n      _results1 = [];\n      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }\n      return _results1;\n    }).apply(this).reverse();\n    _results = [];\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      i = _ref1[_i];\n      _results.push(_siftup(array, i, cmp));\n    }\n    return _results;\n  };\n\n\n  /*\n  Update the position of the given item in the heap.\n  This function should be called every time the item is being modified.\n   */\n\n  updateItem = function(array, item, cmp) {\n    var pos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    pos = array.indexOf(item);\n    if (pos === -1) {\n      return;\n    }\n    _siftdown(array, 0, pos, cmp);\n    return _siftup(array, pos, cmp);\n  };\n\n\n  /*\n  Find the n largest elements in a dataset.\n   */\n\n  nlargest = function(array, n, cmp) {\n    var elem, result, _i, _len, _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    result = array.slice(0, n);\n    if (!result.length) {\n      return result;\n    }\n    heapify(result, cmp);\n    _ref = array.slice(n);\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      elem = _ref[_i];\n      heappushpop(result, elem, cmp);\n    }\n    return result.sort(cmp).reverse();\n  };\n\n\n  /*\n  Find the n smallest elements in a dataset.\n   */\n\n  nsmallest = function(array, n, cmp) {\n    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (n * 10 <= array.length) {\n      result = array.slice(0, n).sort(cmp);\n      if (!result.length) {\n        return result;\n      }\n      los = result[result.length - 1];\n      _ref = array.slice(n);\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        elem = _ref[_i];\n        if (cmp(elem, los) < 0) {\n          insort(result, elem, 0, null, cmp);\n          result.pop();\n          los = result[result.length - 1];\n        }\n      }\n      return result;\n    }\n    heapify(array, cmp);\n    _results = [];\n    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {\n      _results.push(heappop(array, cmp));\n    }\n    return _results;\n  };\n\n  _siftdown = function(array, startpos, pos, cmp) {\n    var newitem, parent, parentpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    newitem = array[pos];\n    while (pos > startpos) {\n      parentpos = (pos - 1) >> 1;\n      parent = array[parentpos];\n      if (cmp(newitem, parent) < 0) {\n        array[pos] = parent;\n        pos = parentpos;\n        continue;\n      }\n      break;\n    }\n    return array[pos] = newitem;\n  };\n\n  _siftup = function(array, pos, cmp) {\n    var childpos, endpos, newitem, rightpos, startpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    endpos = array.length;\n    startpos = pos;\n    newitem = array[pos];\n    childpos = 2 * pos + 1;\n    while (childpos < endpos) {\n      rightpos = childpos + 1;\n      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {\n        childpos = rightpos;\n      }\n      array[pos] = array[childpos];\n      pos = childpos;\n      childpos = 2 * pos + 1;\n    }\n    array[pos] = newitem;\n    return _siftdown(array, startpos, pos, cmp);\n  };\n\n  Heap = (function() {\n    Heap.push = heappush;\n\n    Heap.pop = heappop;\n\n    Heap.replace = heapreplace;\n\n    Heap.pushpop = heappushpop;\n\n    Heap.heapify = heapify;\n\n    Heap.updateItem = updateItem;\n\n    Heap.nlargest = nlargest;\n\n    Heap.nsmallest = nsmallest;\n\n    function Heap(cmp) {\n      this.cmp = cmp != null ? cmp : defaultCmp;\n      this.nodes = [];\n    }\n\n    Heap.prototype.push = function(x) {\n      return heappush(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pop = function() {\n      return heappop(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.peek = function() {\n      return this.nodes[0];\n    };\n\n    Heap.prototype.contains = function(x) {\n      return this.nodes.indexOf(x) !== -1;\n    };\n\n    Heap.prototype.replace = function(x) {\n      return heapreplace(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pushpop = function(x) {\n      return heappushpop(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.heapify = function() {\n      return heapify(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.updateItem = function(x) {\n      return updateItem(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.clear = function() {\n      return this.nodes = [];\n    };\n\n    Heap.prototype.empty = function() {\n      return this.nodes.length === 0;\n    };\n\n    Heap.prototype.size = function() {\n      return this.nodes.length;\n    };\n\n    Heap.prototype.clone = function() {\n      var heap;\n      heap = new Heap();\n      heap.nodes = this.nodes.slice(0);\n      return heap;\n    };\n\n    Heap.prototype.toArray = function() {\n      return this.nodes.slice(0);\n    };\n\n    Heap.prototype.insert = Heap.prototype.push;\n\n    Heap.prototype.top = Heap.prototype.peek;\n\n    Heap.prototype.front = Heap.prototype.peek;\n\n    Heap.prototype.has = Heap.prototype.contains;\n\n    Heap.prototype.copy = Heap.prototype.clone;\n\n    return Heap;\n\n  })();\n\n  (function(root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      return define([], factory);\n    } else if (typeof exports === 'object') {\n      return module.exports = factory();\n    } else {\n      return root.Heap = factory();\n    }\n  })(this, function() {\n    return Heap;\n  });\n\n}).call(this);\n","module.exports = require('./lib/heap');\n","/**\n*   EasyStar.js\n*   github.com/prettymuchbryce/EasyStarJS\n*   Licensed under the MIT license.\n*\n*   Implementation By Bryce Neal (@prettymuchbryce)\n**/\n\nvar EasyStar = {}\nvar Instance = require('./instance');\nvar Node = require('./node');\nvar Heap = require('heap');\n\nconst CLOSED_LIST = 0;\nconst OPEN_LIST = 1;\n\nmodule.exports = EasyStar;\n\nvar nextInstanceId = 1;\n\nEasyStar.js = function() {\n    var STRAIGHT_COST = 1.0;\n    var DIAGONAL_COST = 1.4;\n    var syncEnabled = false;\n    var pointsToAvoid = {};\n    var collisionGrid;\n    var costMap = {};\n    var pointsToCost = {};\n    var directionalConditions = {};\n    var allowCornerCutting = true;\n    var iterationsSoFar;\n    var instances = {};\n    var instanceQueue = [];\n    var iterationsPerCalculation = Number.MAX_VALUE;\n    var acceptableTiles;\n    var diagonalsEnabled = false;\n\n    /**\n    * Sets the collision grid that EasyStar uses.\n    *\n    * @param {Array|Number} tiles An array of numbers that represent\n    * which tiles in your grid should be considered\n    * acceptable, or \"walkable\".\n    **/\n    this.setAcceptableTiles = function(tiles) {\n        if (tiles instanceof Array) {\n            // Array\n            acceptableTiles = tiles;\n        } else if (!isNaN(parseFloat(tiles)) && isFinite(tiles)) {\n            // Number\n            acceptableTiles = [tiles];\n        }\n    };\n\n    /**\n    * Enables sync mode for this EasyStar instance..\n    * if you're into that sort of thing.\n    **/\n    this.enableSync = function() {\n        syncEnabled = true;\n    };\n\n    /**\n    * Disables sync mode for this EasyStar instance.\n    **/\n    this.disableSync = function() {\n        syncEnabled = false;\n    };\n\n    /**\n     * Enable diagonal pathfinding.\n     */\n    this.enableDiagonals = function() {\n        diagonalsEnabled = true;\n    }\n\n    /**\n     * Disable diagonal pathfinding.\n     */\n    this.disableDiagonals = function() {\n        diagonalsEnabled = false;\n    }\n\n    /**\n    * Sets the collision grid that EasyStar uses.\n    *\n    * @param {Array} grid The collision grid that this EasyStar instance will read from.\n    * This should be a 2D Array of Numbers.\n    **/\n    this.setGrid = function(grid) {\n        collisionGrid = grid;\n\n        //Setup cost map\n        for (var y = 0; y < collisionGrid.length; y++) {\n            for (var x = 0; x < collisionGrid[0].length; x++) {\n                if (!costMap[collisionGrid[y][x]]) {\n                    costMap[collisionGrid[y][x]] = 1\n                }\n            }\n        }\n    };\n\n    /**\n    * Sets the tile cost for a particular tile type.\n    *\n    * @param {Number} The tile type to set the cost for.\n    * @param {Number} The multiplicative cost associated with the given tile.\n    **/\n    this.setTileCost = function(tileType, cost) {\n        costMap[tileType] = cost;\n    };\n\n    /**\n    * Sets the an additional cost for a particular point.\n    * Overrides the cost from setTileCost.\n    *\n    * @param {Number} x The x value of the point to cost.\n    * @param {Number} y The y value of the point to cost.\n    * @param {Number} The multiplicative cost associated with the given point.\n    **/\n    this.setAdditionalPointCost = function(x, y, cost) {\n        if (pointsToCost[y] === undefined) {\n            pointsToCost[y] = {};\n        }\n        pointsToCost[y][x] = cost;\n    };\n\n    /**\n    * Remove the additional cost for a particular point.\n    *\n    * @param {Number} x The x value of the point to stop costing.\n    * @param {Number} y The y value of the point to stop costing.\n    **/\n    this.removeAdditionalPointCost = function(x, y) {\n        if (pointsToCost[y] !== undefined) {\n            delete pointsToCost[y][x];\n        }\n    }\n\n    /**\n    * Remove all additional point costs.\n    **/\n    this.removeAllAdditionalPointCosts = function() {\n        pointsToCost = {};\n    }\n\n    /**\n    * Sets a directional condition on a tile\n    *\n    * @param {Number} x The x value of the point.\n    * @param {Number} y The y value of the point.\n    * @param {Array.<String>} allowedDirections A list of all the allowed directions that can access\n    * the tile.\n    **/\n    this.setDirectionalCondition = function(x, y, allowedDirections) {\n        if (directionalConditions[y] === undefined) {\n            directionalConditions[y] = {};\n        }\n        directionalConditions[y][x] = allowedDirections;\n    };\n\n    /**\n    * Remove all directional conditions\n    **/\n    this.removeAllDirectionalConditions = function() {\n        directionalConditions = {};\n    };\n\n    /**\n    * Sets the number of search iterations per calculation.\n    * A lower number provides a slower result, but more practical if you\n    * have a large tile-map and don't want to block your thread while\n    * finding a path.\n    *\n    * @param {Number} iterations The number of searches to prefrom per calculate() call.\n    **/\n    this.setIterationsPerCalculation = function(iterations) {\n        iterationsPerCalculation = iterations;\n    };\n\n    /**\n    * Avoid a particular point on the grid,\n    * regardless of whether or not it is an acceptable tile.\n    *\n    * @param {Number} x The x value of the point to avoid.\n    * @param {Number} y The y value of the point to avoid.\n    **/\n    this.avoidAdditionalPoint = function(x, y) {\n        if (pointsToAvoid[y] === undefined) {\n            pointsToAvoid[y] = {};\n        }\n        pointsToAvoid[y][x] = 1;\n    };\n\n    /**\n    * Stop avoiding a particular point on the grid.\n    *\n    * @param {Number} x The x value of the point to stop avoiding.\n    * @param {Number} y The y value of the point to stop avoiding.\n    **/\n    this.stopAvoidingAdditionalPoint = function(x, y) {\n        if (pointsToAvoid[y] !== undefined) {\n            delete pointsToAvoid[y][x];\n        }\n    };\n\n    /**\n    * Enables corner cutting in diagonal movement.\n    **/\n    this.enableCornerCutting = function() {\n        allowCornerCutting = true;\n    };\n\n    /**\n    * Disables corner cutting in diagonal movement.\n    **/\n    this.disableCornerCutting = function() {\n        allowCornerCutting = false;\n    };\n\n    /**\n    * Stop avoiding all additional points on the grid.\n    **/\n    this.stopAvoidingAllAdditionalPoints = function() {\n        pointsToAvoid = {};\n    };\n\n    /**\n    * Find a path.\n    *\n    * @param {Number} startX The X position of the starting point.\n    * @param {Number} startY The Y position of the starting point.\n    * @param {Number} endX The X position of the ending point.\n    * @param {Number} endY The Y position of the ending point.\n    * @param {Function} callback A function that is called when your path\n    * is found, or no path is found.\n    * @return {Number} A numeric, non-zero value which identifies the created instance. This value can be passed to cancelPath to cancel the path calculation.\n    *\n    **/\n    this.findPath = function(startX, startY, endX, endY, callback) {\n        // Wraps the callback for sync vs async logic\n        var callbackWrapper = function(result) {\n            if (syncEnabled) {\n                callback(result);\n            } else {\n                setTimeout(function() {\n                    callback(result);\n                });\n            }\n        }\n\n        // No acceptable tiles were set\n        if (acceptableTiles === undefined) {\n            throw new Error(\"You can't set a path without first calling setAcceptableTiles() on EasyStar.\");\n        }\n        // No grid was set\n        if (collisionGrid === undefined) {\n            throw new Error(\"You can't set a path without first calling setGrid() on EasyStar.\");\n        }\n\n        // Start or endpoint outside of scope.\n        if (startX < 0 || startY < 0 || endX < 0 || endY < 0 ||\n        startX > collisionGrid[0].length-1 || startY > collisionGrid.length-1 ||\n        endX > collisionGrid[0].length-1 || endY > collisionGrid.length-1) {\n            throw new Error(\"Your start or end point is outside the scope of your grid.\");\n        }\n\n        // Start and end are the same tile.\n        if (startX===endX && startY===endY) {\n            callbackWrapper([]);\n            return;\n        }\n\n        // End point is not an acceptable tile.\n        var endTile = collisionGrid[endY][endX];\n        var isAcceptable = false;\n        for (var i = 0; i < acceptableTiles.length; i++) {\n            if (endTile === acceptableTiles[i]) {\n                isAcceptable = true;\n                break;\n            }\n        }\n\n        if (isAcceptable === false) {\n            callbackWrapper(null);\n            return;\n        }\n\n        // Create the instance\n        var instance = new Instance();\n        instance.openList = new Heap(function(nodeA, nodeB) {\n            return nodeA.bestGuessDistance() - nodeB.bestGuessDistance();\n        });\n        instance.isDoneCalculating = false;\n        instance.nodeHash = {};\n        instance.startX = startX;\n        instance.startY = startY;\n        instance.endX = endX;\n        instance.endY = endY;\n        instance.callback = callbackWrapper;\n\n        instance.openList.push(coordinateToNode(instance, instance.startX,\n            instance.startY, null, STRAIGHT_COST));\n\n        var instanceId = nextInstanceId ++;\n        instances[instanceId] = instance;\n        instanceQueue.push(instanceId);\n        return instanceId;\n    };\n\n    /**\n     * Cancel a path calculation.\n     *\n     * @param {Number} instanceId The instance ID of the path being calculated\n     * @return {Boolean} True if an instance was found and cancelled.\n     *\n     **/\n    this.cancelPath = function(instanceId) {\n        if (instanceId in instances) {\n            delete instances[instanceId];\n            // No need to remove it from instanceQueue\n            return true;\n        }\n        return false;\n    };\n\n    /**\n    * This method steps through the A* Algorithm in an attempt to\n    * find your path(s). It will search 4-8 tiles (depending on diagonals) for every calculation.\n    * You can change the number of calculations done in a call by using\n    * easystar.setIteratonsPerCalculation().\n    **/\n    this.calculate = function() {\n        if (instanceQueue.length === 0 || collisionGrid === undefined || acceptableTiles === undefined) {\n            return;\n        }\n        for (iterationsSoFar = 0; iterationsSoFar < iterationsPerCalculation; iterationsSoFar++) {\n            if (instanceQueue.length === 0) {\n                return;\n            }\n\n            if (syncEnabled) {\n                // If this is a sync instance, we want to make sure that it calculates synchronously.\n                iterationsSoFar = 0;\n            }\n\n            var instanceId = instanceQueue[0];\n            var instance = instances[instanceId];\n            if (typeof instance == 'undefined') {\n                // This instance was cancelled\n                instanceQueue.shift();\n                continue;\n            }\n\n            // Couldn't find a path.\n            if (instance.openList.size() === 0) {\n                instance.callback(null);\n                delete instances[instanceId];\n                instanceQueue.shift();\n                continue;\n            }\n\n            var searchNode = instance.openList.pop();\n\n            // Handles the case where we have found the destination\n            if (instance.endX === searchNode.x && instance.endY === searchNode.y) {\n                var path = [];\n                path.push({x: searchNode.x, y: searchNode.y});\n                var parent = searchNode.parent;\n                while (parent!=null) {\n                    path.push({x: parent.x, y:parent.y});\n                    parent = parent.parent;\n                }\n                path.reverse();\n                var ip = path;\n                instance.callback(ip);\n                delete instances[instanceId];\n                instanceQueue.shift();\n                continue;\n            }\n\n            searchNode.list = CLOSED_LIST;\n\n            if (searchNode.y > 0) {\n                checkAdjacentNode(instance, searchNode,\n                    0, -1, STRAIGHT_COST * getTileCost(searchNode.x, searchNode.y-1));\n            }\n            if (searchNode.x < collisionGrid[0].length-1) {\n                checkAdjacentNode(instance, searchNode,\n                    1, 0, STRAIGHT_COST * getTileCost(searchNode.x+1, searchNode.y));\n            }\n            if (searchNode.y < collisionGrid.length-1) {\n                checkAdjacentNode(instance, searchNode,\n                    0, 1, STRAIGHT_COST * getTileCost(searchNode.x, searchNode.y+1));\n            }\n            if (searchNode.x > 0) {\n                checkAdjacentNode(instance, searchNode,\n                    -1, 0, STRAIGHT_COST * getTileCost(searchNode.x-1, searchNode.y));\n            }\n            if (diagonalsEnabled) {\n                if (searchNode.x > 0 && searchNode.y > 0) {\n\n                    if (allowCornerCutting ||\n                        (isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y-1, searchNode) &&\n                        isTileWalkable(collisionGrid, acceptableTiles, searchNode.x-1, searchNode.y, searchNode))) {\n\n                        checkAdjacentNode(instance, searchNode,\n                            -1, -1, DIAGONAL_COST * getTileCost(searchNode.x-1, searchNode.y-1));\n                    }\n                }\n                if (searchNode.x < collisionGrid[0].length-1 && searchNode.y < collisionGrid.length-1) {\n\n                    if (allowCornerCutting ||\n                        (isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y+1, searchNode) &&\n                        isTileWalkable(collisionGrid, acceptableTiles, searchNode.x+1, searchNode.y, searchNode))) {\n\n                        checkAdjacentNode(instance, searchNode,\n                            1, 1, DIAGONAL_COST * getTileCost(searchNode.x+1, searchNode.y+1));\n                    }\n                }\n                if (searchNode.x < collisionGrid[0].length-1 && searchNode.y > 0) {\n\n                    if (allowCornerCutting ||\n                        (isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y-1, searchNode) &&\n                        isTileWalkable(collisionGrid, acceptableTiles, searchNode.x+1, searchNode.y, searchNode))) {\n\n                        checkAdjacentNode(instance, searchNode,\n                            1, -1, DIAGONAL_COST * getTileCost(searchNode.x+1, searchNode.y-1));\n                    }\n                }\n                if (searchNode.x > 0 && searchNode.y < collisionGrid.length-1) {\n\n                    if (allowCornerCutting ||\n                        (isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y+1, searchNode) &&\n                        isTileWalkable(collisionGrid, acceptableTiles, searchNode.x-1, searchNode.y, searchNode))) {\n\n                        checkAdjacentNode(instance, searchNode,\n                            -1, 1, DIAGONAL_COST * getTileCost(searchNode.x-1, searchNode.y+1));\n                    }\n                }\n            }\n\n        }\n    };\n\n    // Private methods follow\n    var checkAdjacentNode = function(instance, searchNode, x, y, cost) {\n        var adjacentCoordinateX = searchNode.x+x;\n        var adjacentCoordinateY = searchNode.y+y;\n\n        if ((pointsToAvoid[adjacentCoordinateY] === undefined ||\n             pointsToAvoid[adjacentCoordinateY][adjacentCoordinateX] === undefined) &&\n            isTileWalkable(collisionGrid, acceptableTiles, adjacentCoordinateX, adjacentCoordinateY, searchNode)) {\n            var node = coordinateToNode(instance, adjacentCoordinateX,\n                adjacentCoordinateY, searchNode, cost);\n\n            if (node.list === undefined) {\n                node.list = OPEN_LIST;\n                instance.openList.push(node);\n            } else if (searchNode.costSoFar + cost < node.costSoFar) {\n                node.costSoFar = searchNode.costSoFar + cost;\n                node.parent = searchNode;\n                instance.openList.updateItem(node);\n            }\n        }\n    };\n\n    // Helpers\n    var isTileWalkable = function(collisionGrid, acceptableTiles, x, y, sourceNode) {\n        var directionalCondition = directionalConditions[y] && directionalConditions[y][x];\n        if (directionalCondition) {\n            var direction = calculateDirection(sourceNode.x - x, sourceNode.y - y)\n            var directionIncluded = function () {\n                for (var i = 0; i < directionalCondition.length; i++) {\n                    if (directionalCondition[i] === direction) return true\n                }\n                return false\n            }\n            if (!directionIncluded()) return false\n        }\n        for (var i = 0; i < acceptableTiles.length; i++) {\n            if (collisionGrid[y][x] === acceptableTiles[i]) {\n                return true;\n            }\n        }\n\n        return false;\n    };\n\n    /**\n     * -1, -1 | 0, -1  | 1, -1\n     * -1,  0 | SOURCE | 1,  0\n     * -1,  1 | 0,  1  | 1,  1\n     */\n    var calculateDirection = function (diffX, diffY) {\n        if (diffX === 0 && diffY === -1) return EasyStar.TOP\n        else if (diffX === 1 && diffY === -1) return EasyStar.TOP_RIGHT\n        else if (diffX === 1 && diffY === 0) return EasyStar.RIGHT\n        else if (diffX === 1 && diffY === 1) return EasyStar.BOTTOM_RIGHT\n        else if (diffX === 0 && diffY === 1) return EasyStar.BOTTOM\n        else if (diffX === -1 && diffY === 1) return EasyStar.BOTTOM_LEFT\n        else if (diffX === -1 && diffY === 0) return EasyStar.LEFT\n        else if (diffX === -1 && diffY === -1) return EasyStar.TOP_LEFT\n        throw new Error('These differences are not valid: ' + diffX + ', ' + diffY)\n    };\n\n    var getTileCost = function(x, y) {\n        return (pointsToCost[y] && pointsToCost[y][x]) || costMap[collisionGrid[y][x]]\n    };\n\n    var coordinateToNode = function(instance, x, y, parent, cost) {\n        if (instance.nodeHash[y] !== undefined) {\n            if (instance.nodeHash[y][x] !== undefined) {\n                return instance.nodeHash[y][x];\n            }\n        } else {\n            instance.nodeHash[y] = {};\n        }\n        var simpleDistanceToTarget = getDistance(x, y, instance.endX, instance.endY);\n        if (parent!==null) {\n            var costSoFar = parent.costSoFar + cost;\n        } else {\n            costSoFar = 0;\n        }\n        var node = new Node(parent,x,y,costSoFar,simpleDistanceToTarget);\n        instance.nodeHash[y][x] = node;\n        return node;\n    };\n\n    var getDistance = function(x1,y1,x2,y2) {\n        if (diagonalsEnabled) {\n            // Octile distance\n            var dx = Math.abs(x1 - x2);\n            var dy = Math.abs(y1 - y2);\n            if (dx < dy) {\n                return DIAGONAL_COST * dx + dy;\n            } else {\n                return DIAGONAL_COST * dy + dx;\n            }\n        } else {\n            // Manhattan distance\n            var dx = Math.abs(x1 - x2);\n            var dy = Math.abs(y1 - y2);\n            return (dx + dy);\n        }\n    };\n}\n\nEasyStar.TOP = 'TOP'\nEasyStar.TOP_RIGHT = 'TOP_RIGHT'\nEasyStar.RIGHT = 'RIGHT'\nEasyStar.BOTTOM_RIGHT = 'BOTTOM_RIGHT'\nEasyStar.BOTTOM = 'BOTTOM'\nEasyStar.BOTTOM_LEFT = 'BOTTOM_LEFT'\nEasyStar.LEFT = 'LEFT'\nEasyStar.TOP_LEFT = 'TOP_LEFT'\n","import Cell from \"./Cell\";\nimport Agent from \"./Agent\";\nimport EasyStar from \"easystarjs\";\n\nclass World {\n  constructor(worldmap) {\n    this.state = [];\n    this.agents = [];\n    this.spawns = [];\n\n    // Setup initial state\n    const rows = worldmap.split(\"\\n\").filter((row) => row.length > 0);\n\n    // Turns the characters from the worldmap into understandable strings\n    const types = {\n      // Useful stuff\n      S: \"SPAWN\",\n      X: \"BUILDING_ENTRANCE\",\n      b: \"BIKE_PATH\",\n      w: \"PEDESTRIAN_PATH\",\n      a: \"ALL_PATH\",\n      p: \"PARKING\",\n      // Cosmetics\n      e: \"EMPTY\",\n      o: \"BUILDING\",\n    };\n\n    // Create cells\n    // Loop over the 2D array of types, and create a new cell for each type\n    for (const [y, row] of rows.entries()) {\n      const rowData = [...row].map((c, x) => {\n        const type = types[c];\n        const cell = new Cell(this, type, x, y);\n\n        if (type === \"SPAWN\") {\n          this.spawns.push(cell);\n        }\n\n        return cell;\n      });\n      this.state.push(rowData);\n    }\n\n    this.bikePathfinder = new EasyStar.js();\n    this.pedestrianPathfinder = new EasyStar.js();\n\n    this.bikePathfinder.setGrid(\n      this.state.map((row) => row.map((cell) => cell.type))\n    );\n    this.bikePathfinder.setAcceptableTiles([\n      \"SPAWN\",\n      \"BIKE_PATH\",\n      \"ALL_PATH\",\n      \"PARKING\",\n    ]);\n    this.bikePathfinder.setTileCost(\"ALL_PATH\", 2);\n    this.bikePathfinder.setTileCost(\"PARKING\", 4);\n\n    this.pedestrianPathfinder.setGrid(\n      this.state.map((row) => row.map((cell) => cell.type))\n    );\n    this.pedestrianPathfinder.setAcceptableTiles([\n      \"PEDESTRIAN_PATH\",\n      \"ALL_PATH\",\n      \"PARKING\",\n      \"BUILDING_ENTRANCE\",\n    ]);\n    this.pedestrianPathfinder.setTileCost(\"ALL_PATH\", 2);\n    this.pedestrianPathfinder.setTileCost(\"PARKING\", 3);\n  }\n\n  getCellAtCoordinates(x, y) {\n    return this.state[y][x];\n  }\n\n  getRandomCellOfType(type) {\n    const cells = this.state.flat().filter((cell) => cell.type === type);\n    return cells[Math.floor(Math.random() * cells.length)];\n  }\n\n  // // Returns all neighbors of a cell\n  // getNeighbors(cell) {\n  //   const { x, y } = cell;\n  //   let neighbors = [];\n\n  //   // Get neighbors in all 4 directions\n  //   if (y > 0) {\n  //     neighbors.push(this.state[y - 1][x]);\n  //   }\n  //   if (y < this.state.length - 1) {\n  //     neighbors.push(this.state[y + 1][x]);\n  //   }\n  //   if (x > 0) {\n  //     neighbors.push(this.state[y][x - 1]);\n  //   }\n  //   if (x < this.state[y].length - 1) {\n  //     neighbors.push(this.state[y][x + 1]);\n  //   }\n  //   return neighbors;\n  // }\n\n  // Adds a new agent to the world, at a random spawn point\n  spawnAgent(strategy) {\n    // Randomly pick a spawn cell\n    const spawn = this.spawns[Math.floor(Math.random() * this.spawns.length)];\n    const agent = new Agent(this, \"BIKE\", spawn, strategy);\n\n    if (spawn.checkAddAgent(agent)) {\n      // Add agent of type \"BIKE\" to this cell\n      spawn.addAgent(agent);\n      this.agents.push(agent);\n    }\n  }\n\n  // Remove agent\n  removeAgent(agent) {\n    this.agents = this.agents.filter((a) => a !== agent);\n    agent.cell.removeAgent(agent);\n  }\n\n  // // Moves agent to a new cell\n  moveAgent(agent, cell) {\n    if (cell.checkAddAgent(agent)) {\n      agent.cell.removeAgent(agent);\n      cell.addAgent(agent);\n      agent.cell = cell;\n    }\n  }\n\n  tick() {\n    this.agents.sort(function () {\n      return 0.5 - Math.random();\n    });\n    for (const agent of this.agents) {\n      agent.act();\n    }\n  }\n}\n\nexport default World;\n","import \"./styles.css\";\nimport worldmap from \"./map\";\n\nimport World from \"./World\";\n\nconst squareSize = 32;\n\nlet tickdelay = 100;\nlet spawnspeed = 0.2;\nlet paused = false;\n\n// **********************************\n// Controls\n// **********************************\n\n// Control play/pause button with \"play-pause\" id\ndocument.getElementById(\"play-pause\").addEventListener(\"click\", () => {\n  if (document.getElementById(\"play-pause\").innerHTML === \"Play\") {\n    document.getElementById(\"play-pause\").innerHTML = \"Pause\";\n    paused = false;\n  } else {\n    document.getElementById(\"play-pause\").innerHTML = \"Play\";\n    paused = true;\n  }\n});\n\n// Control tickdelay using range input with id \"tickdelay\"\ndocument.getElementById(\"tickdelay\").addEventListener(\"input\", (e) => {\n  tickdelay = e.target.value;\n});\n\ndocument.getElementById(\"spawnspeed\").addEventListener(\"input\", (e) => {\n  spawnspeed = e.target.value;\n});\n\n// **********************************\n// Read worldmap and create worldData\n// **********************************\n\nconst world = new World(worldmap);\n\n// **********************************\n// This is where the simulation loop\n// goes later or something\n// **********************************\n\nfunction gameTick() {\n  if (!paused) {\n    // Spawn new agent sometimes\n    if (Math.random() < spawnspeed) {\n      world.spawnAgent(\"TEST_STRATEGY\");\n    }\n\n    // Move current agents\n    world.tick();\n  }\n  setTimeout(gameTick, tickdelay);\n}\n\ngameTick();\n\n// **********************************\n// Draw world state to canvas\n// **********************************\n\nconst gridWidth = world.state[0].length;\nconst gridHeight = world.state.length;\n\nconst canvasWidth = gridWidth * squareSize;\nconst canvasHeight = gridHeight * squareSize;\n\nvar c = document.getElementById(\"canvas\");\nvar ctx = c.getContext(\"2d\");\nctx.canvas.width = canvasWidth;\nctx.canvas.height = canvasHeight;\n\nfunction drawCanvas() {\n  for (const [y, row] of world.state.entries()) {\n    for (const [x, cell] of row.entries()) {\n      cell.draw(ctx, x, y, squareSize);\n    }\n  }\n  requestAnimationFrame(drawCanvas);\n}\n\nrequestAnimationFrame(drawCanvas);\n","var bundleURL = null;\nfunction getBundleURLCached() {\n  if (!bundleURL) {\n    bundleURL = getBundleURL();\n  }\n\n  return bundleURL;\n}\n\nfunction getBundleURL() {\n  // Attempt to find the URL of the current script and use that as the base URL\n  try {\n    throw new Error;\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\\/\\/[^)\\n]+/g);\n    if (matches) {\n      return getBaseURL(matches[0]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\\/\\/.+)?\\/[^/]+(?:\\?.*)?$/, '$1') + '/';\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\n","var bundle = require('./bundle-url');\n\nfunction updateLink(link) {\n  var newLink = link.cloneNode();\n  newLink.onload = function () {\n    link.remove();\n  };\n  newLink.href = link.href.split('?')[0] + '?' + Date.now();\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\n\nvar cssTimeout = null;\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n    for (var i = 0; i < links.length; i++) {\n      if (bundle.getBaseURL(links[i].href) === bundle.getBundleURL()) {\n        updateLink(links[i]);\n      }\n    }\n\n    cssTimeout = null;\n  }, 50);\n}\n\nmodule.exports = reloadCSS;\n"]}
{"version":3,"sources":["src/map.js","src/Cell.js","src/Agent.js","node_modules/easystarjs/src/instance.js","node_modules/easystarjs/src/node.js","node_modules/heap/lib/heap.js","node_modules/heap/index.js","node_modules/easystarjs/src/easystar.js","src/World.js","src/index.js","node_modules/parcel-bundler/src/builtins/bundle-url.js","node_modules/parcel-bundler/src/builtins/css-loader.js"],"names":["map","MAX_PARKED_BIKES","Cell","world","type","x","y","agents","bikes","agent","filter","length","push","a","ctx","squareSize","canvas_x","canvas_y","color","getCellColor","fillStyle","fillRect","font","fillText","bikeAgents","pedestrianAgents","forEach","i","drawBike","drawPedestrian","Agent","cell","strategy","spawn","parked_cell","move_to","path","calculatingPath","stage","bikePathfinder","pedestrianPathfinder","canPark","addBike","removeBike","pathfinder","getPathfinder","findPath","console","log","calculate","nextCell","checkAddAgent","moveAgent","shift","changeMoveTo","getCellAtCoordinates","makeMove","park","unpark","removeAgent","World","worldmap","state","spawns","rows","split","row","types","S","X","b","w","p","e","o","entries","rowData","c","EasyStar","js","setGrid","includes","setAcceptableTiles","Math","floor","random","addAgent","sort","act","tickdelay","spawnspeed","document","getElementById","addEventListener","target","value","gameTick","tick","spawnAgent","setTimeout","gridWidth","gridHeight","canvasWidth","canvasHeight","getContext","canvas","width","height","drawCanvas","draw","requestAnimationFrame","bundleURL","getBundleURLCached","getBundleURL","Error","err","matches","stack","match","getBaseURL","url","replace","exports","bundle","require","updateLink","link","newLink","cloneNode","onload","remove","href","Date","now","parentNode","insertBefore","nextSibling","cssTimeout","reloadCSS","links","querySelectorAll","module"],"mappings":"AOAA,AJAA,ACAA,AEAA,AIAA,ACAA,IDAI+G,ACAAY,MAAM,GDAG,ACAAC,GDAG,IAAhB,ACAoB,CAAC,cAAD,CAApB;AJCA,AJAA,ACAA,AEAA,ADDA;AEEA,AJAA,ACAA,ACDA,AKAA,ACCA,AFFA,SCCSZ,ACCAa,UAAT,CAAoBC,IAApB,EAA0B,CDD1B,GAA8B;AHE9B,AJAA,ACAA,ACDA,EKAE,ACCA,IDDI,ACCAC,CDDChB,MCCM,GDDX,ACCce,EDDE,ECCE,CAACE,SAAL,EAAd;AJCF,AJAA,ACAA,ACDA,AIFA,ICEIjB,SAAS,GAAGE,YAAY,EAAxB;AHEJ,AJAA,ACAA,ACDA,EKAG,ACADc,OAAO,CAACE,MAAR,GAAiB,YAAY;AJE/B,AJAA,ACAA,ACDA,AIFA,ATHA,IWKIH,IAAI,CAACI,MAAL;AJEJ,AJAA,ACAA,ACDA,AGNA,ARCA,EUKE,ACAC,CAFD,MDEOnB,SAAP;AHEF,AJAA,ACAA,ACDA,AKAC,ADHD,ATFA;AOOA,AJAA,ACAA,ACDA,AGPA,AREA,EWIEgB,OAAO,CAACI,IAAR,GAAeL,IAAI,CAACK,IAAL,CAAUlE,KAAV,CAAgB,GAAhB,EAAqB,CAArB,IAA0B,GAA1B,GAAgCmE,IAAI,CAACC,GAAL,EAA/C;AJGF,AJAA,ACAA,ACDA,AKAA,ADJA,ATDA,EWIEP,IAAI,CAACQ,EDCErB,QCDP,CAAgBsB,GDClB,GAAwB,MCDtB,CAA6BR,OAA7B,EAAsCD,IAAI,CAACU,WAA3C;AJGF,AJAA,ACAA,ACDA,AMDC,AHPD,ARGA,EUKE;AHEF,AJAA,ACAA,ACDA,ALLA,EUKE,IAAI;AHEN,AJAA,ACAA,ACDA,AMDA,AVXA,ADOA,IUKI,ACDAC,ATXE3G,ADAA7B,MSYI,IAAIiH,ACDA,GAAG,EDCP,CTZY,CSYlB,ACDJ,EVXyB,CAAzB;AMcA,AHAA,ACDA,ALLA,EUKG,ARZD,CQUA,CAEE,OAAOC,GAAP,EAAY,CRZFhH,KAAZ,EAAmBC,IAAnB,EAAyB2B,IAAzB,EAA+BC,QAA/B,EAAyC;AKc3C,AHAA,ACDA,AMFA,AXFA,IUII,ARbuC,ADCrC9B,ADQAF,GAAG,CUIDoH,CCFCsB,MDEM,GAAG,ACFlB,CDEmB,ECFE,GDEGvB,GAAG,CAACE,KAAV,EAAiBC,KAAjB,CAAuB,+DAAvB,CAAd,+3BVJJ;AOMA,AHAA,ACDA,EMFE,AVVA,IUUImB,SXkCSzI,CWlCb,AVVYG,EUUI,GVVhB,EAAmBC,IAAnB,EAAyBC,CAAzB,EAA4BC,CAA5B,EAA+B;AMcjC,AHAA,ACDA,IKDI,ACDA,ATZA,ADC6B,ISYzB8G,CRbCjH,KAAL,CQaA,EAAa,ARbAA,KAAb;AKgBJ,AHAA,ACDA,EMFG,ETZC,EQaE,GRbGC,IQaImH,ARbT,GAAYnH,IAAZ,GQamB,CAACgH,OAAO,CAAC,CAAD,CAAR,CAAjB;AHGN,AHAA,ACDA,IKDK,ARbD,ADAA,KCAKnF,ADAA7B,IAAL,CCAA,EDAYA,CCAC2B,GDAb,CCAA;AKgBJ,AHAA,ACDA,EKDG,ACDD0G,ETZE,ADAA,KCAK1G,ADAA1B,CAAL,EUYQ,CTZR,ADASA,CAAT,CUYW8F,CTZCpE,IAAZ,KSYqB,CAAC,YAAY;AJItC,AHAA,ACDA,IMFI,ATZA,ADAA,IUYI4G,CTZCzG,ADAA5B,CAAL,GUYS,AVZAA,CAAT,EUYYqF,ITZZ,GAAmB,CSYC,CAACiD,ETZrB,cSYY,CAA0B,wBAA1B,CAAZ;AJIJ,AFDA,EKDE,ERbE,ADAA,KSaK,ARbA5G,ADAAzB,GSaP,GTbE,ECAA,CDAc,ECAEyB,ADAhB,QCAA;AKgBJ,AFDA,AKDC,ICFG,ATXA,ADAA,KUWK,ATXAG,ADAA3B,IUWImB,CAAC,AVXV,ECAA,CSWa,AVXA,CUWb,AVXA,CCAe,CSWCA,CAAC,ETXjB,CSWoBgH,ATlBmB,CAQvC,ISUyB,CAAChI,MAA1B,EAAkCgB,CAAC,EAAnC,EAAuC;AJK3C,AFDA,EJdG,ECCC,ADCF,EUSI,IAAIgG,MAAM,CAACJ,UAAP,CAAkBoB,KAAK,CAAChH,CAAD,CAAL,CAASwG,IAA3B,MAAqCR,MAAM,CAACV,YAAP,EAAzC,EAAgE;AJKtE,AFDA,AKDA,QCFQY,CDECN,SCFS,CDElB,ACFmBoB,CDECnB,GAApB,CCFwB,CDEC,ACFA7F,CAAD,CAAN,CAAV;AJKR,AFDA,EKDE,ERbE,ESWG,GDEE,ARbAS,CQaC,GRbN,EQaWoF,CRbC,EQaP,EAAWC,ARbhB,OQaK,CAAmB,gFAAnB,EAAqG,IAArG,IAA6G,GAApH;AHGF,AFDA,AKDC,ICFI,ATXD,KAAKpF,eAAL,GAAuB,KAAvB;AKgBJ,AFDA,AIpBA,IPMI,AONEtB,KPMGuB,KAAL,AONY,GPMC,AONE,EAAnB,QPMI;AKgBJ,AFDA,AKDAoF,ADlBA,EPKG,ESWCe,AFhBAhD,GCkBG,CAACwB,GTfN,EQHW,CEgBC,EFhBE,CEgBC,EFhBjB,CCkBA,CCFI,EDEmBD,WTfPvG,KAAd,ESeF,ATfuB;AMkBvB,AFDA,AKDAiH,ADlBA,EEgBG,CATsB,CFPrBhC,CEgBC,CVbD,CSeG,ACXkB,CDWjB6B,ACXN,EVJM,IQHM,CRGDnH,EQHI,CCkBjB,CTfQ,CQHR,CCkBqBmH,CDhBrB,ERCsB,OSetB,YTfQ,IAAqC9G,KAAK,CAACL,IAAN,KAAe,YAAxD,EAAsE;AMkB1E,AFDA,AMHC,AFdD,QRCM,OAAO,IAAP;AMkBN,AFDA,AIjBA,MRCK,CAHkB,CAInB;AMiBJ,AFDA,AMHAyI,AFbA,MEaM,AVZF,CUYGnB,ITbL,GSaF,GAAiBgB,SAAjB,UTbkB;AKkBlB,AFDA,MHhBI,ADCA,OCDO,KAAKtI,IAAL,KAAc,MAAd,GAAuB,KAAKD,KAAL,CAAWoC,cAAlC,GAAmD,KAAKpC,KAAL,CAAWqC,oBAArE;AKkBJ,AFDA,AIjBAmD,IPCG,EDCC,EQFI,CAACC,cAAT,CAAwB,WAAxB,EAAqCC,gBAArC,CAAsD,OAAtD,EAA+D,UAACpB,CAAD,EAAO;AFmBtE,AFDA,EIjBEgB,IREE,KQFO,GAAGhB,CAAC,CAACqB,MAAF,CAASC,KAArB;AFmBF,AFDA,AIjBC,CAFD;AFqBA,AFDA,AIhBAJ,QAAQ,CAACC,EPDP,YOCF,CAAwB,GPDf,SOCT,EAAsCC,gBAAtC,CAAuD,OAAvD,EAAgE,UAACpB,CAAD,EAAO;AFkBvE,AFDA,EIhBEiB,IPDE,ADAA,ICAI,ADCFjF,EQAM,GPDCsB,ADCF,AQAI0C,CRAHrE,AQAI,CAAC0F,EPDT,CAAUrD,ADCZ,GQAS,CAASsD,CRAH,ECDb,EAAJ,AOCF,EPD2B,ADCvB,IACA,KAAKxF,MAAL,CAAYG,MAAZ,CAAmB;AMiBzB,AFDA,AIhBC,CAFD,GAIA,IPHM,ADCmB,ICDf,ADCkBN,IAAH,CCDVA,IAAL,GDCkBA,ECDJ,EDCC,ICDf,IAAwB,KAAK2B,IAAL,CAAU3B,IAAV,KAAmB,SAA3C,IAAwD,KAAK8B,WAAL,KAAqB,IAAjF,EAAuF;AKmB7F,AFDA,AIdA,QRHyB,ECAjB,KAAKA,ADA0B9B,IAAI,KAAK,ECAxC,GAAmB,CDAF,ICAO2B,IAAxB;AKmBR,AFDA,AIdA,MRJyB,CAAnB,EAAkDpB,CCChD,KAAKP,ADDP,ICCE,ADD0D,CAF9D,ECGgB,ADAd,YCAE;AKmBR,AFDA,IGtCMwD,IPqBA,ECAE,KAAK7B,ADAA,ICAL,CAAUW,ADAZ,OCAE;AKmBR,AFDA,AIdA,EDxBE,ECwBIvC,ERHD,GQGM,CPHH,EOGM,IAAIyD,CPHH,AMrBDC,INqBN,IMrBN,EAAsB,GCwBV,CAAUA,YAAV,CAAd,EAEA;AFcA,AFDA,AIZA,ID3BwB,INsBjB;AKmBP,AFDA,AIZA,MPLK,ADDD,IACEpD,KAAK,CAACL,IAAN,KAAe,YAAf,IACA,KAAKG,MAAL,CAAYG,MAAZ,CAAmB;AMkBzB,AFDA,AIZA,ID7BwB,IPwBC,IAAGN,IAAH,SAAGA,IAAH;AMmBzB,AFDA,MHlBI,EDAqB,KCAd,EDA4BA,GCAnC,CDAuC,KAAK,YAAvB;AMoBzB,AFDA,AIXA,IPPG,AMxBC,EPuBqB,CAAnB,EAAwDO,AOvBrDmD,AC+BAkC,KD/BL,CPuBE,EOvBW,AC+BjB,ERRwE,AOvBpE,CPqBA,AQUgB,ERPd;AMoBN,AFDA,EIXE,ED/BE,IPwBE,COxBGzF,MPwBI,AOxBT,GAAc,EPwBZ,AOxBF;AD4CJ,AFDA,EIXEJ,ED/BE,EPwBC,CQOE,CAAC8F,CD/BClC,GC+BP,GD/BE,AC6BgB,CAIlB,EDjCgB,EAAd,CAHoB,CAKpB;AD0CJ,AFDA,WHnBE,kBAAS;AKqBX,AFDA,EIVE,ED/BE,ENsBA,ADAA,AQSCoB,ED/BKnB,ENsBF,ADCFvD,AQQG,CAAC4E,CD/BI,GNsBDjF,ADCF,AOvBMyD,CPuBLzD,CQQP,EPTG,CDCF,EQQesF,CD/BI,CNsBH,AMtBIzB,CPuBL,IOvBJ,CAAe,CPuB1B,CQQJ,ED/Be,AC+BgB,CRP3B,CCFE,AMtB8BvD,INsBA,ADE3BH,EOxBM,CAA4B,ENsBFwB,CDErC,CAAYrB,ECFoB,CAAUN,GDE1C,AOxBuC8D,CNsBP,ADEb,EOxBuB,GNsBS,SAAjD,IAA8D,KAAKhC,WAAL,KAAqB,IAAvF,EAA6F;AKqBjG,AFDA,IIVI/B,EDhC4C,ENuB1C,ADCmB,CQQhB,CAAC+F,ERRkB9F,CCDjB8B,AMvByCgC,GPwB3B,AOxB8B,CAACvD,GCgCpD,CAAiB,EDhC+B,CNuB9C,CDCsBP,COxBqC,CNuBxC,AMvBuB,EPwBvB,ECDnB,KOSF;AFYJ,AFDA,EIVG,EDjC6C,CAA/B,CAAb,CANoB,CN8BlB,ADAmB,AOtBrB,KNsBOA,EDA4BA,ECAjC,EDAqC,CCAzB,IDA8B,ECA1C,UDAmB;AMqBzB,AFDA,MJpByB,CAAnB,CCCA,CDDwDO,ICCnDoB,EDDL,ECCA,CAAUY,CDDwD,CAFpE,EAGE,MCAA;AKqBN,AFDA,EIVEwD,EDhCE,ENuBC,EDAC,AOvBIhC,ICgCE,CDhCG,ACgCF6B,ERTA,COvBK,IPuBZ,CQSM,EAAWP,SAAX,CAAV;AFYF,AFDA,AIVC,IPTE,EDAE,AOvBC;AD4CN,AFDA,MG1CMrB,CAAC,EAAE,OAFS;AD8ClB,AFDA,AIVA4B,MRVI,AOtBE3B,CAAC,CCgCC,CDhCC,CPuBH5D,EQYN,GRZW,CAACL,IAAN,KAAe,GO1BH,SP0BZ,IACA,KAAKG,MAAL,CAAYG,MAAZ,CAAmB;AMoBzB,AFDA,AIPA,MDnCM4D,CAAC,CPuBkB,COvBhB,ENsBP,CDC0BlE,IAAH,IO3BP,KP2BUA,IAAH,ICDVC,CAAb,EAAgBC,CAAhB,EAAmB;AKsBrB,AFDA,AIPA,MPdqB,AMrBfiE,CAAC,CPsBkB,COtBhB,MPsB8BnE,IAAI,KAAK,EO3B9B,IP2BO;AMsBzB,AFDA,MJrByB,AOrBnBS,CPqBA,AOrBC,EPqBiDF,AOrB/C,MPqBH,IAA4D,AO3BhD,CPyBd,EAGE;AMsBN,AFDA,AIPA,IAAMyF,EPfF,AMpBE5B,CAAC,CPsBD,COtBG,ENoBAnC,EOeM,ERbF,CQaKlC,ED1CA,EP6BZ,CQaiB,CAAC2D,IPfpB,COec,CAAY,CPfH,AOeT,EAAenD,EPf7B,IOeJ;AFSA,AFDA,AIPA,IAAM0F,EPfF,ADEC,AOtBC,KNoBGlE,GOeO,GAAGhC,CPff,GAAe,CAACE,AOeI,CPfL,AOeMyD,EPfFxD,CAAJ,CAAf,COee,CAAYK,MAA/B;AFSA,AFDA,AINA,IAAM2F,EPhBF,AMpBE7B,CAAC,EAAE,ENoBArC,IAAL,AOgBa,CD7CC,EN6BF,AOgBIgE,IPhBhB,KOgByB,GAAGrF,UAAhC;AFQA,AFDA,AINA,IAAMwF,EPfF,ADAA,AOrBE7B,CAAC,EAAE,CNqBC9B,GDAC,GQeO,CRfd,EQeiByD,CPfD,GAAG,KAAKxD,COeG,GAAG9B,SPfX,COevB,CPfI;AKuBJ,AFDA,AINAgC,IRfG,AOhCe,CAAd,CNgCAH,AMzCoB,CAsBpB,ACkCG,CAACI,GAAR,CAAYsD,IPfE,CAACxD,MOef,EPfI,AOeqByD,CPfD,KAAKxE,IAAL,CAAU1B,CAA9B,AOeJ,EPfqC,KAAK0B,IAAL,CAAUzB,CAA3C,EAA8C,KAAK6B,OAAL,CAAa,CAAb,CAA9C,EAA+D,KAAKA,OAAL,CAAa,CAAb,CAA/D,EAAgF,UAACC,IAAD,EAAU;AKuB9F,AFDA,AILA,IDnCI,ACmCAyC,CAAC,GPhBC,AOgBEc,IPhBEvD,IAAI,AOgBE,CAACwD,IPhBE,IAAb,EAAmB,IOgBjB,CAAwB,QAAxB,CAAR;AFOA,AFDA,AILA,IAAI9E,GAAG,GPhBC,AOgBE+D,CAAC,CAAC2B,GPhBA,CAACpE,IAAL,EOgBE,CPhBUA,AOgBG,IPhBf,AOgBE,CAAV;AFOA,AFDA,AILAtB,GAAG,CD5DqB,AC4DpB2F,IPhBG,CAFD,COkBN,CRjBE,AQiBSC,IPhBE,COgBb,GAAmBJ,URjBR7F,CQiBX,IRjBE,EAAgB,WOnBSuD,IAAI,CAACW,OAAL,EAxBH;ADmExB,AFDA,AILA7D,GAAG,CD7DqB,AC6DpB2F,ERjBA,ICCI1D,AOgBR,CRjBSxC,AQiBEoG,MPhBI,ADDX,AQiBJ,CPhBgB3D,ADDApC,EQiBI2F,CPhBZ,CAAY,ADDhB,CAAiB9F,KAAjB,IQiBJ,0BPhBQ;AKuBR,AFDA,IJtBG,ICCI;AKuBP,AFDA,AILA,ID/DwB,KC+DfmG,UAAT,GAAsB;AFOtB,AFDA,EINsB,ID/DE,EN+ClB,KAAI,CAACvE,eAAL,GAAuB,KAAvB,QOiBkBlC,KAAK,CAAC2D,KAAN,CAAYa,OAAZ,EADF;AFQtB,AFDA,EIPsB,IPfjB,CAPD,CMzCoB,GP+CtB,qBAAYlE,KAAZ,EAAmB;AMyBrB,AFDA,MHrBImC,ADFA,EOhDoB,GPgDfrC,COxBOD,CAxBQ,GNkDV,CAAC2C,ADFX,GAAc,KAAK1C,CCEnB,KDFc,CAAYG,MAAZ,CAAmB,UAACG,CAAD;AMyBrC,AFDA,EITsB,EPZnB,IDHkC,AOhDb,IAwBLqD,GPwByBrD,AOhDpB,CPgDqB,KAAKJ,KAAb;AM0BrC,AFDA,IITE,ERhBmC,CAAnB,CAAd,gDQgB2C;AFW/C,AFDA,IJzBG,EQe4C,EDvCzC,IAAMmE,OAAO,GAAG,mBAAIV,GAAJ,EAASlE,GAAT,CAAa,UAAC6E,CAAD,EAAIxE,CAAJ,EAAU;ADmD7C,AFDA,MIX+C,IDtCvC,ACsCKC,CPXX,AOW6C,GDtCjCF,IAAI,GAAG+D,KAAK,CAACU,CAAD,CN2Bf3B,AM3BH,QN2BN,EAAmB;AKwBrB,AFDA,MHtBI,AOU2C,IPVvCA,AM3BA,ACqCQgB,GAA+B,CDrCjCnC,IN2BE,AM3BE,CN2BDoB,EM3BI,IAAIjD,ON2BjB,CAAuB,IAAvB,CAAJ,AM3BiB,CAAS,CN2BQ,IM3BjB,EAAeE,IAAf,EAAqBC,CAArB,EAAwBC,CAAxB,CAAb;ADmDR,AFDA,QHtBM,GDJJ,ECISH,KAAL,CAAWiD,SAAX,CAAqB,CDJf,GCIN,EAA2BF,QAA3B;AKwBN,AFDA,MJ1BI,AQY2C,EPRzC,EM3BE,GN2BGd,ADJA,COvBChC,GN2BN,CAAUiD,ADJAjD,AOvBA,IPuBL,CCIL,AM3Be,IPuBI,GOvBjB,EAAsB,IPuBnB,IAA2B,KAAKI,KAAL,AQaX0D,GRbwBjE,AQarB,CAAC0E,OAAJ,EADoB,MRZ3C;AM4BJ,AFDA,IJ1BG,ECIE,AOO0C,MDlCrC,KAAI,CAACZ,MAAL,CAAYnD,IAAZ,CAAiBmB,IAAjB;ADmDV,AFDA,IHtBG,MM3BM;ADmDT,AFDA,MIjB+C;AFmB/C,AFDA,QIjBI,EDhCI,CPsBN,MOtBaA,IAAP,SPsBI,iCQU8B;AFmB1C,AFDA,MJ3BI,EOtBG,CATe,CAAhB,ACwCoC,CPLxC,ADJOvB,KAAL,UCII;AKyBR,AFDA,IJ3BG,ECIC,IOIsC,IPJ9B,AOIGH,CAA2B,IPJzB2B,QAAb;AKyBJ,AFDA,QHvBM,AM3BA,EC8BoC,GPH/B,AM3BD,CAAC8B,AC8BO/B,IAAwB,CD9BpC,CAAWnB,IAAX,CAAgBgE,GN2BhB,IM3BA;ADoDN,AFDA,MGtFwB,IN+DhB,QAAQ,KAAKtC,KAAb;AKyBR,AFDA,UIrBMP,CRPJ,CCKQ,EOEA,CAAC8E,EPFI,EOET,CAAU/F,GAAV,EAAeT,CAAf,CPFI,COEcC,CAAlB,EAAqBS,ERPZ,QQOT;AFuBN,AFDA,MJ5BI,AOpCA,EC2CC,GRPIP,GCKG,EDLR,GCKa8C,YAAL,CAAkB,EAAlB,EAAsB,CAAtB,qBMzC+B;ADkE3C,AFDA,IJ5BG,EQG4C,EDxCJ,MN0C/B,KAAKhB,KAAL,GAAa,4BAAb;AKyBZ,AFDA,MGtDK,EC4B0C,MPGnC;AKyBZ,AFDA,IG3FwB,ECgEuB;AF6B/C,AFDA,MG5FwB,ECgEuB,GRD7C,CCKQ,KAAK,QDLRxB,GAAL,EAAUT,CAAV,EAAaC,CAAb,EAAgBS,SCKR,CDLR,EAA4B;AM+B9B,AFDA,IG7FwB,EP+DM,AQCiB,QPKnC,IAAI,KAAKsB,eAAL,IAAwB,KAAxB,IAAiC,KAAKD,IAAL,KAAc,IAA/C,IAAuD,KAAKA,IAAL,CAAUzB,MAAV,GAAmB,CAA9E,EAAiF;AK0B7F,AFDA,II1BG,EDpEqB,UNsEV,IAAMuC,QAAQ,GAAG,KAAK/C,KAAL,CAAWoD,oBAAX,CAAgC,KAAKnB,IAAL,CAAU,CAAV,EAAa/B,CAA7C,EAAgD,KAAK+B,IAAL,CAAU,CAAV,EAAa9B,CAA7D,CAAjB;AK0Bd,AFDA,EIhCsB,ED/DE,EPgEpB,IAAMU,MCOI,EDPI,GCOCwC,ADPEnD,CAAC,GAAGU,ICOX,CAAcmC,KDPxB,GCOU;AK0Bd,AFDA,IIjCsB,ERElB,IAAMjC,ICOG,CAHD,GDJM,GCOC,ADPEX,CAAC,GAAGS,UAArB;AMiCJ,AFDA,EIlCsB,EDzBlB,EP6BA,GO7BKwB,CP6BDrB,KAAK,CCMC,EDNE,GCMGoB,EMnCf,GNmCU,AMnCY,CP6BtB,ECMuB,CMnCGwC,QNmChB,WMnCgB,CAASC,EAAb,EAAtB;AD6DJ,AFDA,IG3DI,ACwBkB,ERMlB7D,GO9BKsB,EP8BA,GCKI,ADLD,KAAKrB,UO9Bb,EP8BQ,CAAkBD,AO9BE,IAAI4D,CP8BxB,CAAR,iBO9BgC,CAASC,EAAb,EAA5B;AD6DJ,AFDA,EIpCsB,EDtBlB,EP8BAjE,GAAG,AO9BEyB,CP8BDnB,SAAJ,GAAgBF,CO9BhB,CAAoB8D,GP8BpB,IO9BA,CAA4B,KAAKlB,KAAL,CAAW9D,GAAX,CAAe,UAAAkE,GAAG;AD4DlD,AFDA,MJ5BIpD,AO/B8C,GP+B3C,CAACO,GO/B8C6C,CNkC1C,EMlC6C,CAAClE,CP+BtD,CAAagB,CO/BqC,CAAQ,MP+B1D,EAAuBC,EO/BmCc,IAAI,EP+B9D,EAAiChB,UAAjC,EAA6CA,UAA7C,EAT0B,CAW1B;AM4BJ,AFDA,EIhCE+F,MD5BgE,OAAI,CAChE,OADgE,AC4B/C,CAACF,CD1BlB,SC0BiB,CAArB,CD5BoE,EAGhE,UAHgE,EAIhE,SAJgE,EAKhE3B,QALgE,CAKvDlD,IAAI,CAAC3B,IALkD,IAK1C,CAL0C,GAKtC,CALkC;AD8DlE,AFDA,AIhCC,MRKG,AOlC8D,CAAZ,CAAJ,EPkC1C,ECCE,GDDGA,ECCE,EDDP,KAAc,ECCZ,ODDN,EAA6B;AM6BjC,AFDA,IG9DkD,CAAlB,CAA5B,EPmCEU,GAAG,CAACM,ECCE,IAAG,GDDT,ECCcqC,CDDE,GCCP,EAAH,EAAgB,EDDtB;AM6BN,AFDA,AIhCAqD,IDzBI,IP8BEhG,CO9BGyB,EP8BA,CAAClB,ICCI,IDDR,CCCaiB,ADDAtB,AQLE,CAAC4F,CDzBlB,CAAoB1B,EN+BV,GAAa,ADDA,GAAG,AQLT,CRKf,AQLN,ERKiCjE,OO9B7B,CP8BqC,AO9BE,CAAC,CAAD,CN+B7B,ADD8BF,AO9BxC,UP8B6B,GAAwB,CAAnD,EAAsDA,UAAU,GAAG,CAAnE,EAAsE,CAAtE;AM6BN,AFDA,IGxDI,IP6BED,CO7BG0B,EP6BA,CAACpB,ECCG,CAFD,MAEO,ADDb,GAAgB,KO7BlB,CAA0B4D,GP6BxB,IO7BF,CAAkC,KAAKlB,KAAL,CAAW9D,GAAX,CAAe,UAAAkE,GAAG;AD0DxD,AFDA,MGzDwD,EP8BlDpD,GAAG,CAACO,CO9BkD6C,GN+B9CnB,AM/BiD,CAAC/C,GP8B1D,AO9BsD,CP+BpDgB,AO/B4D,EN+B/C,CAACgC,GAAR,CAAY,CDAV,EO/BoDjB,CP+BjD,CADb,EAEEd,AOhCgE,QPgCxD,CCDF,EDCKF,UAAX,GAAwB,CAF1B,EAGE,CAACA,UAAU,GAAG,CAAd,KAAoB,KAAKP,KAAL,GAAaP,gBAAjC,CAHF,EAIE,CAJF;AM6BN,AFDA,MJtBK,EOpCmE,MNgC3D,CMhC+D,CACtE,iBADsE,EAEtE,UAFsE,EAGtE,SAHsE,EAItE,mBAJsE,EAKtEgF,QALsE,CAK7DlD,IAAI,CAAC3B,IALwD,IAKhD,CALgD,GAK5C,CALwC;AD4DxE,AFDA,MG3DwE,CAAZ,CAAJ;AD6DxD,AFDA,IG5DwD,CAAlB,CPsClC,AOtCA,IPsCI,ICNK,CDMAA,IAAL,KAAc,mBAAlB,EAAuC;AMwB3C,AFDA,IGvDI,IPiCEU,COjCG0B,EPiCA,CAACpB,ECNE,ODMN,GAAgB,KOjClB,CAA0B8D,GPiCxB,eOjCF,CAA6C,CAAC,CAAD,CAA7C;ADyDJ,AFDA,EGvDG,MPiCGpE,GAAG,CAACQ,IAAJ,GAAW,gBAAX;AMwBN,AFDA,QJtBMR,GAAG,CCPC,ADOAS,KCPK,GDOT,CACE,KAAK,KAAKhB,GCRR,GDQG,CAAYG,MAAZ,CAAmB;AMuBhC,AFDA,UJtBgC,ICPpB,ADOuBN,IAAH,CCPfkD,QDOkBlD,ICPvB,ADOoB,CCPF,EAAlB,EAAsB,EAAtB;AK+BZ,AFDA,UJvBgC,ICNpB,GDMkCA,ECN7BkC,EDMiC,GCNtC,EDM2C,CCN9B,WDMO,KCNpB;AK+BZ,AFDA,QJxBgC,CAAnB,EAAwD3B,AOjCnE,GN4BU,GDIN,EAEEK,QAAQ,GAAG,CAFb,EAGEC,QAAQ,AOnCOZ,CAArB,EPmCiB,AOnCOC,CAAxB,CPgCI,COhCuB;AD2D7B,AFDA,MJrBK,AOpCD,CP4BA,MAQO,AOpCA,KAAKwD,KAAL,CAAWxD,CAAX,EAAcD,CAAd,CAAP;AD2DJ,AFDA,IGzDG,EAED,EPkCI,ICTI,ADSEmB,KCTG,KDSO,GAAG,KAAKjB,GCTpB,GDSe,CAAYG,MAAZ,CAAmB;AMuB5C,AFDA,IGvDE,MPiC0C,ICRhC,ADQmCN,ICR/B,ADQ4B,KCRvBiC,IDQ0BjC,IAAH,OCR5B,IAAwB,KAAxB,IAAiC,KAAKgC,IAAL,KAAc,IAA/C,IAAuD,KAAKA,IAAL,CAAUzB,MAAV,GAAmB,CAA9E,EAAiF;AKgC7F,AFDA,IGvDE,MPgC0C,MCP9B,CDO4CP,GCPtC8C,CDO0C,KAAK,GCPvC,GAAG,ADOa,KCPR/C,KAAL,CAAWoD,oBAAX,CAAgC,KAAKnB,IAAL,CAAU,CAAV,EAAa/B,CAA7C,EAAgD,KAAK+B,IAAL,CAAU,CAAV,EAAa9B,CAA7D,CAAjB;AKgCd,AFDA,IGvDE,IP+B0C,CAAnB,CAAnB;AM0BN,AFDA,IGtDE,IP8BI,IAAMmB,ICPE,KAAK+B,ODOS,CCPd,CAAcN,CDOG,KAAK3C,GCPtB,GDOiB,CAAYG,MAAZ,CACvB;AMyBR,AFDA,IGtDE,MP8BM,ICPK,ADOFN,CCVC,GDUJ,GCPW,MDORA,IAAH;AM0BR,AFDA,IGtDE,MP6BM,MCNM,CDMQA,ICNHkC,ADMO,KCNZ,ADMiB,GCNJ,SAAb,ADMN;AM2BR,AFDA,IGtDE,IP4BM,CADuB,CAAzB,ICJO;AKiCb,AFDA,IGtDE;ADwDF,AFDA,IGtDE,IP4BI,IAAId,ECNE,QDMQ,CAACb,MAAX,GAAoB,CAAxB,EAA2B;AM4BjC,AFDA,IGtDE,MP4BMa,UAAU,CAACE,OAAX,CAAmB,UAACjB,KAAD,EAAQkB,CAAR,EAAc;AM4BzC,AFDA,IGtDE,QNqBQ,ADOA,KCPK,ADOD,CAACC,QCPL,ADOA,CAAcd,GAAd,EAAmBT,CAAC,GAAGU,UAAJ,GAAiBY,CAAC,GAAG,EAAxC,EAA4CrB,CAAC,GAAGS,UAAhD;AM4BV,AFDA,IGtDE,MP4BO,CAFD,GCLI;AKmCZ,AFDA,IGtDE,UNqBU,KAAKuB,KAAL,GAAa,cAAb;AKmCZ,AFDA,IGtDE,MP2BM,ICNI,ADMAb,gBAAgB,CAACd,MAAjB,GAA0B,CAA9B,EAAiC;AM6BzC,AFDA,IGtDE,QP2BQc,gBAAgB,CAACC,OAAjB,CAAyB,UAACjB,KAAD,EAAQkB,CAAR,EAAc;AM6BjD,AFDA,IGtDE,QNoBQ,EDOE,GCPG,EDOC,CAACE,WCPP,GDOE,CACEf,GADF,EAEET,CAAC,GAAGU,UAAJ,GAAiB,EAFnB,EAGET,CAAC,GAAGS,UAAJ,GAAiBY,CAAC,GAAG,EAHvB;AM6BZ,AFDA,IGtDE,QP+BS,CAND,CCLE,KAAK2B,YAAL,CAAkB,KAAKpB,WAAL,CAAiB7B,CAAnC,EAAsC,KAAK6B,WAAL,CAAiB5B,CAAvD;AKoCZ,AFDA,IGtDE,MP+BO,ICXG,KAAKgC,KAAL,GAAa,2BAAb;AKoCZ,AFDA,IGrDE,IP8BK,CAbD,KCEM,CDWC,IAAIb,gBAAgB,CAACd,MAAjB,GAA0B,CAA9B,EAAiC;AMyB9C,AFDA,UJvBQc,gBAAgB,CAACC,OAAjB,CAAyB,UAACjB,KAAD,EAAQkB,CAAR,EAAc;AMyB/C,AFDA,YHnCU,ADYA,IAAIA,CCZC,ADYA,GAAG,CAAR,EAAW,qBCZX;AKqCV,AFDA,cHnCY,ADYA,ICZI,CDYA,CAACE,GCZIQ,WDYT,CAAoBvB,GCZhB,ADYJ,EAAyBT,CAAC,CCZE,EDYCU,GCZzB,IAAiC,GDYZ,ECZiBqB,CDYAT,CAAC,ECZN,CDYS,EAA9C,ECZmD,ADYDrB,CAAC,GCZ/C,ADYkDS,ICZK,KAAKqB,CDYhE,GCZ2D,CAAUzB,MAAV,GAAmB,CAA9E,EAAiF;AKqC7F,AFDA,WGxDE,CPiCS,CAFD,GCVI,GDYG,CCZGuC,UAAQ,CMrBflB,ENqBkB,KAAK7B,CMrBlC,EAAqB,ENqBQ,CAAWoD,oBAAX,CAAgC,KAAKnB,IAAL,CAAU,CAAV,EAAa/B,CAA7C,EAAgD,KAAK+B,IAAL,CAAU,CAAV,EAAa9B,CAA7D,CAAjB;AKqCd,AFDA,MGxDI,QPiCQ,KAAI,CAACuB,cAAL,CAAoBf,GAApB,EAAyBT,CAAC,GAAGU,UAAJ,GAAiB,CAA1C,EAA6CT,CAAC,GAAGS,UAAJ,GAAiB,EAA9D;AMyBZ,AFDA,MGxDI,IAAMkB,EPiCC,GOjCI,CNoBD,EMpBI,GNoBCuB,EMpBIO,MNoBT,AMpBI,CNoBUb,AMpBEiC,IAAI,CAACC,KNoBrB,AMpBgB,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAAKtB,MAAL,CAAYpD,MAAvC,CAAZ,CAAd,CAFmB,CAInB;ADwDJ,AFDA,UJvBS,CAND,GCPK,CAHD,MAGO;AKsCnB,AFDA,MGvDI,EPgCG,EOhCGF,KAAK,CNmBD,EMnBI,GNmBC6B,CMnBGR,INmBR,GAAa,OMnBT,CAAU,GNmBd,CMnBI,EAAgB,MAAhB,EAAwBG,KAAxB,EAA+BD,QAA/B,CAAd;ADyDJ,AFDA,MJvBK,AOhCD,CP3B0B,CA6D1B,GOlCKzB,GNmBI,GMnBT,CAAYK,IAAZ,CAAiBH,KAAjB;ADyDJ,AFDA,MJrBI,AOlCAwB,KAAK,CAACqD,QAAN,CAAe7E,KAAf;ADyDJ,AFDA,IGvDG,EPkCC,AOhCF,QNgBU;AKuCZ,AFDA,MJrBI;AMuBJ,AFDA,MJrBI,MCjBM,KAAK,WAAL;AKwCV,AFDA,MJrBI,QCjBQ,KAAKiD,MAAL;AKwCZ,AFDA,MJrBI,KOnCF,GNkBU,KAAKpB,KAAL,GAAa,KMlBX7B,INkBF,CMlBV,EAAmB;AD0DrB,AFDA,MJrBI,AOnCA,KAAKF,GNkBG,GMlBR,GAAc,KAAKA,MAAL,CAAYG,MAAZ,CAAmB,UAACG,CAAD;AD0DrC,AFDA,MJrBI,EOpCiC,OAAOA,CAAC,KAAKJ,KAAb;AD2DrC,AFDA,MJrBI,AOrCiC,CAAnB,CAAd,INmBM,KAAK,SAAL;AKyCV,AFDA,MJrBI,AOrCAA,KAAK,CAACsB,ENmBE,EMnBR,CAAW4B,ENmBEL,SMnBb,CAAuB7C,ENmBf,CAAkB,EMnB1B,GNmB+BwB,KAAL,CAAW5B,CAA7B,EAAgC,KAAK4B,KAAL,CAAW3B,CAA3C;AKyCZ,AFDA,IG1DG,EAED,QNiBU,KAAKgC,KAAL,GAAa,gBAAb;AKyCZ,AFDA,IJtBG,EAED,QCnBU;AKyCZ,AFDA;AEEA,AFDA,YHxCU,KAAK,gBAAL;AK0CV,AFDA,WG3DE,GNmBU,IAAI,KAAKD,OMnBT5B,KAAV,EAAiBsB,CNmBH,GMnBd,CNmBsC,CMnBf,INmBT,IAAiC,KAAKK,IAAL,KAAc,IAA/C,IAAuD,KAAKA,IAAL,CAAUzB,MAAV,GAAmB,CAA9E,EAAiF;AK0C7F,AFDA,MG3DI,IAAIoB,CPqCN,GOrCU,CAACoB,CNmBC,IAAMD,QMnBZ,CAAmBzC,CNmBC,GAAG,ADkBhBS,COrCP,CAAJ,EAA+B,CNmBCf,ADkBlC,EAAoB,GClBS,CAAWoD,oBAAX,CAAgC,KAAKnB,IAAL,CAAU,CAAV,EAAa/B,CAA7C,EAAgD,KAAK+B,IAAL,CAAU,CAAV,EAAa9B,CAA7D,CAAjB;AK0Cd,AFDA,MJtBI,EOrCEG,KAAK,CPqCC,AOrCAsB,IAAN,CPqCW3B,AOrCAuD,IPqCb,OOrCE,CAAuBlD,KAAvB;AD6DN,AFDA,QJtBM,AOrCAsB,IAAI,CPqCC,AOrCAuD,GNkBG,IDmBR,CCnBa9B,AMlBb,CAAc/C,KAAd,ENkBQ,CAAcyC,UAAd;AK2Cd,AFDA,QG3DMzC,EPqCES,GOrCG,CNkBE,AMlBDa,CNeA,ADsBC,GAAG,AOrCV,GNkBa,AMlBAA,IAAb,EPqCE;AMwBR,AFDA,MG3DK,IPqCG,MCnBM,KAAKO,KAAL,GAAa,QAAb;AK2Cd,AFDA,IG3DG,UNkBU;AK2Cb,AFDA,QJvBM,KAAK,WAAL;AMyBN,AFDA,UJvBQpB,ICnBI,CDmBC,GAAG,SAAR;AMyBR,AFDA,UJvBQ,COrCN,gBAAO;AD8DT,AFDA,MG5DI,KAAKX,CNiBC,KAAK,AMjBX,CAAYgF,IAAZ,CAAiB,ENiBX,UMjBuB;AD8DjC,AFDA,QJxBM,AOpCA,KPoCK,CCnBC,CMjBC,INiBIpF,EMjBEgF,GNiBP,CAAWxB,AMjBA,CAAC0B,IPoClB,EOpCa,EAAb,ENiBM,CAAuB,IAAvB;AK6CZ,AFDA,MG5DK,CAFD,GPsCInE,ICnBI,CDmBC,GAAG,SAAR;AM0BR,AFDA,UJxBQ;AM0BR,AFDA,MGjES,MNqBC,sCMjBc,KAAKX,MAJpB;ADmET,AFDA,MGlES,EPyCH,KAAK,CCnBCwC,OAAO,CAACC,CDmBd,ECnBM,CAAY,iBAAZ,EAA+B,KAAKV,KAApC;AK8CZ,AFDA,UJzBQpB,ICnBI,CDmBC,GAAG,SAAR;AM2BR,AFDA,MGpES,IN9CD,ADyFA;AM2BR,AFDA,QGjEI,uDAAiC;ADmErC,AFDA,QJ1BM,ECnBE,AMrB6B,GPwC1B,COxCIT,KAAsB,GPwC/B;AM4BN,AFDA,UJ1BQS,AOxCF,IAAMa,CPwCC,GAAG,AOxCA,GAAGtB,KAAK,CPwChB,AOxCiBsB,IAAnB;ADoEN,AFDA,QH9CM,EDoBE,AOxCFtB,KAAK,CAAC+E,GAAN;ADoEN,AFDA,QGlEK,ENoBGzC,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkC,KAAKhB,QAAvC;AKgDR,AFDA,MH1HI,AMgDK,EP+CH,KAAK,OAAL;AM6BN,AFDA,IH9CG,IM7BM,EPgDDd,KAAK,GAAG,SAAR;AM6BR,AFDA,MG5ES,IPiDD;AM6BR,AFDA,QG7ES;AD+ET,AFDA,MG9ES,EPkDH,KAAK,UAAL;AM8BN,AFDA,IGvEG,MP2CKA,KAAK,GAAG,SAAR;AM8BR,AFDA,UJ5BQ;AM8BR,AFDA,eHjDeY;AKmDf,AFDA,QJ7BM,KAAK,mBAAL;AM+BN,AFDA,UJ7BQZ,KAAK,GAAG,SAAR;AM+BR,AFDA,UJ7BQ;AM+BR,AFDA,MJtDI,SOpBW0C;AD4Ef,AFDA;AEEA,AFDA,MJ9BI,OAAO1C,KAAP;AMgCJ,AFDA,IJ9BG;AMgCH,AFDA;AEEA,AFDA;AEEA,AFDA,WJ/BE,kBAASJ,GAAT,EAAcT,CAAd,EAAiBC,CAAjB,EAAoB;AMiCtB,AFDA,MJ/BIQ,GAAG,CAACM,SAAJ,GAAgB,SAAhB;AMiCJ,AFDA,MJ/BIN,GAAG,CAACO,QAAJ,CAAahB,CAAC,GAAG,CAAjB,EAAoBC,CAAC,GAAG,CAAxB,EAA2B,CAA3B,EAA8B,EAA9B;AMiCJ,AFDA,IJ/BG;AMiCH,AFDA;AEEA,AFDA;AEEA,AFDA,WJhCE,wBAAeQ,GAAf,EAAoBT,CAApB,EAAuBC,CAAvB,EAA0B;AMkC5B,AFDA,MJhCIQ,GAAG,CAACM,SAAJ,GAAgB,SAAhB;AMkCJ,AFDA,MJhCIN,GAAG,CAACO,QAAJ,CAAahB,CAAC,GAAG,CAAjB,EAAoBC,CAAC,GAAG,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B;AMkCJ,AFDA,IJhCG;AMkCH,AFDA;AEEA,AFDA;AEEA,AFDA;AEEA,AFDA;AEEA,AFDA;AEEA,AFDA,eJnCeJ;AMqCffile":"src.a2b27638.js","sourceRoot":"..","sourcesContent":["// const map = `\n// eeeeeeeeeee\n// eeeebbbbbbs\n// ebbbbepepee\n// ebeeeepepee\n// ebaauwwwwee\n// ebeeeeeeeee\n// eseeeeeeeee\n// `;\n\nconst map = `\neeeeeeeeeeeeeeeeeeeeeeeeeee\naaaaaaaaaaaaaaaaaaaaaaaaaaS\nebweeeeeeeeeeaeeeeeeeeeeeee\nebweeeeeeeeeeappppppppppeee\nebweeeeeeeeeeappppppppppeee\nebweeeeeeeeeeappppppppppeee\nebweeeeeeeeeeaeeeeeeeeeeeee\nebweeooooooooaeeeeeeeeeeeee\nebweeooooooooaeeeeeeeeeeeee\nebweeooooooooabbbbbbbbbbbbb\nebweeooooooooaeeeeeeeeeeeee\nebweeooooooooaeeeeeeeeeeeee\nebweeooooooooaeeeeeeeeeeeee\nebweeooooooooaeeeeeeeeeeeee\nebweeooooooooaeeeeeeeeeeeee\nebwwwooooooooaeeeeeeeeeeeee\nebappoooppppoaeeeeeeeeeeeee\nebappoooppppoaeeeeeeeeeeeee\nebappooooooaaaeeeppppeeeeee\nebwwwooooooooaeeeppppeeeeee\nebwwwoooooooXaaaaaaaaaaaaaS\nebwwwooooooooaeeeppppeeeeee\nebwwwooooooooaeeeeeeeeeeeee\nebaaaaaaaaaaaaeeeeeeeeeeeee\nebaaaaaaaaaaaaaeeeeeeeeeeee\nebweeeeeeeeeeaaaeeeeeeeeeee\nebweeeeeeeeeeeeeeeeeeeeeeee\nebweeeeeeeeeeeeeeeeeeeeeeee\nebweeeeeeeeeeeeeeeeeeeeeeee\nebweeeeeeeeeeeeeeeeeeeeeeee\nebweeeeeeeeeeeeeeeeeeeeeeee\nebweeeeeeeeeeeeeeeeeeeeeeee\nebweeeeeeeeeeeeeeeeeeeeeeee\neSweeeeeeeeeeeeeeeeeeeeeeee\n`;\n\nexport default map;\n","const MAX_PARKED_BIKES = 8;\n\nclass Cell {\n  constructor(world, type, x, y) {\n    this.type = type;\n    this.x = x;\n    this.y = y;\n    this.agents = [];\n    this.bikes = 0;\n  }\n\n  // Check if agent can be added to this cell\n  checkAddAgent(agent) {\n    if (this.type === \"BUILDING_ENTRANCE\" && agent.type === \"PEDESTRIAN\") {\n      return true;\n    }\n    // Allow a maximum of:\n    // 2 agents of type BIKE\n    // or 3 agents of type PEDESTRIAN\n    // or 1 agent of type BIKE and 2 agents of type PEDESTRIAN\n    // or 2 agent of type BIKE and 1 agents of type PEDESTRIAN\n    if (\n      agent.type === \"BIKE\" &&\n      this.agents.filter(({ type }) => type === \"BIKE\").length >= 2\n    ) {\n      return false;\n    }\n    if (\n      agent.type === \"PEDESTRIAN\" &&\n      this.agents.filter(({ type }) => type === \"PEDESTRIAN\").length >= 3\n    ) {\n      return false;\n    }\n    if (\n      agent.type === \"BIKE\" &&\n      this.agents.filter(({ type }) => type === \"PEDESTRIAN\").length >= 2\n    ) {\n      return false;\n    }\n    if (\n      agent.type === \"PEDESTRIAN\" &&\n      this.agents.filter(({ type }) => type === \"BIKE\").length >= 3\n    ) {\n      return false;\n    }\n    return true;\n  }\n\n  addAgent(agent) {\n    this.agents.push(agent);\n  }\n\n  removeAgent(agent) {\n    this.agents = this.agents.filter((a) => a !== agent);\n  }\n\n  canPark() {\n    return this.type === \"PARKING\" && this.bikes < MAX_PARKED_BIKES;\n  }\n\n  addBike() {\n    this.bikes++;\n  }\n\n  removeBike() {\n    this.bikes--;\n  }\n\n  draw(ctx, x, y, squareSize) {\n    const canvas_x = x * squareSize;\n    const canvas_y = y * squareSize;\n\n    let color = \"#fefefe\";\n\n    color = this.getCellColor(color);\n\n    ctx.fillStyle = color;\n    ctx.fillRect(canvas_x, canvas_y, squareSize, squareSize);\n\n    // Draw progress bar for amount of parked bikes\n    if (this.type === \"PARKING\") {\n      ctx.fillStyle = \"#ffffff\";\n      ctx.fillRect(canvas_x + 2, canvas_y + squareSize - 8, squareSize - 4, 4);\n      ctx.fillStyle = \"#316cf4\";\n      ctx.fillRect(\n        canvas_x + 2,\n        canvas_y + squareSize - 8,\n        (squareSize + 4) * (this.bikes / MAX_PARKED_BIKES),\n        4\n      );\n    }\n\n    if (this.type === \"BUILDING_ENTRANCE\") {\n      ctx.fillStyle = \"#000000\";\n      ctx.font = \"12px monospace\";\n      ctx.fillText(\n        \"\" + this.agents.filter(({ type }) => type === \"PEDESTRIAN\").length,\n        canvas_x + 2,\n        canvas_y + 24\n      );\n    } else {\n      const bikeAgents = this.agents.filter(({ type }) => type === \"BIKE\");\n      const pedestrianAgents = this.agents.filter(\n        ({ type }) => type === \"PEDESTRIAN\"\n      );\n      if (bikeAgents.length > 0) {\n        bikeAgents.forEach((agent, i) => {\n          this.drawBike(ctx, x * squareSize + i * 10, y * squareSize);\n        });\n        if (pedestrianAgents.length > 0) {\n          pedestrianAgents.forEach((agent, i) => {\n            this.drawPedestrian(\n              ctx,\n              x * squareSize + 10,\n              y * squareSize + i * 10\n            );\n          });\n        }\n      } else if (pedestrianAgents.length > 0) {\n        pedestrianAgents.forEach((agent, i) => {\n          if (i < 2) {\n            this.drawPedestrian(ctx, x * squareSize + i * 10, y * squareSize);\n          } else {\n            this.drawPedestrian(ctx, x * squareSize + 5, y * squareSize + 10);\n          }\n        });\n      }\n    }\n\n    // !! Debug to show number of agents in cell\n    // if([\"SPAWN\", \"BIKE_PATH\", \"PEDESTRIAN_PATH\", \"ALL_PATH\", \"PARKING\", \"BUILDING_ENTRANCE\"].includes(this.type)) {\n    //   ctx.font = '12px monospace';\n    //   ctx.fillStyle = \"black\";\n    //   // make text slightly transparent\n    //   ctx.globalAlpha = 0.3;\n    //   ctx.fillText(\"B:\" + this.agents.filter(({type}) => type === \"BIKE\").length, canvas_x + 2, canvas_y + 12);\n    //   ctx.fillText(\"P:\" + this.agents.filter(({type}) => type === \"PEDESTRIAN\").length, canvas_x + 2, canvas_y + 24);\n    //   // reset transparency\n    //   ctx.globalAlpha = 1;\n    // }\n  }\n\n  // Drawing utilities, nothing important after this point :)\n\n  getCellColor(color) {\n    switch (this.type) {\n      case \"SPAWN\":\n        color = \"#e7b1b6\";\n        break;\n      case \"BIKE_PATH\":\n        color = \"#f3d8da\";\n        break;\n      case \"PEDESTRIAN_PATH\":\n        color = \"#eaecef\";\n        break;\n      case \"ALL_PATH\":\n        color = \"#cfd4d9\";\n        break;\n      case \"PARKING\":\n        color = \"#aeb5bc\";\n        break;\n      case \"EMPTY\":\n        color = \"#d5e6de\";\n        break;\n      case \"BUILDING\":\n        color = \"#a6c4f9\";\n        break;\n      case \"BUILDING_ENTRANCE\":\n        color = \"#7ba6f7\";\n        break;\n    }\n    return color;\n  }\n\n  drawBike(ctx, x, y) {\n    ctx.fillStyle = \"#222529\";\n    ctx.fillRect(x + 6, y + 2, 5, 20);\n  }\n\n  drawPedestrian(ctx, x, y) {\n    ctx.fillStyle = \"#fd7e14\";\n    ctx.fillRect(x + 6, y + 2, 5, 5);\n  }\n}\n\nexport default Cell;\n","class Agent {\n  constructor(world, type, cell, strategy) {\n    this.world = world;\n    this.type = type;\n    this.spawn = cell;\n    this.cell = cell;\n    this.parked_cell = null;\n    this.strategy = strategy;\n    this.move_to = null;\n    // This is for storing the calculated path\n    // and not recalculating it every tick\n    this.path = null;\n    this.calculatingPath = false;\n    this.stage = \"ENTERING\";\n  }\n\n  getPathfinder() {\n    return this.type === \"BIKE\" ? this.world.bikePathfinder : this.world.pedestrianPathfinder;\n  }\n\n  park() {\n    if (this.cell.canPark()) {\n      if (this.type === \"BIKE\" && this.cell.type === \"PARKING\" && this.parked_cell === null) {\n        this.parked_cell = this.cell;\n        this.type = \"PEDESTRIAN\";\n        this.cell.addBike();\n        return true;\n      }\n    }\n    return false;\n  }\n\n  unpark() {\n    if (this.type === \"PEDESTRIAN\" && this.cell.type === \"PARKING\" && this.parked_cell !== null) {\n      this.parked_cell = null;\n      this.type = \"BIKE\";\n      this.cell.removeBike();\n    }\n  }\n\n  changeMoveTo(x, y) {\n    this.calculatingPath = true;\n    this.move_to = [x, y];\n    this.path = null;\n\n    const pathfinder = this.getPathfinder();\n    pathfinder.findPath(this.cell.x, this.cell.y, this.move_to[0], this.move_to[1], (path) => {\n      if (path !== null) {\n        this.path = path;\n      } else {\n        console.log(\"Agent has no way to reach its goal\");\n      }\n      this.calculatingPath = false;\n    });\n\n    pathfinder.calculate();\n  }\n\n  makeMove(nextCell) {\n    if (nextCell.checkAddAgent(this)) {\n      this.world.moveAgent(this, nextCell);\n      this.path.shift();\n    }\n  }\n\n  act() {\n    switch (this.strategy) {\n      case \"TEST_STRATEGY\":\n        switch (this.stage) {\n          case \"ENTERING\":\n            this.changeMoveTo(23, 5);\n            this.stage = \"MOVING_TO_PARKING_ENTERING\";\n            break;\n          case \"MOVING_TO_PARKING_ENTERING\":\n            if (this.calculatingPath == false && this.path !== null && this.path.length > 0) {\n              const nextCell = this.world.getCellAtCoordinates(this.path[0].x, this.path[0].y);\n              this.makeMove(nextCell);\n            } else {\n              this.stage = \"PARKING\";\n            }\n            break;\n          case \"PARKING\":\n            if(this.park()) {\n              this.stage = \"LEAVING_PARKING\";\n            } else {\n              console.log(\"Could not park\");\n            };\n            break;\n          case \"LEAVING_PARKING\":\n            this.changeMoveTo(12, 20);\n            this.stage = \"MOVING_TO_GOAL\";\n            break;\n          case \"MOVING_TO_GOAL\":\n            if (this.calculatingPath == false && this.path !== null && this.path.length > 0) {\n              const nextCell = this.world.getCellAtCoordinates(this.path[0].x, this.path[0].y);\n              this.makeMove(nextCell);\n            } else {\n              this.stage = \"IN_GOAL\";\n            }\n            break;\n          case \"IN_GOAL\":\n            // Todo: Wait for a bit\n            this.stage = \"LEAVING_GOAL\";\n            break;\n          case \"LEAVING_GOAL\":\n            this.changeMoveTo(this.parked_cell.x, this.parked_cell.y);\n            this.stage = \"MOVING_TO_PARKING_LEAVING\";\n            break;\n          case \"MOVING_TO_PARKING_LEAVING\":\n            if (this.calculatingPath == false && this.path !== null && this.path.length > 0) {\n              const nextCell = this.world.getCellAtCoordinates(this.path[0].x, this.path[0].y);\n              this.makeMove(nextCell);\n            } else {\n              this.stage = \"UNPARKING\";\n            }\n            break;\n          case \"UNPARKING\":\n            this.unpark();\n            this.stage = \"LEAVING\";\n            break;\n          case \"LEAVING\":\n            this.changeMoveTo(this.spawn.x, this.spawn.y);\n            this.stage = \"MOVING_TO_EXIT\";\n            break;\n          case \"MOVING_TO_EXIT\":\n            if (this.calculatingPath == false && this.path !== null && this.path.length > 0) {\n              const nextCell = this.world.getCellAtCoordinates(this.path[0].x, this.path[0].y);\n              this.makeMove(nextCell);\n            } else {\n              this.stage = \"EXITED\";\n            }\n            break;\n          case \"EXITED\":\n            this.world.removeAgent(this);\n            break;\n          default:\n            console.log(\"Unknown stage: \", this.stage);\n            break;\n        }\n        break;\n      default:\n        console.log(\"Unknown strategy: \", this.strategy);\n    }\n  }\n}\n\nexport default Agent;\n","/**\n * Represents a single instance of EasyStar.\n * A path that is in the queue to eventually be found.\n */\nmodule.exports = function() {\n    this.pointsToAvoid = {};\n    this.startX;\n    this.callback;\n    this.startY;\n    this.endX;\n    this.endY;\n    this.nodeHash = {};\n    this.openList;\n};","/**\n* A simple Node that represents a single tile on the grid.\n* @param {Object} parent The parent node.\n* @param {Number} x The x position on the grid.\n* @param {Number} y The y position on the grid.\n* @param {Number} costSoFar How far this node is in moves*cost from the start.\n* @param {Number} simpleDistanceToTarget Manhatten distance to the end point.\n**/\nmodule.exports = function(parent, x, y, costSoFar, simpleDistanceToTarget) {\n    this.parent = parent;\n    this.x = x;\n    this.y = y;\n    this.costSoFar = costSoFar;\n    this.simpleDistanceToTarget = simpleDistanceToTarget;\n\n    /**\n    * @return {Number} Best guess distance of a cost using this node.\n    **/\n    this.bestGuessDistance = function() {\n        return this.costSoFar + this.simpleDistanceToTarget;\n    }\n};","// Generated by CoffeeScript 1.8.0\n(function() {\n  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;\n\n  floor = Math.floor, min = Math.min;\n\n\n  /*\n  Default comparison function to be used\n   */\n\n  defaultCmp = function(x, y) {\n    if (x < y) {\n      return -1;\n    }\n    if (x > y) {\n      return 1;\n    }\n    return 0;\n  };\n\n\n  /*\n  Insert item x in list a, and keep it sorted assuming a is sorted.\n  \n  If x is already in a, insert it to the right of the rightmost x.\n  \n  Optional args lo (default 0) and hi (default a.length) bound the slice\n  of a to be searched.\n   */\n\n  insort = function(a, x, lo, hi, cmp) {\n    var mid;\n    if (lo == null) {\n      lo = 0;\n    }\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (lo < 0) {\n      throw new Error('lo must be non-negative');\n    }\n    if (hi == null) {\n      hi = a.length;\n    }\n    while (lo < hi) {\n      mid = floor((lo + hi) / 2);\n      if (cmp(x, a[mid]) < 0) {\n        hi = mid;\n      } else {\n        lo = mid + 1;\n      }\n    }\n    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);\n  };\n\n\n  /*\n  Push item onto heap, maintaining the heap invariant.\n   */\n\n  heappush = function(array, item, cmp) {\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    array.push(item);\n    return _siftdown(array, 0, array.length - 1, cmp);\n  };\n\n\n  /*\n  Pop the smallest item off the heap, maintaining the heap invariant.\n   */\n\n  heappop = function(array, cmp) {\n    var lastelt, returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    lastelt = array.pop();\n    if (array.length) {\n      returnitem = array[0];\n      array[0] = lastelt;\n      _siftup(array, 0, cmp);\n    } else {\n      returnitem = lastelt;\n    }\n    return returnitem;\n  };\n\n\n  /*\n  Pop and return the current smallest value, and add the new item.\n  \n  This is more efficient than heappop() followed by heappush(), and can be\n  more appropriate when using a fixed size heap. Note that the value\n  returned may be larger than item! That constrains reasonable use of\n  this routine unless written as part of a conditional replacement:\n      if item > array[0]\n        item = heapreplace(array, item)\n   */\n\n  heapreplace = function(array, item, cmp) {\n    var returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    returnitem = array[0];\n    array[0] = item;\n    _siftup(array, 0, cmp);\n    return returnitem;\n  };\n\n\n  /*\n  Fast version of a heappush followed by a heappop.\n   */\n\n  heappushpop = function(array, item, cmp) {\n    var _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (array.length && cmp(array[0], item) < 0) {\n      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];\n      _siftup(array, 0, cmp);\n    }\n    return item;\n  };\n\n\n  /*\n  Transform list into a heap, in-place, in O(array.length) time.\n   */\n\n  heapify = function(array, cmp) {\n    var i, _i, _j, _len, _ref, _ref1, _results, _results1;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    _ref1 = (function() {\n      _results1 = [];\n      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }\n      return _results1;\n    }).apply(this).reverse();\n    _results = [];\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      i = _ref1[_i];\n      _results.push(_siftup(array, i, cmp));\n    }\n    return _results;\n  };\n\n\n  /*\n  Update the position of the given item in the heap.\n  This function should be called every time the item is being modified.\n   */\n\n  updateItem = function(array, item, cmp) {\n    var pos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    pos = array.indexOf(item);\n    if (pos === -1) {\n      return;\n    }\n    _siftdown(array, 0, pos, cmp);\n    return _siftup(array, pos, cmp);\n  };\n\n\n  /*\n  Find the n largest elements in a dataset.\n   */\n\n  nlargest = function(array, n, cmp) {\n    var elem, result, _i, _len, _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    result = array.slice(0, n);\n    if (!result.length) {\n      return result;\n    }\n    heapify(result, cmp);\n    _ref = array.slice(n);\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      elem = _ref[_i];\n      heappushpop(result, elem, cmp);\n    }\n    return result.sort(cmp).reverse();\n  };\n\n\n  /*\n  Find the n smallest elements in a dataset.\n   */\n\n  nsmallest = function(array, n, cmp) {\n    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (n * 10 <= array.length) {\n      result = array.slice(0, n).sort(cmp);\n      if (!result.length) {\n        return result;\n      }\n      los = result[result.length - 1];\n      _ref = array.slice(n);\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        elem = _ref[_i];\n        if (cmp(elem, los) < 0) {\n          insort(result, elem, 0, null, cmp);\n          result.pop();\n          los = result[result.length - 1];\n        }\n      }\n      return result;\n    }\n    heapify(array, cmp);\n    _results = [];\n    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {\n      _results.push(heappop(array, cmp));\n    }\n    return _results;\n  };\n\n  _siftdown = function(array, startpos, pos, cmp) {\n    var newitem, parent, parentpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    newitem = array[pos];\n    while (pos > startpos) {\n      parentpos = (pos - 1) >> 1;\n      parent = array[parentpos];\n      if (cmp(newitem, parent) < 0) {\n        array[pos] = parent;\n        pos = parentpos;\n        continue;\n      }\n      break;\n    }\n    return array[pos] = newitem;\n  };\n\n  _siftup = function(array, pos, cmp) {\n    var childpos, endpos, newitem, rightpos, startpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    endpos = array.length;\n    startpos = pos;\n    newitem = array[pos];\n    childpos = 2 * pos + 1;\n    while (childpos < endpos) {\n      rightpos = childpos + 1;\n      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {\n        childpos = rightpos;\n      }\n      array[pos] = array[childpos];\n      pos = childpos;\n      childpos = 2 * pos + 1;\n    }\n    array[pos] = newitem;\n    return _siftdown(array, startpos, pos, cmp);\n  };\n\n  Heap = (function() {\n    Heap.push = heappush;\n\n    Heap.pop = heappop;\n\n    Heap.replace = heapreplace;\n\n    Heap.pushpop = heappushpop;\n\n    Heap.heapify = heapify;\n\n    Heap.updateItem = updateItem;\n\n    Heap.nlargest = nlargest;\n\n    Heap.nsmallest = nsmallest;\n\n    function Heap(cmp) {\n      this.cmp = cmp != null ? cmp : defaultCmp;\n      this.nodes = [];\n    }\n\n    Heap.prototype.push = function(x) {\n      return heappush(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pop = function() {\n      return heappop(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.peek = function() {\n      return this.nodes[0];\n    };\n\n    Heap.prototype.contains = function(x) {\n      return this.nodes.indexOf(x) !== -1;\n    };\n\n    Heap.prototype.replace = function(x) {\n      return heapreplace(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pushpop = function(x) {\n      return heappushpop(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.heapify = function() {\n      return heapify(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.updateItem = function(x) {\n      return updateItem(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.clear = function() {\n      return this.nodes = [];\n    };\n\n    Heap.prototype.empty = function() {\n      return this.nodes.length === 0;\n    };\n\n    Heap.prototype.size = function() {\n      return this.nodes.length;\n    };\n\n    Heap.prototype.clone = function() {\n      var heap;\n      heap = new Heap();\n      heap.nodes = this.nodes.slice(0);\n      return heap;\n    };\n\n    Heap.prototype.toArray = function() {\n      return this.nodes.slice(0);\n    };\n\n    Heap.prototype.insert = Heap.prototype.push;\n\n    Heap.prototype.top = Heap.prototype.peek;\n\n    Heap.prototype.front = Heap.prototype.peek;\n\n    Heap.prototype.has = Heap.prototype.contains;\n\n    Heap.prototype.copy = Heap.prototype.clone;\n\n    return Heap;\n\n  })();\n\n  (function(root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      return define([], factory);\n    } else if (typeof exports === 'object') {\n      return module.exports = factory();\n    } else {\n      return root.Heap = factory();\n    }\n  })(this, function() {\n    return Heap;\n  });\n\n}).call(this);\n","module.exports = require('./lib/heap');\n","/**\n*   EasyStar.js\n*   github.com/prettymuchbryce/EasyStarJS\n*   Licensed under the MIT license.\n*\n*   Implementation By Bryce Neal (@prettymuchbryce)\n**/\n\nvar EasyStar = {}\nvar Instance = require('./instance');\nvar Node = require('./node');\nvar Heap = require('heap');\n\nconst CLOSED_LIST = 0;\nconst OPEN_LIST = 1;\n\nmodule.exports = EasyStar;\n\nvar nextInstanceId = 1;\n\nEasyStar.js = function() {\n    var STRAIGHT_COST = 1.0;\n    var DIAGONAL_COST = 1.4;\n    var syncEnabled = false;\n    var pointsToAvoid = {};\n    var collisionGrid;\n    var costMap = {};\n    var pointsToCost = {};\n    var directionalConditions = {};\n    var allowCornerCutting = true;\n    var iterationsSoFar;\n    var instances = {};\n    var instanceQueue = [];\n    var iterationsPerCalculation = Number.MAX_VALUE;\n    var acceptableTiles;\n    var diagonalsEnabled = false;\n\n    /**\n    * Sets the collision grid that EasyStar uses.\n    *\n    * @param {Array|Number} tiles An array of numbers that represent\n    * which tiles in your grid should be considered\n    * acceptable, or \"walkable\".\n    **/\n    this.setAcceptableTiles = function(tiles) {\n        if (tiles instanceof Array) {\n            // Array\n            acceptableTiles = tiles;\n        } else if (!isNaN(parseFloat(tiles)) && isFinite(tiles)) {\n            // Number\n            acceptableTiles = [tiles];\n        }\n    };\n\n    /**\n    * Enables sync mode for this EasyStar instance..\n    * if you're into that sort of thing.\n    **/\n    this.enableSync = function() {\n        syncEnabled = true;\n    };\n\n    /**\n    * Disables sync mode for this EasyStar instance.\n    **/\n    this.disableSync = function() {\n        syncEnabled = false;\n    };\n\n    /**\n     * Enable diagonal pathfinding.\n     */\n    this.enableDiagonals = function() {\n        diagonalsEnabled = true;\n    }\n\n    /**\n     * Disable diagonal pathfinding.\n     */\n    this.disableDiagonals = function() {\n        diagonalsEnabled = false;\n    }\n\n    /**\n    * Sets the collision grid that EasyStar uses.\n    *\n    * @param {Array} grid The collision grid that this EasyStar instance will read from.\n    * This should be a 2D Array of Numbers.\n    **/\n    this.setGrid = function(grid) {\n        collisionGrid = grid;\n\n        //Setup cost map\n        for (var y = 0; y < collisionGrid.length; y++) {\n            for (var x = 0; x < collisionGrid[0].length; x++) {\n                if (!costMap[collisionGrid[y][x]]) {\n                    costMap[collisionGrid[y][x]] = 1\n                }\n            }\n        }\n    };\n\n    /**\n    * Sets the tile cost for a particular tile type.\n    *\n    * @param {Number} The tile type to set the cost for.\n    * @param {Number} The multiplicative cost associated with the given tile.\n    **/\n    this.setTileCost = function(tileType, cost) {\n        costMap[tileType] = cost;\n    };\n\n    /**\n    * Sets the an additional cost for a particular point.\n    * Overrides the cost from setTileCost.\n    *\n    * @param {Number} x The x value of the point to cost.\n    * @param {Number} y The y value of the point to cost.\n    * @param {Number} The multiplicative cost associated with the given point.\n    **/\n    this.setAdditionalPointCost = function(x, y, cost) {\n        if (pointsToCost[y] === undefined) {\n            pointsToCost[y] = {};\n        }\n        pointsToCost[y][x] = cost;\n    };\n\n    /**\n    * Remove the additional cost for a particular point.\n    *\n    * @param {Number} x The x value of the point to stop costing.\n    * @param {Number} y The y value of the point to stop costing.\n    **/\n    this.removeAdditionalPointCost = function(x, y) {\n        if (pointsToCost[y] !== undefined) {\n            delete pointsToCost[y][x];\n        }\n    }\n\n    /**\n    * Remove all additional point costs.\n    **/\n    this.removeAllAdditionalPointCosts = function() {\n        pointsToCost = {};\n    }\n\n    /**\n    * Sets a directional condition on a tile\n    *\n    * @param {Number} x The x value of the point.\n    * @param {Number} y The y value of the point.\n    * @param {Array.<String>} allowedDirections A list of all the allowed directions that can access\n    * the tile.\n    **/\n    this.setDirectionalCondition = function(x, y, allowedDirections) {\n        if (directionalConditions[y] === undefined) {\n            directionalConditions[y] = {};\n        }\n        directionalConditions[y][x] = allowedDirections;\n    };\n\n    /**\n    * Remove all directional conditions\n    **/\n    this.removeAllDirectionalConditions = function() {\n        directionalConditions = {};\n    };\n\n    /**\n    * Sets the number of search iterations per calculation.\n    * A lower number provides a slower result, but more practical if you\n    * have a large tile-map and don't want to block your thread while\n    * finding a path.\n    *\n    * @param {Number} iterations The number of searches to prefrom per calculate() call.\n    **/\n    this.setIterationsPerCalculation = function(iterations) {\n        iterationsPerCalculation = iterations;\n    };\n\n    /**\n    * Avoid a particular point on the grid,\n    * regardless of whether or not it is an acceptable tile.\n    *\n    * @param {Number} x The x value of the point to avoid.\n    * @param {Number} y The y value of the point to avoid.\n    **/\n    this.avoidAdditionalPoint = function(x, y) {\n        if (pointsToAvoid[y] === undefined) {\n            pointsToAvoid[y] = {};\n        }\n        pointsToAvoid[y][x] = 1;\n    };\n\n    /**\n    * Stop avoiding a particular point on the grid.\n    *\n    * @param {Number} x The x value of the point to stop avoiding.\n    * @param {Number} y The y value of the point to stop avoiding.\n    **/\n    this.stopAvoidingAdditionalPoint = function(x, y) {\n        if (pointsToAvoid[y] !== undefined) {\n            delete pointsToAvoid[y][x];\n        }\n    };\n\n    /**\n    * Enables corner cutting in diagonal movement.\n    **/\n    this.enableCornerCutting = function() {\n        allowCornerCutting = true;\n    };\n\n    /**\n    * Disables corner cutting in diagonal movement.\n    **/\n    this.disableCornerCutting = function() {\n        allowCornerCutting = false;\n    };\n\n    /**\n    * Stop avoiding all additional points on the grid.\n    **/\n    this.stopAvoidingAllAdditionalPoints = function() {\n        pointsToAvoid = {};\n    };\n\n    /**\n    * Find a path.\n    *\n    * @param {Number} startX The X position of the starting point.\n    * @param {Number} startY The Y position of the starting point.\n    * @param {Number} endX The X position of the ending point.\n    * @param {Number} endY The Y position of the ending point.\n    * @param {Function} callback A function that is called when your path\n    * is found, or no path is found.\n    * @return {Number} A numeric, non-zero value which identifies the created instance. This value can be passed to cancelPath to cancel the path calculation.\n    *\n    **/\n    this.findPath = function(startX, startY, endX, endY, callback) {\n        // Wraps the callback for sync vs async logic\n        var callbackWrapper = function(result) {\n            if (syncEnabled) {\n                callback(result);\n            } else {\n                setTimeout(function() {\n                    callback(result);\n                });\n            }\n        }\n\n        // No acceptable tiles were set\n        if (acceptableTiles === undefined) {\n            throw new Error(\"You can't set a path without first calling setAcceptableTiles() on EasyStar.\");\n        }\n        // No grid was set\n        if (collisionGrid === undefined) {\n            throw new Error(\"You can't set a path without first calling setGrid() on EasyStar.\");\n        }\n\n        // Start or endpoint outside of scope.\n        if (startX < 0 || startY < 0 || endX < 0 || endY < 0 ||\n        startX > collisionGrid[0].length-1 || startY > collisionGrid.length-1 ||\n        endX > collisionGrid[0].length-1 || endY > collisionGrid.length-1) {\n            throw new Error(\"Your start or end point is outside the scope of your grid.\");\n        }\n\n        // Start and end are the same tile.\n        if (startX===endX && startY===endY) {\n            callbackWrapper([]);\n            return;\n        }\n\n        // End point is not an acceptable tile.\n        var endTile = collisionGrid[endY][endX];\n        var isAcceptable = false;\n        for (var i = 0; i < acceptableTiles.length; i++) {\n            if (endTile === acceptableTiles[i]) {\n                isAcceptable = true;\n                break;\n            }\n        }\n\n        if (isAcceptable === false) {\n            callbackWrapper(null);\n            return;\n        }\n\n        // Create the instance\n        var instance = new Instance();\n        instance.openList = new Heap(function(nodeA, nodeB) {\n            return nodeA.bestGuessDistance() - nodeB.bestGuessDistance();\n        });\n        instance.isDoneCalculating = false;\n        instance.nodeHash = {};\n        instance.startX = startX;\n        instance.startY = startY;\n        instance.endX = endX;\n        instance.endY = endY;\n        instance.callback = callbackWrapper;\n\n        instance.openList.push(coordinateToNode(instance, instance.startX,\n            instance.startY, null, STRAIGHT_COST));\n\n        var instanceId = nextInstanceId ++;\n        instances[instanceId] = instance;\n        instanceQueue.push(instanceId);\n        return instanceId;\n    };\n\n    /**\n     * Cancel a path calculation.\n     *\n     * @param {Number} instanceId The instance ID of the path being calculated\n     * @return {Boolean} True if an instance was found and cancelled.\n     *\n     **/\n    this.cancelPath = function(instanceId) {\n        if (instanceId in instances) {\n            delete instances[instanceId];\n            // No need to remove it from instanceQueue\n            return true;\n        }\n        return false;\n    };\n\n    /**\n    * This method steps through the A* Algorithm in an attempt to\n    * find your path(s). It will search 4-8 tiles (depending on diagonals) for every calculation.\n    * You can change the number of calculations done in a call by using\n    * easystar.setIteratonsPerCalculation().\n    **/\n    this.calculate = function() {\n        if (instanceQueue.length === 0 || collisionGrid === undefined || acceptableTiles === undefined) {\n            return;\n        }\n        for (iterationsSoFar = 0; iterationsSoFar < iterationsPerCalculation; iterationsSoFar++) {\n            if (instanceQueue.length === 0) {\n                return;\n            }\n\n            if (syncEnabled) {\n                // If this is a sync instance, we want to make sure that it calculates synchronously.\n                iterationsSoFar = 0;\n            }\n\n            var instanceId = instanceQueue[0];\n            var instance = instances[instanceId];\n            if (typeof instance == 'undefined') {\n                // This instance was cancelled\n                instanceQueue.shift();\n                continue;\n            }\n\n            // Couldn't find a path.\n            if (instance.openList.size() === 0) {\n                instance.callback(null);\n                delete instances[instanceId];\n                instanceQueue.shift();\n                continue;\n            }\n\n            var searchNode = instance.openList.pop();\n\n            // Handles the case where we have found the destination\n            if (instance.endX === searchNode.x && instance.endY === searchNode.y) {\n                var path = [];\n                path.push({x: searchNode.x, y: searchNode.y});\n                var parent = searchNode.parent;\n                while (parent!=null) {\n                    path.push({x: parent.x, y:parent.y});\n                    parent = parent.parent;\n                }\n                path.reverse();\n                var ip = path;\n                instance.callback(ip);\n                delete instances[instanceId];\n                instanceQueue.shift();\n                continue;\n            }\n\n            searchNode.list = CLOSED_LIST;\n\n            if (searchNode.y > 0) {\n                checkAdjacentNode(instance, searchNode,\n                    0, -1, STRAIGHT_COST * getTileCost(searchNode.x, searchNode.y-1));\n            }\n            if (searchNode.x < collisionGrid[0].length-1) {\n                checkAdjacentNode(instance, searchNode,\n                    1, 0, STRAIGHT_COST * getTileCost(searchNode.x+1, searchNode.y));\n            }\n            if (searchNode.y < collisionGrid.length-1) {\n                checkAdjacentNode(instance, searchNode,\n                    0, 1, STRAIGHT_COST * getTileCost(searchNode.x, searchNode.y+1));\n            }\n            if (searchNode.x > 0) {\n                checkAdjacentNode(instance, searchNode,\n                    -1, 0, STRAIGHT_COST * getTileCost(searchNode.x-1, searchNode.y));\n            }\n            if (diagonalsEnabled) {\n                if (searchNode.x > 0 && searchNode.y > 0) {\n\n                    if (allowCornerCutting ||\n                        (isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y-1, searchNode) &&\n                        isTileWalkable(collisionGrid, acceptableTiles, searchNode.x-1, searchNode.y, searchNode))) {\n\n                        checkAdjacentNode(instance, searchNode,\n                            -1, -1, DIAGONAL_COST * getTileCost(searchNode.x-1, searchNode.y-1));\n                    }\n                }\n                if (searchNode.x < collisionGrid[0].length-1 && searchNode.y < collisionGrid.length-1) {\n\n                    if (allowCornerCutting ||\n                        (isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y+1, searchNode) &&\n                        isTileWalkable(collisionGrid, acceptableTiles, searchNode.x+1, searchNode.y, searchNode))) {\n\n                        checkAdjacentNode(instance, searchNode,\n                            1, 1, DIAGONAL_COST * getTileCost(searchNode.x+1, searchNode.y+1));\n                    }\n                }\n                if (searchNode.x < collisionGrid[0].length-1 && searchNode.y > 0) {\n\n                    if (allowCornerCutting ||\n                        (isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y-1, searchNode) &&\n                        isTileWalkable(collisionGrid, acceptableTiles, searchNode.x+1, searchNode.y, searchNode))) {\n\n                        checkAdjacentNode(instance, searchNode,\n                            1, -1, DIAGONAL_COST * getTileCost(searchNode.x+1, searchNode.y-1));\n                    }\n                }\n                if (searchNode.x > 0 && searchNode.y < collisionGrid.length-1) {\n\n                    if (allowCornerCutting ||\n                        (isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y+1, searchNode) &&\n                        isTileWalkable(collisionGrid, acceptableTiles, searchNode.x-1, searchNode.y, searchNode))) {\n\n                        checkAdjacentNode(instance, searchNode,\n                            -1, 1, DIAGONAL_COST * getTileCost(searchNode.x-1, searchNode.y+1));\n                    }\n                }\n            }\n\n        }\n    };\n\n    // Private methods follow\n    var checkAdjacentNode = function(instance, searchNode, x, y, cost) {\n        var adjacentCoordinateX = searchNode.x+x;\n        var adjacentCoordinateY = searchNode.y+y;\n\n        if ((pointsToAvoid[adjacentCoordinateY] === undefined ||\n             pointsToAvoid[adjacentCoordinateY][adjacentCoordinateX] === undefined) &&\n            isTileWalkable(collisionGrid, acceptableTiles, adjacentCoordinateX, adjacentCoordinateY, searchNode)) {\n            var node = coordinateToNode(instance, adjacentCoordinateX,\n                adjacentCoordinateY, searchNode, cost);\n\n            if (node.list === undefined) {\n                node.list = OPEN_LIST;\n                instance.openList.push(node);\n            } else if (searchNode.costSoFar + cost < node.costSoFar) {\n                node.costSoFar = searchNode.costSoFar + cost;\n                node.parent = searchNode;\n                instance.openList.updateItem(node);\n            }\n        }\n    };\n\n    // Helpers\n    var isTileWalkable = function(collisionGrid, acceptableTiles, x, y, sourceNode) {\n        var directionalCondition = directionalConditions[y] && directionalConditions[y][x];\n        if (directionalCondition) {\n            var direction = calculateDirection(sourceNode.x - x, sourceNode.y - y)\n            var directionIncluded = function () {\n                for (var i = 0; i < directionalCondition.length; i++) {\n                    if (directionalCondition[i] === direction) return true\n                }\n                return false\n            }\n            if (!directionIncluded()) return false\n        }\n        for (var i = 0; i < acceptableTiles.length; i++) {\n            if (collisionGrid[y][x] === acceptableTiles[i]) {\n                return true;\n            }\n        }\n\n        return false;\n    };\n\n    /**\n     * -1, -1 | 0, -1  | 1, -1\n     * -1,  0 | SOURCE | 1,  0\n     * -1,  1 | 0,  1  | 1,  1\n     */\n    var calculateDirection = function (diffX, diffY) {\n        if (diffX === 0 && diffY === -1) return EasyStar.TOP\n        else if (diffX === 1 && diffY === -1) return EasyStar.TOP_RIGHT\n        else if (diffX === 1 && diffY === 0) return EasyStar.RIGHT\n        else if (diffX === 1 && diffY === 1) return EasyStar.BOTTOM_RIGHT\n        else if (diffX === 0 && diffY === 1) return EasyStar.BOTTOM\n        else if (diffX === -1 && diffY === 1) return EasyStar.BOTTOM_LEFT\n        else if (diffX === -1 && diffY === 0) return EasyStar.LEFT\n        else if (diffX === -1 && diffY === -1) return EasyStar.TOP_LEFT\n        throw new Error('These differences are not valid: ' + diffX + ', ' + diffY)\n    };\n\n    var getTileCost = function(x, y) {\n        return (pointsToCost[y] && pointsToCost[y][x]) || costMap[collisionGrid[y][x]]\n    };\n\n    var coordinateToNode = function(instance, x, y, parent, cost) {\n        if (instance.nodeHash[y] !== undefined) {\n            if (instance.nodeHash[y][x] !== undefined) {\n                return instance.nodeHash[y][x];\n            }\n        } else {\n            instance.nodeHash[y] = {};\n        }\n        var simpleDistanceToTarget = getDistance(x, y, instance.endX, instance.endY);\n        if (parent!==null) {\n            var costSoFar = parent.costSoFar + cost;\n        } else {\n            costSoFar = 0;\n        }\n        var node = new Node(parent,x,y,costSoFar,simpleDistanceToTarget);\n        instance.nodeHash[y][x] = node;\n        return node;\n    };\n\n    var getDistance = function(x1,y1,x2,y2) {\n        if (diagonalsEnabled) {\n            // Octile distance\n            var dx = Math.abs(x1 - x2);\n            var dy = Math.abs(y1 - y2);\n            if (dx < dy) {\n                return DIAGONAL_COST * dx + dy;\n            } else {\n                return DIAGONAL_COST * dy + dx;\n            }\n        } else {\n            // Manhattan distance\n            var dx = Math.abs(x1 - x2);\n            var dy = Math.abs(y1 - y2);\n            return (dx + dy);\n        }\n    };\n}\n\nEasyStar.TOP = 'TOP'\nEasyStar.TOP_RIGHT = 'TOP_RIGHT'\nEasyStar.RIGHT = 'RIGHT'\nEasyStar.BOTTOM_RIGHT = 'BOTTOM_RIGHT'\nEasyStar.BOTTOM = 'BOTTOM'\nEasyStar.BOTTOM_LEFT = 'BOTTOM_LEFT'\nEasyStar.LEFT = 'LEFT'\nEasyStar.TOP_LEFT = 'TOP_LEFT'\n","import Cell from \"./Cell\";\nimport Agent from \"./Agent\"\nimport EasyStar from \"easystarjs\";\n\nclass World {\n  constructor(worldmap) {\n    this.state = [];\n    this.agents = [];\n    this.spawns = [];\n\n    // Setup initial state\n    const rows = worldmap.split(\"\\n\").filter(row => row.length > 0);\n\n    // Turns the characters from the worldmap into understandable strings\n    const types = {\n      // Useful stuff\n      S: \"SPAWN\",\n      X: \"BUILDING_ENTRANCE\",\n      b: \"BIKE_PATH\",\n      w: \"PEDESTRIAN_PATH\",\n      a: \"ALL_PATH\",\n      p: \"PARKING\",\n      // Cosmetics\n      e: \"EMPTY\",\n      o: \"BUILDING\"\n    }\n\n    // Create cells\n    // Loop over the 2D array of types, and create a new cell for each type\n    for (const [y, row] of rows.entries()) {\n      const rowData = [...row].map((c, x) => {\n        const type = types[c];\n        const cell = new Cell(this, type, x, y);\n\n        if (type === \"SPAWN\") {\n          this.spawns.push(cell);\n        }\n\n        return cell;\n      });\n      this.state.push(rowData);\n    }\n\n    this.bikePathfinder = new EasyStar.js();\n    this.pedestrianPathfinder = new EasyStar.js();\n\n    this.bikePathfinder.setGrid(this.state.map(row => row.map(cell => [\n      \"SPAWN\",\n      \"BIKE_PATH\",\n      \"ALL_PATH\",\n      \"PARKING\"\n    ].includes(cell.type) ? 1 : 0)));\n    this.bikePathfinder.setAcceptableTiles([1]);\n\n    this.pedestrianPathfinder.setGrid(this.state.map(row => row.map(cell => [\n      \"PEDESTRIAN_PATH\",\n      \"ALL_PATH\",\n      \"PARKING\",\n      \"BUILDING_ENTRANCE\"\n    ].includes(cell.type) ? 1 : 0)));\n    this.pedestrianPathfinder.setAcceptableTiles([1]);\n  }\n\n  getCellAtCoordinates(x, y) {\n    return this.state[y][x];\n  }\n\n  // // Returns all neighbors of a cell\n  // getNeighbors(cell) {\n  //   const { x, y } = cell;\n  //   let neighbors = [];\n\n  //   // Get neighbors in all 4 directions\n  //   if (y > 0) {\n  //     neighbors.push(this.state[y - 1][x]);\n  //   }\n  //   if (y < this.state.length - 1) {\n  //     neighbors.push(this.state[y + 1][x]);\n  //   }\n  //   if (x > 0) {\n  //     neighbors.push(this.state[y][x - 1]);\n  //   }\n  //   if (x < this.state[y].length - 1) {\n  //     neighbors.push(this.state[y][x + 1]);\n  //   }\n  //   return neighbors;\n  // }\n\n  // Adds a new agent to the world, at a random spawn point\n  spawnAgent(strategy) {\n    // Randomly pick a spawn cell\n    const spawn = this.spawns[Math.floor(Math.random() * this.spawns.length)];\n\n    // Add agent of type \"BIKE\" to this cell\n    const agent = new Agent(this, \"BIKE\", spawn, strategy);\n    this.agents.push(agent);\n    spawn.addAgent(agent);\n  }\n\n  // Remove agent\n  removeAgent(agent) {\n    this.agents = this.agents.filter((a) => a !== agent);\n    agent.cell.removeAgent(agent);\n  }\n\n  // // Moves agent to a new cell\n  moveAgent(agent, cell) {\n    if (cell.checkAddAgent(agent)) {\n      agent.cell.removeAgent(agent);\n      cell.addAgent(agent);\n      agent.cell = cell;\n    }\n  }\n\n  tick() {\n    this.agents.sort(function () {\n      return 0.5 - Math.random();\n    })\n    for (const agent of this.agents) {\n      const cell = agent.cell;\n      agent.act();\n    }\n  }\n}\n\nexport default World;\n","import \"./styles.css\";\nimport worldmap from \"./map\";\n\nimport Cell from \"./Cell\";\nimport Agent from \"./Agent\"\nimport World from \"./World\"\n\nconst squareSize = 32;\n\nlet tickdelay = 100;\nlet spawnspeed = 0.2;\n\n// **********************************\n// Controls\n// **********************************\n\n// Control tickdelay using range input with id \"tickdelay\"\ndocument.getElementById(\"tickdelay\").addEventListener(\"input\", (e) => {\n  tickdelay = e.target.value;\n});\n\ndocument.getElementById(\"spawnspeed\").addEventListener(\"input\", (e) => {\n  spawnspeed = e.target.value;\n});\n\n// **********************************\n// Read worldmap and create worldData\n// **********************************\n\nconst world = new World(worldmap);\n\n// **********************************\n// This is where the simulation loop\n// goes later or something\n// **********************************\n\n\nfunction gameTick() {\n  // Move current agents\n  world.tick();\n\n  // Spawn new agent sometimes\n  if(Math.random() < spawnspeed) {\n    world.spawnAgent(\"TEST_STRATEGY\");\n  }\n\n  setTimeout(gameTick, tickdelay);\n}\n\ngameTick();\n\n\n// **********************************\n// Draw world state to canvas\n// **********************************\n\nconst gridWidth = world.state[0].length;\nconst gridHeight = world.state.length;\n\nconst canvasWidth = gridWidth * squareSize;\nconst canvasHeight = gridHeight * squareSize;\nconsole.log(canvasWidth, canvasHeight);\n\nvar c = document.getElementById(\"canvas\");\nvar ctx = c.getContext(\"2d\");\nctx.canvas.width = canvasWidth;\nctx.canvas.height = canvasHeight;\n\nfunction drawCanvas() {\n  for(const [y, row] of world.state.entries()) {\n    for(const [x, cell] of row.entries()) {\n      cell.draw(ctx, x, y, squareSize);\n    }\n  }\n  requestAnimationFrame(drawCanvas);\n}\n\nrequestAnimationFrame(drawCanvas);","var bundleURL = null;\nfunction getBundleURLCached() {\n  if (!bundleURL) {\n    bundleURL = getBundleURL();\n  }\n\n  return bundleURL;\n}\n\nfunction getBundleURL() {\n  // Attempt to find the URL of the current script and use that as the base URL\n  try {\n    throw new Error;\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\\/\\/[^)\\n]+/g);\n    if (matches) {\n      return getBaseURL(matches[0]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\\/\\/.+)?\\/[^/]+(?:\\?.*)?$/, '$1') + '/';\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\n","var bundle = require('./bundle-url');\n\nfunction updateLink(link) {\n  var newLink = link.cloneNode();\n  newLink.onload = function () {\n    link.remove();\n  };\n  newLink.href = link.href.split('?')[0] + '?' + Date.now();\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\n\nvar cssTimeout = null;\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n    for (var i = 0; i < links.length; i++) {\n      if (bundle.getBaseURL(links[i].href) === bundle.getBundleURL()) {\n        updateLink(links[i]);\n      }\n    }\n\n    cssTimeout = null;\n  }, 50);\n}\n\nmodule.exports = reloadCSS;\n"]}
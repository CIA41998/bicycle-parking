{"version":3,"sources":["src/map.js","src/Cell.js","src/Agent.js","node_modules/easystarjs/src/instance.js","node_modules/easystarjs/src/node.js","node_modules/heap/lib/heap.js","node_modules/heap/index.js","node_modules/easystarjs/src/easystar.js","src/World.js","src/index.js"],"names":["map","mapDirection","Cell","MAX_PARKED_BIKES","world","type","x","y","allowed_direction","agents","bikes","agent","filter","length","push","a","ctx","squareSize","canvas_x","canvas_y","color","getCellColor","fillStyle","fillRect","font","fillText","bikeAgents","pedestrianAgents","forEach","i","drawBike","drawPedestrian","Agent","cell","strategy","spawn","parked_cell","move_to","incoming","LOT_PREFERENCE","path","calculatingPath","stage","ticks","ticks_to_parked","ticks_to_goal","bikePathfinder","pedestrianPathfinder","addTimeToPark","addTimeToGoal","canPark","addBike","hasParked","removeBike","callback","pathfinder","getPathfinder","findPath","console","log","calculate","nextCell","checkAddAgent","moveAgent","shift","changeMoveTo","getCellAtCoordinates","makeMove","park","buildingCell","getRandomCellOfType","hasReachedGoal","Math","random","parkingCell","moveParkingLot","parking","leavingParkingLot","moveToGoal","inGoal","leavingGoal","unpark","removeAgent","floor","RANDOM_CHOICE","parkingLotPreference","World","getDirectionArray","direction","EasyStar","BOTTOM","TOP","LEFT","RIGHT","worldmap","selectedStrategies","state","tickCount","rows","split","row","directionRows","types","S","E","X","b","w","p","_","o","js","entries","directionRow","rowData","c","setDirectionalCondition","setGrid","setAcceptableTiles","setTileCost","cells","flat","addAgent","sort","act","STRATEGIES","timeToParkData","timeToGoalData","reset","DrawChart","strategyName","toLowerCase","replace","s","d","toUpperCase","tickdelay","spawnspeed","paused","realtimeChart","document","getElementById","addEventListener","strategyCheckboxes","container","createElement","classList","add","checkbox","id","checked","includes","label","htmlFor","appendChild","createTextNode","realtimeChartCheckbox","innerHTML","e","target","value","gameTick","spawnAgent","tick","setTimeout","gridWidth","gridHeight","canvasWidth","canvasHeight","getContext","drawCanvas","draw","requestAnimationFrame","data","google","visualization","arrayToDataTable","Histogram","bar","gap","chartArea","legend","interpolateNulls","histogram","maxNumBuckets","minValue","maxValue","index","indexOf","Array","fill","canvas","width","height","charts","load","setOnLoadCallback"],"mappings":"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","file":"src.fb54372b.js","sourceRoot":"..","sourcesContent":["const map = `\n____________________________________\nbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb__\nbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb__\n_bbw______________aa____________bb__\n_bbw______________aappppppppppa_bb__\n_bbw______________aappppppppppaaaaaS\n_bbw______________aappppppppppaaaaaE\n_bbw______________aa________________\n_bbw__ooooooooooooaa________________\n_bbw__ooooooooooooaa________________\n_bbw__ooooooooooooaa________________\n_bbw__ooooooooooooaa________________\n_bbw__ooooooooooooaa________________\n_bbw__ooooooooooooaa________________\n_bbw__ooooooooooooaa________________\n_bbw__ooooooooooooaa________________\n_bbwwwooooooooooooaa________________\n_bbappoooopppppppoaa________________\n_bbappoooopppppppoaa________________\n_bbappooooooooooaaaa___pppppp_______\n_bbwwwooooooooooooaa___pppppp_______\n_bbwwwoooooooooooXaaaaaaaaaaaaaaaaaS\n_bbwwwooooooooooooaaaaaaaaaaaaaaaaaE\n_bbwwwooooooooooooaa___pppppp_______\n_bbwwwooooooooooooaa________________\n_bbaaa____________aa________________\n_bbaaaaaaaaaaaaaaaaaa_______________\n_bbaaaaaaaaaaaaaaaaaa_______________\n_bbw_____________aaaaa______________\n_bbw______________aaaaa_____________\n_bbw______________aaaaa_____________\n_bbw________________________________\n_bbw________________________________\n_bbw________________________________\n_bbw________________________________\n_ESw________________________________\n`;\n\nexport const mapDirection = `\n____________________________________\nwawwwwwwwwwwwwwwwwaawwwwwwwwwwwwwa__\neaaeeeeeeeeeeeeeeeaaeeeeeeeeeeeean__\n_sna______________sn____________sn__\n_sna______________aahhhhhhhhhha_sn__\n_sna______________aahhhhhhhhhhaaaaaa\n_sna______________aahhhhhhhhhhaaaaaa\n_sna______________sn________________\n_sna______________sn________________\n_sna______________sn________________\n_sna______________sn________________\n_sna______________sn________________\n_sna______________sn________________\n_sna______________sn________________\n_sna______________sn________________\n_sna______________sn________________\n_aaaaa____________sn________________\n_aaahh____hhhhhha_sn________________\n_aaahh____hhhhhha_sn________________\n_aaahh__________aaaa___vvvvvv_______\n_snaaa____________sn___vvvvvv_______\n_snaaa___________aaawwwaaaaaawwwwwwa\n_snaaa____________aaeeeaaaaaaeeeeeea\n_snaaa____________sn___vvvvvv_______\n_snaaa____________sn________________\n_snaaa____________sn________________\n_aaawwwwwwwwwwwwwwana_______________\n_aaaeeeeeeeeeeeeeeeaa_______________\n_sna_____________aaaaa______________\n_sna______________aaaaa_____________\n_sna______________aaaaa_____________\n_sna________________________________\n_sna________________________________\n_sna________________________________\n_sna________________________________\n_aaa________________________________\n`;\n\nexport default map;\n","const MAX_PARKED_BIKES = 8;\n\nclass Cell {\n  constructor(world, type, x, y, allowed_direction) {\n    this.type = type;\n    this.x = x;\n    this.y = y;\n    this.agents = [];\n    this.bikes = 0;\n    this.allowed_direction = allowed_direction;\n  }\n\n  // Check if agent can be added to this cell\n  checkAddAgent(agent) {\n    if (this.type === \"SPAWN\") {\n      return true;\n    }\n\n    if (this.type === \"BUILDING_ENTRANCE\" && agent.type === \"PEDESTRIAN\") {\n      return true;\n    }\n    // Allow a maximum of:\n    // 2 agents of type BIKE\n    // or 3 agents of type PEDESTRIAN\n    // or 1 agent of type BIKE and 2 agents of type PEDESTRIAN\n    // or 2 agent of type BIKE and 1 agents of type PEDESTRIAN\n    if (\n      agent.type === \"BIKE\" &&\n      this.agents.filter(({ type }) => type === \"BIKE\").length >= 2\n    ) {\n      return false;\n    }\n    if (\n      agent.type === \"PEDESTRIAN\" &&\n      this.agents.filter(({ type }) => type === \"PEDESTRIAN\").length >= 3\n    ) {\n      return false;\n    }\n    if (\n      agent.type === \"BIKE\" &&\n      this.agents.filter(({ type }) => type === \"PEDESTRIAN\").length >= 2\n    ) {\n      return false;\n    }\n    if (\n      agent.type === \"PEDESTRIAN\" &&\n      this.agents.filter(({ type }) => type === \"BIKE\").length >= 3\n    ) {\n      return false;\n    }\n    return true;\n  }\n\n  addAgent(agent) {\n    this.agents.push(agent);\n  }\n\n  removeAgent(agent) {\n    this.agents = this.agents.filter((a) => a !== agent);\n  }\n\n  canPark() {\n    return this.type === \"PARKING\" && this.bikes < MAX_PARKED_BIKES;\n  }\n\n  addBike() {\n    this.bikes++;\n  }\n\n  removeBike() {\n    this.bikes--;\n  }\n\n  draw(ctx, x, y, squareSize) {\n    const canvas_x = x * squareSize;\n    const canvas_y = y * squareSize;\n\n    let color = \"#fefefe\";\n\n    color = this.getCellColor(color);\n\n    ctx.fillStyle = color;\n    ctx.fillRect(canvas_x, canvas_y, squareSize, squareSize);\n\n    // Draw progress bar for amount of parked bikes\n    if (this.type === \"PARKING\") {\n      ctx.fillStyle = \"#ffffff\";\n      ctx.fillRect(canvas_x + 2, canvas_y + squareSize - 8, squareSize - 4, 4);\n      ctx.fillStyle = \"#316cf4\";\n      ctx.fillRect(\n        canvas_x + 2,\n        canvas_y + squareSize - 8,\n        (squareSize + 4) * (this.bikes / MAX_PARKED_BIKES),\n        4\n      );\n    }\n\n    if (this.type === \"BUILDING_ENTRANCE\") {\n      ctx.fillStyle = \"#000000\";\n      ctx.font = \"12px monospace\";\n      ctx.fillText(\n        \"\" + this.agents.filter(({ type }) => type === \"PEDESTRIAN\").length,\n        canvas_x + 2,\n        canvas_y + 24\n      );\n    } else {\n      const bikeAgents = this.agents.filter(({ type }) => type === \"BIKE\");\n      const pedestrianAgents = this.agents.filter(\n        ({ type }) => type === \"PEDESTRIAN\"\n      );\n      if (bikeAgents.length > 0) {\n        bikeAgents.forEach((agent, i) => {\n          this.drawBike(ctx, x * squareSize + i * 10, y * squareSize);\n        });\n        if (pedestrianAgents.length > 0) {\n          pedestrianAgents.forEach((agent, i) => {\n            this.drawPedestrian(\n              ctx,\n              x * squareSize + 10,\n              y * squareSize + i * 10\n            );\n          });\n        }\n      } else if (pedestrianAgents.length > 0) {\n        pedestrianAgents.forEach((agent, i) => {\n          if (i < 2) {\n            this.drawPedestrian(ctx, x * squareSize + i * 10, y * squareSize);\n          } else {\n            this.drawPedestrian(ctx, x * squareSize + 5, y * squareSize + 10);\n          }\n        });\n      }\n    }\n\n    // !! Debug to show number of agents in cell\n    // if([\"SPAWN\", \"BIKE_PATH\", \"PEDESTRIAN_PATH\", \"ALL_PATH\", \"PARKING\", \"BUILDING_ENTRANCE\"].includes(this.type)) {\n    //   ctx.font = '12px monospace';\n    //   ctx.fillStyle = \"black\";\n    //   // make text slightly transparent\n    //   ctx.globalAlpha = 0.3;\n    //   ctx.fillText(\"B:\" + this.agents.filter(({type}) => type === \"BIKE\").length, canvas_x + 2, canvas_y + 12);\n    //   ctx.fillText(\"P:\" + this.agents.filter(({type}) => type === \"PEDESTRIAN\").length, canvas_x + 2, canvas_y + 24);\n    //   // reset transparency\n    //   ctx.globalAlpha = 1;\n    // }\n\n    // !! Draws directions in which agents are allowed to move\n    // ctx.font = '14px monospace';\n    // ctx.fillStyle = \"black\";\n    // // make text slightly transparent\n    // ctx.globalAlpha = 0.5;\n    // ctx.fillText(this.allowed_direction, canvas_x + 2, canvas_y + 24);\n    // // reset transparency\n    // ctx.globalAlpha = 1;\n\n    // !! Draw coordinates\n    // ctx.font = '11px monospace';\n    // ctx.fillStyle = \"black\";\n    // // make text slightly transparent\n    // ctx.globalAlpha = 0.5;\n    // ctx.fillText(this.x + \",\", canvas_x, canvas_y + 10);\n    // ctx.fillText(this.y, canvas_x, canvas_y + 22);\n    // // reset transparency\n    // ctx.globalAlpha = 1;\n  }\n\n  // Drawing utilities, nothing important after this point :)\n\n  getCellColor(color) {\n    switch (this.type) {\n      case \"SPAWN\":\n        color = \"#e7b1b6\";\n        break;\n      case \"BIKE_PATH\":\n        color = \"#f3d8da\";\n        break;\n      case \"PEDESTRIAN_PATH\":\n        color = \"#eaecef\";\n        break;\n      case \"ALL_PATH\":\n        color = \"#cfd4d9\";\n        break;\n      case \"PARKING\":\n        color = \"#aeb5bc\";\n        break;\n      case \"EMPTY\":\n        color = \"#d5e6de\";\n        break;\n      case \"BUILDING\":\n        color = \"#a6c4f9\";\n        break;\n      case \"BUILDING_ENTRANCE\":\n        color = \"#7ba6f7\";\n        break;\n      case \"EXIT\":\n        color = \"#e7b1b6\";\n        break;\n    }\n    return color;\n  }\n\n  drawBike(ctx, x, y) {\n    ctx.fillStyle = \"#222529\";\n    ctx.fillRect(x + 6, y + 2, 5, 20);\n  }\n\n  drawPedestrian(ctx, x, y) {\n    ctx.fillStyle = \"#fd7e14\";\n    ctx.fillRect(x + 6, y + 2, 5, 5);\n  }\n}\n\nexport default Cell;\n","import { addTimeToPark, addTimeToGoal } from \"./index\";\n\nclass Agent {\n  constructor(world, type, cell, strategy) {\n    this.world = world;\n    this.type = type;\n    this.spawn = cell;\n    this.cell = cell;\n    this.parked_cell = null;\n    this.strategy = strategy;\n    this.move_to = null;\n    this.incoming = true; // Whether the agent is entering the sim or leaving.\n    this.lotPref = null;\n\n    // This is for storing the calculated path\n    // and not recalculating it every tick\n    this.path = null;\n    this.calculatingPath = false;\n    this.stage = \"ENTERING\";\n\n    this.ticks = 0;\n    this.ticks_to_parked = null;\n    this.ticks_to_goal = null;\n  }\n\n  getPathfinder() {\n    return this.type === \"BIKE\"\n      ? this.world.bikePathfinder\n      : this.world.pedestrianPathfinder;\n  }\n\n  hasParked() {\n    this.ticks_to_parked = this.ticks;\n    addTimeToPark(this.strategy, this.ticks_to_parked);\n  }\n\n  hasReachedGoal() {\n    this.ticks_to_goal = this.ticks;\n    addTimeToGoal(this.strategy, this.ticks_to_goal);\n  }\n\n  park() {\n    if (this.cell.canPark()) {\n      if (\n        this.type === \"BIKE\" &&\n        this.cell.type === \"PARKING\" &&\n        this.parked_cell === null\n      ) {\n        this.parked_cell = this.cell;\n        this.type = \"PEDESTRIAN\";\n        this.cell.addBike();\n        this.hasParked();\n        return true;\n      }\n    }\n    return false;\n  }\n\n  unpark() {\n    if (\n      this.type === \"PEDESTRIAN\" &&\n      this.cell.type === \"PARKING\" &&\n      this.parked_cell !== null\n    ) {\n      this.cell.removeBike();\n      this.parked_cell = null;\n      this.type = \"BIKE\";\n    }\n  }\n\n  changeMoveTo(x, y, callback) {\n    this.calculatingPath = true;\n    this.move_to = [x, y];\n    this.path = null;\n\n    const pathfinder = this.getPathfinder();\n    pathfinder.findPath(\n      this.cell.x,\n      this.cell.y,\n      this.move_to[0],\n      this.move_to[1],\n      (path) => {\n        if (path !== null) {\n          this.path = path;\n        } else {\n          console.log(\"Agent has no way to reach its goal\");\n        }\n        this.calculatingPath = false;\n        if (callback && path !== null) {\n          callback();\n        }\n      }\n    );\n\n    pathfinder.calculate();\n  }\n\n  makeMove(nextCell) {\n    if (nextCell.checkAddAgent(this)) {\n      this.world.moveAgent(this, nextCell);\n      this.path.shift();\n    }\n  }\n\n  ///////////////////////\n  // CONTROL FUNCTIONS //\n  ///////////////////////\n\n  exiting() {\n    this.changeMoveTo(this.spawn.x, this.spawn.y, () => {\n      this.stage = \"MOVING_TO_EXIT\";\n    });\n  }\n\n  moveParkingLot() {\n    if (\n      this.calculatingPath == false &&\n      this.path !== null &&\n      this.path.length > 0\n    ) {\n      const nextCell = this.world.getCellAtCoordinates(\n        this.path[0].x,\n        this.path[0].y\n      );\n      this.makeMove(nextCell);\n    } else {\n      if (this.incoming == true) {\n        this.stage = \"PARKING\";\n      } else {\n        this.stage = \"UNPARKING\";\n      }\n    }\n  }\n\n  parking() {\n    if (this.park()) {\n      this.stage = \"LEAVING_PARKING\";\n    } else {\n      console.log(\"Could not park\");\n    }\n  }\n\n  leavingParkingLot() {\n    const buildingCell = this.world.getRandomCellOfType(\"BUILDING_ENTRANCE\");\n    this.changeMoveTo(buildingCell.x, buildingCell.y, () => {\n      this.stage = \"MOVING_TO_GOAL\";\n    });\n  }\n\n  moveToGoal() {\n    if (\n      this.calculatingPath == false &&\n      this.path !== null &&\n      this.path.length > 0\n    ) {\n      const nextCell = this.world.getCellAtCoordinates(\n        this.path[0].x,\n        this.path[0].y\n      );\n      this.makeMove(nextCell);\n    } else {\n      this.stage = \"IN_GOAL\";\n      this.hasReachedGoal();\n    }\n  }\n\n  inGoal() {\n    if (Math.random() < 0.01) {\n      this.stage = \"LEAVING_GOAL\";\n      this.incoming = false;\n    }\n  }\n\n  leavingGoal() {\n    this.changeMoveTo(this.parked_cell.x, this.parked_cell.y, () => {\n      this.stage = \"MOVING_TO_PARKING_LEAVING\";\n    });\n  }\n\n  ///////////////////////\n  //    STRATEGIES     //\n  ///////////////////////\n  // 1) default: random lot, random spot.\n  // 2) parkingLotPreference: specific parking lot, random spot.\n  // 3) parkingLotSpotPreference: specific lot and spot.\n  // ADD MORE!\n\n  default() {\n    switch (this.stage) {\n      case \"ENTERING\":\n        const parkingCell = this.world.getRandomCellOfType(\"PARKING\");\n        this.changeMoveTo(parkingCell.x, parkingCell.y, () => {\n          this.stage = \"MOVING_TO_PARKING_ENTERING\";\n        });\n        break;\n      case \"MOVING_TO_PARKING_ENTERING\":\n        this.moveParkingLot();\n        break;\n      case \"PARKING\":\n        this.parking();\n        break;\n      case \"LEAVING_PARKING\":\n        this.leavingParkingLot();\n        break;\n      case \"MOVING_TO_GOAL\":\n        this.moveToGoal();\n        break;\n      case \"IN_GOAL\":\n        this.inGoal();\n        break;\n      case \"LEAVING_GOAL\":\n        this.leavingGoal();\n        break;\n      case \"MOVING_TO_PARKING_LEAVING\":\n        this.moveParkingLot();\n        break;\n      case \"UNPARKING\":\n        this.unpark();\n        this.stage = \"LEAVING\";\n        break;\n      case \"LEAVING\":\n        this.changeMoveTo(this.spawn.x, this.spawn.y, () => {\n          this.stage = \"MOVING_TO_EXIT\";\n        });\n        break;\n      case \"MOVING_TO_EXIT\":\n        if (\n          this.calculatingPath == false &&\n          this.path !== null &&\n          this.path.length > 0\n        ) {\n          const nextCell = this.world.getCellAtCoordinates(\n            this.path[0].x,\n            this.path[0].y\n          );\n          this.makeMove(nextCell);\n        } else {\n          this.stage = \"EXITED\";\n        }\n        break;\n      case \"EXITED\":\n        this.world.removeAgent(this);\n        break;\n      default:\n        console.log(\"Unknown stage: \", this.stage);\n        break;\n    }\n  }\n\n  parkingLotPreference() {\n    switch (this.stage) {\n      case \"ENTERING\":\n        const parkingLots = [\"top\", \"middle\", \"left\", \"right\"];\n        // this.lotPref = parkingLots[Math.floor(Math.random() * 0)];\n\n        this.changeMoveTo(19, 5, () => {\n          this.stage = \"MOVING_TO_PARKING_ENTERING\";\n        });\n        break;\n      case \"MOVING_TO_PARKING_ENTERING\":\n        this.moveParkingLot();\n\n        if (this.lotPref == \"top\") {\n          this.changeMoveTo(\n            Math.floor(Math.random() * (29 - 20 + 1)) + 20,\n            Math.floor(Math.random() * (6 - 4 + 1)) + 4\n          );\n        }\n        this.strategy == \"DEFAULT\";\n        break;\n\n      default:\n        console.log(\"NO STAGE\");\n    }\n  }\n\n  ////////////////////////\n  // STRATEGY EXECUTION //\n  ////////////////////////\n  act() {\n    this.ticks += 1;\n\n    if (this.strategy == \"DEFAULT\") {\n      this.default();\n    } else if (this.strategy == \"PARKING_LOT_PREFERENCE\") {\n      this.parkingLotPreference();\n    } else {\n      console.log(\"Unknown strategy: \", this.strategy);\n    }\n  }\n}\n\nexport default Agent;\n","/**\n * Represents a single instance of EasyStar.\n * A path that is in the queue to eventually be found.\n */\nmodule.exports = function() {\n    this.pointsToAvoid = {};\n    this.startX;\n    this.callback;\n    this.startY;\n    this.endX;\n    this.endY;\n    this.nodeHash = {};\n    this.openList;\n};","/**\n* A simple Node that represents a single tile on the grid.\n* @param {Object} parent The parent node.\n* @param {Number} x The x position on the grid.\n* @param {Number} y The y position on the grid.\n* @param {Number} costSoFar How far this node is in moves*cost from the start.\n* @param {Number} simpleDistanceToTarget Manhatten distance to the end point.\n**/\nmodule.exports = function(parent, x, y, costSoFar, simpleDistanceToTarget) {\n    this.parent = parent;\n    this.x = x;\n    this.y = y;\n    this.costSoFar = costSoFar;\n    this.simpleDistanceToTarget = simpleDistanceToTarget;\n\n    /**\n    * @return {Number} Best guess distance of a cost using this node.\n    **/\n    this.bestGuessDistance = function() {\n        return this.costSoFar + this.simpleDistanceToTarget;\n    }\n};","// Generated by CoffeeScript 1.8.0\n(function() {\n  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;\n\n  floor = Math.floor, min = Math.min;\n\n\n  /*\n  Default comparison function to be used\n   */\n\n  defaultCmp = function(x, y) {\n    if (x < y) {\n      return -1;\n    }\n    if (x > y) {\n      return 1;\n    }\n    return 0;\n  };\n\n\n  /*\n  Insert item x in list a, and keep it sorted assuming a is sorted.\n  \n  If x is already in a, insert it to the right of the rightmost x.\n  \n  Optional args lo (default 0) and hi (default a.length) bound the slice\n  of a to be searched.\n   */\n\n  insort = function(a, x, lo, hi, cmp) {\n    var mid;\n    if (lo == null) {\n      lo = 0;\n    }\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (lo < 0) {\n      throw new Error('lo must be non-negative');\n    }\n    if (hi == null) {\n      hi = a.length;\n    }\n    while (lo < hi) {\n      mid = floor((lo + hi) / 2);\n      if (cmp(x, a[mid]) < 0) {\n        hi = mid;\n      } else {\n        lo = mid + 1;\n      }\n    }\n    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);\n  };\n\n\n  /*\n  Push item onto heap, maintaining the heap invariant.\n   */\n\n  heappush = function(array, item, cmp) {\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    array.push(item);\n    return _siftdown(array, 0, array.length - 1, cmp);\n  };\n\n\n  /*\n  Pop the smallest item off the heap, maintaining the heap invariant.\n   */\n\n  heappop = function(array, cmp) {\n    var lastelt, returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    lastelt = array.pop();\n    if (array.length) {\n      returnitem = array[0];\n      array[0] = lastelt;\n      _siftup(array, 0, cmp);\n    } else {\n      returnitem = lastelt;\n    }\n    return returnitem;\n  };\n\n\n  /*\n  Pop and return the current smallest value, and add the new item.\n  \n  This is more efficient than heappop() followed by heappush(), and can be\n  more appropriate when using a fixed size heap. Note that the value\n  returned may be larger than item! That constrains reasonable use of\n  this routine unless written as part of a conditional replacement:\n      if item > array[0]\n        item = heapreplace(array, item)\n   */\n\n  heapreplace = function(array, item, cmp) {\n    var returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    returnitem = array[0];\n    array[0] = item;\n    _siftup(array, 0, cmp);\n    return returnitem;\n  };\n\n\n  /*\n  Fast version of a heappush followed by a heappop.\n   */\n\n  heappushpop = function(array, item, cmp) {\n    var _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (array.length && cmp(array[0], item) < 0) {\n      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];\n      _siftup(array, 0, cmp);\n    }\n    return item;\n  };\n\n\n  /*\n  Transform list into a heap, in-place, in O(array.length) time.\n   */\n\n  heapify = function(array, cmp) {\n    var i, _i, _j, _len, _ref, _ref1, _results, _results1;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    _ref1 = (function() {\n      _results1 = [];\n      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }\n      return _results1;\n    }).apply(this).reverse();\n    _results = [];\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      i = _ref1[_i];\n      _results.push(_siftup(array, i, cmp));\n    }\n    return _results;\n  };\n\n\n  /*\n  Update the position of the given item in the heap.\n  This function should be called every time the item is being modified.\n   */\n\n  updateItem = function(array, item, cmp) {\n    var pos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    pos = array.indexOf(item);\n    if (pos === -1) {\n      return;\n    }\n    _siftdown(array, 0, pos, cmp);\n    return _siftup(array, pos, cmp);\n  };\n\n\n  /*\n  Find the n largest elements in a dataset.\n   */\n\n  nlargest = function(array, n, cmp) {\n    var elem, result, _i, _len, _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    result = array.slice(0, n);\n    if (!result.length) {\n      return result;\n    }\n    heapify(result, cmp);\n    _ref = array.slice(n);\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      elem = _ref[_i];\n      heappushpop(result, elem, cmp);\n    }\n    return result.sort(cmp).reverse();\n  };\n\n\n  /*\n  Find the n smallest elements in a dataset.\n   */\n\n  nsmallest = function(array, n, cmp) {\n    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (n * 10 <= array.length) {\n      result = array.slice(0, n).sort(cmp);\n      if (!result.length) {\n        return result;\n      }\n      los = result[result.length - 1];\n      _ref = array.slice(n);\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        elem = _ref[_i];\n        if (cmp(elem, los) < 0) {\n          insort(result, elem, 0, null, cmp);\n          result.pop();\n          los = result[result.length - 1];\n        }\n      }\n      return result;\n    }\n    heapify(array, cmp);\n    _results = [];\n    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {\n      _results.push(heappop(array, cmp));\n    }\n    return _results;\n  };\n\n  _siftdown = function(array, startpos, pos, cmp) {\n    var newitem, parent, parentpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    newitem = array[pos];\n    while (pos > startpos) {\n      parentpos = (pos - 1) >> 1;\n      parent = array[parentpos];\n      if (cmp(newitem, parent) < 0) {\n        array[pos] = parent;\n        pos = parentpos;\n        continue;\n      }\n      break;\n    }\n    return array[pos] = newitem;\n  };\n\n  _siftup = function(array, pos, cmp) {\n    var childpos, endpos, newitem, rightpos, startpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    endpos = array.length;\n    startpos = pos;\n    newitem = array[pos];\n    childpos = 2 * pos + 1;\n    while (childpos < endpos) {\n      rightpos = childpos + 1;\n      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {\n        childpos = rightpos;\n      }\n      array[pos] = array[childpos];\n      pos = childpos;\n      childpos = 2 * pos + 1;\n    }\n    array[pos] = newitem;\n    return _siftdown(array, startpos, pos, cmp);\n  };\n\n  Heap = (function() {\n    Heap.push = heappush;\n\n    Heap.pop = heappop;\n\n    Heap.replace = heapreplace;\n\n    Heap.pushpop = heappushpop;\n\n    Heap.heapify = heapify;\n\n    Heap.updateItem = updateItem;\n\n    Heap.nlargest = nlargest;\n\n    Heap.nsmallest = nsmallest;\n\n    function Heap(cmp) {\n      this.cmp = cmp != null ? cmp : defaultCmp;\n      this.nodes = [];\n    }\n\n    Heap.prototype.push = function(x) {\n      return heappush(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pop = function() {\n      return heappop(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.peek = function() {\n      return this.nodes[0];\n    };\n\n    Heap.prototype.contains = function(x) {\n      return this.nodes.indexOf(x) !== -1;\n    };\n\n    Heap.prototype.replace = function(x) {\n      return heapreplace(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pushpop = function(x) {\n      return heappushpop(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.heapify = function() {\n      return heapify(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.updateItem = function(x) {\n      return updateItem(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.clear = function() {\n      return this.nodes = [];\n    };\n\n    Heap.prototype.empty = function() {\n      return this.nodes.length === 0;\n    };\n\n    Heap.prototype.size = function() {\n      return this.nodes.length;\n    };\n\n    Heap.prototype.clone = function() {\n      var heap;\n      heap = new Heap();\n      heap.nodes = this.nodes.slice(0);\n      return heap;\n    };\n\n    Heap.prototype.toArray = function() {\n      return this.nodes.slice(0);\n    };\n\n    Heap.prototype.insert = Heap.prototype.push;\n\n    Heap.prototype.top = Heap.prototype.peek;\n\n    Heap.prototype.front = Heap.prototype.peek;\n\n    Heap.prototype.has = Heap.prototype.contains;\n\n    Heap.prototype.copy = Heap.prototype.clone;\n\n    return Heap;\n\n  })();\n\n  (function(root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      return define([], factory);\n    } else if (typeof exports === 'object') {\n      return module.exports = factory();\n    } else {\n      return root.Heap = factory();\n    }\n  })(this, function() {\n    return Heap;\n  });\n\n}).call(this);\n","module.exports = require('./lib/heap');\n","/**\n*   EasyStar.js\n*   github.com/prettymuchbryce/EasyStarJS\n*   Licensed under the MIT license.\n*\n*   Implementation By Bryce Neal (@prettymuchbryce)\n**/\n\nvar EasyStar = {}\nvar Instance = require('./instance');\nvar Node = require('./node');\nvar Heap = require('heap');\n\nconst CLOSED_LIST = 0;\nconst OPEN_LIST = 1;\n\nmodule.exports = EasyStar;\n\nvar nextInstanceId = 1;\n\nEasyStar.js = function() {\n    var STRAIGHT_COST = 1.0;\n    var DIAGONAL_COST = 1.4;\n    var syncEnabled = false;\n    var pointsToAvoid = {};\n    var collisionGrid;\n    var costMap = {};\n    var pointsToCost = {};\n    var directionalConditions = {};\n    var allowCornerCutting = true;\n    var iterationsSoFar;\n    var instances = {};\n    var instanceQueue = [];\n    var iterationsPerCalculation = Number.MAX_VALUE;\n    var acceptableTiles;\n    var diagonalsEnabled = false;\n\n    /**\n    * Sets the collision grid that EasyStar uses.\n    *\n    * @param {Array|Number} tiles An array of numbers that represent\n    * which tiles in your grid should be considered\n    * acceptable, or \"walkable\".\n    **/\n    this.setAcceptableTiles = function(tiles) {\n        if (tiles instanceof Array) {\n            // Array\n            acceptableTiles = tiles;\n        } else if (!isNaN(parseFloat(tiles)) && isFinite(tiles)) {\n            // Number\n            acceptableTiles = [tiles];\n        }\n    };\n\n    /**\n    * Enables sync mode for this EasyStar instance..\n    * if you're into that sort of thing.\n    **/\n    this.enableSync = function() {\n        syncEnabled = true;\n    };\n\n    /**\n    * Disables sync mode for this EasyStar instance.\n    **/\n    this.disableSync = function() {\n        syncEnabled = false;\n    };\n\n    /**\n     * Enable diagonal pathfinding.\n     */\n    this.enableDiagonals = function() {\n        diagonalsEnabled = true;\n    }\n\n    /**\n     * Disable diagonal pathfinding.\n     */\n    this.disableDiagonals = function() {\n        diagonalsEnabled = false;\n    }\n\n    /**\n    * Sets the collision grid that EasyStar uses.\n    *\n    * @param {Array} grid The collision grid that this EasyStar instance will read from.\n    * This should be a 2D Array of Numbers.\n    **/\n    this.setGrid = function(grid) {\n        collisionGrid = grid;\n\n        //Setup cost map\n        for (var y = 0; y < collisionGrid.length; y++) {\n            for (var x = 0; x < collisionGrid[0].length; x++) {\n                if (!costMap[collisionGrid[y][x]]) {\n                    costMap[collisionGrid[y][x]] = 1\n                }\n            }\n        }\n    };\n\n    /**\n    * Sets the tile cost for a particular tile type.\n    *\n    * @param {Number} The tile type to set the cost for.\n    * @param {Number} The multiplicative cost associated with the given tile.\n    **/\n    this.setTileCost = function(tileType, cost) {\n        costMap[tileType] = cost;\n    };\n\n    /**\n    * Sets the an additional cost for a particular point.\n    * Overrides the cost from setTileCost.\n    *\n    * @param {Number} x The x value of the point to cost.\n    * @param {Number} y The y value of the point to cost.\n    * @param {Number} The multiplicative cost associated with the given point.\n    **/\n    this.setAdditionalPointCost = function(x, y, cost) {\n        if (pointsToCost[y] === undefined) {\n            pointsToCost[y] = {};\n        }\n        pointsToCost[y][x] = cost;\n    };\n\n    /**\n    * Remove the additional cost for a particular point.\n    *\n    * @param {Number} x The x value of the point to stop costing.\n    * @param {Number} y The y value of the point to stop costing.\n    **/\n    this.removeAdditionalPointCost = function(x, y) {\n        if (pointsToCost[y] !== undefined) {\n            delete pointsToCost[y][x];\n        }\n    }\n\n    /**\n    * Remove all additional point costs.\n    **/\n    this.removeAllAdditionalPointCosts = function() {\n        pointsToCost = {};\n    }\n\n    /**\n    * Sets a directional condition on a tile\n    *\n    * @param {Number} x The x value of the point.\n    * @param {Number} y The y value of the point.\n    * @param {Array.<String>} allowedDirections A list of all the allowed directions that can access\n    * the tile.\n    **/\n    this.setDirectionalCondition = function(x, y, allowedDirections) {\n        if (directionalConditions[y] === undefined) {\n            directionalConditions[y] = {};\n        }\n        directionalConditions[y][x] = allowedDirections;\n    };\n\n    /**\n    * Remove all directional conditions\n    **/\n    this.removeAllDirectionalConditions = function() {\n        directionalConditions = {};\n    };\n\n    /**\n    * Sets the number of search iterations per calculation.\n    * A lower number provides a slower result, but more practical if you\n    * have a large tile-map and don't want to block your thread while\n    * finding a path.\n    *\n    * @param {Number} iterations The number of searches to prefrom per calculate() call.\n    **/\n    this.setIterationsPerCalculation = function(iterations) {\n        iterationsPerCalculation = iterations;\n    };\n\n    /**\n    * Avoid a particular point on the grid,\n    * regardless of whether or not it is an acceptable tile.\n    *\n    * @param {Number} x The x value of the point to avoid.\n    * @param {Number} y The y value of the point to avoid.\n    **/\n    this.avoidAdditionalPoint = function(x, y) {\n        if (pointsToAvoid[y] === undefined) {\n            pointsToAvoid[y] = {};\n        }\n        pointsToAvoid[y][x] = 1;\n    };\n\n    /**\n    * Stop avoiding a particular point on the grid.\n    *\n    * @param {Number} x The x value of the point to stop avoiding.\n    * @param {Number} y The y value of the point to stop avoiding.\n    **/\n    this.stopAvoidingAdditionalPoint = function(x, y) {\n        if (pointsToAvoid[y] !== undefined) {\n            delete pointsToAvoid[y][x];\n        }\n    };\n\n    /**\n    * Enables corner cutting in diagonal movement.\n    **/\n    this.enableCornerCutting = function() {\n        allowCornerCutting = true;\n    };\n\n    /**\n    * Disables corner cutting in diagonal movement.\n    **/\n    this.disableCornerCutting = function() {\n        allowCornerCutting = false;\n    };\n\n    /**\n    * Stop avoiding all additional points on the grid.\n    **/\n    this.stopAvoidingAllAdditionalPoints = function() {\n        pointsToAvoid = {};\n    };\n\n    /**\n    * Find a path.\n    *\n    * @param {Number} startX The X position of the starting point.\n    * @param {Number} startY The Y position of the starting point.\n    * @param {Number} endX The X position of the ending point.\n    * @param {Number} endY The Y position of the ending point.\n    * @param {Function} callback A function that is called when your path\n    * is found, or no path is found.\n    * @return {Number} A numeric, non-zero value which identifies the created instance. This value can be passed to cancelPath to cancel the path calculation.\n    *\n    **/\n    this.findPath = function(startX, startY, endX, endY, callback) {\n        // Wraps the callback for sync vs async logic\n        var callbackWrapper = function(result) {\n            if (syncEnabled) {\n                callback(result);\n            } else {\n                setTimeout(function() {\n                    callback(result);\n                });\n            }\n        }\n\n        // No acceptable tiles were set\n        if (acceptableTiles === undefined) {\n            throw new Error(\"You can't set a path without first calling setAcceptableTiles() on EasyStar.\");\n        }\n        // No grid was set\n        if (collisionGrid === undefined) {\n            throw new Error(\"You can't set a path without first calling setGrid() on EasyStar.\");\n        }\n\n        // Start or endpoint outside of scope.\n        if (startX < 0 || startY < 0 || endX < 0 || endY < 0 ||\n        startX > collisionGrid[0].length-1 || startY > collisionGrid.length-1 ||\n        endX > collisionGrid[0].length-1 || endY > collisionGrid.length-1) {\n            throw new Error(\"Your start or end point is outside the scope of your grid.\");\n        }\n\n        // Start and end are the same tile.\n        if (startX===endX && startY===endY) {\n            callbackWrapper([]);\n            return;\n        }\n\n        // End point is not an acceptable tile.\n        var endTile = collisionGrid[endY][endX];\n        var isAcceptable = false;\n        for (var i = 0; i < acceptableTiles.length; i++) {\n            if (endTile === acceptableTiles[i]) {\n                isAcceptable = true;\n                break;\n            }\n        }\n\n        if (isAcceptable === false) {\n            callbackWrapper(null);\n            return;\n        }\n\n        // Create the instance\n        var instance = new Instance();\n        instance.openList = new Heap(function(nodeA, nodeB) {\n            return nodeA.bestGuessDistance() - nodeB.bestGuessDistance();\n        });\n        instance.isDoneCalculating = false;\n        instance.nodeHash = {};\n        instance.startX = startX;\n        instance.startY = startY;\n        instance.endX = endX;\n        instance.endY = endY;\n        instance.callback = callbackWrapper;\n\n        instance.openList.push(coordinateToNode(instance, instance.startX,\n            instance.startY, null, STRAIGHT_COST));\n\n        var instanceId = nextInstanceId ++;\n        instances[instanceId] = instance;\n        instanceQueue.push(instanceId);\n        return instanceId;\n    };\n\n    /**\n     * Cancel a path calculation.\n     *\n     * @param {Number} instanceId The instance ID of the path being calculated\n     * @return {Boolean} True if an instance was found and cancelled.\n     *\n     **/\n    this.cancelPath = function(instanceId) {\n        if (instanceId in instances) {\n            delete instances[instanceId];\n            // No need to remove it from instanceQueue\n            return true;\n        }\n        return false;\n    };\n\n    /**\n    * This method steps through the A* Algorithm in an attempt to\n    * find your path(s). It will search 4-8 tiles (depending on diagonals) for every calculation.\n    * You can change the number of calculations done in a call by using\n    * easystar.setIteratonsPerCalculation().\n    **/\n    this.calculate = function() {\n        if (instanceQueue.length === 0 || collisionGrid === undefined || acceptableTiles === undefined) {\n            return;\n        }\n        for (iterationsSoFar = 0; iterationsSoFar < iterationsPerCalculation; iterationsSoFar++) {\n            if (instanceQueue.length === 0) {\n                return;\n            }\n\n            if (syncEnabled) {\n                // If this is a sync instance, we want to make sure that it calculates synchronously.\n                iterationsSoFar = 0;\n            }\n\n            var instanceId = instanceQueue[0];\n            var instance = instances[instanceId];\n            if (typeof instance == 'undefined') {\n                // This instance was cancelled\n                instanceQueue.shift();\n                continue;\n            }\n\n            // Couldn't find a path.\n            if (instance.openList.size() === 0) {\n                instance.callback(null);\n                delete instances[instanceId];\n                instanceQueue.shift();\n                continue;\n            }\n\n            var searchNode = instance.openList.pop();\n\n            // Handles the case where we have found the destination\n            if (instance.endX === searchNode.x && instance.endY === searchNode.y) {\n                var path = [];\n                path.push({x: searchNode.x, y: searchNode.y});\n                var parent = searchNode.parent;\n                while (parent!=null) {\n                    path.push({x: parent.x, y:parent.y});\n                    parent = parent.parent;\n                }\n                path.reverse();\n                var ip = path;\n                instance.callback(ip);\n                delete instances[instanceId];\n                instanceQueue.shift();\n                continue;\n            }\n\n            searchNode.list = CLOSED_LIST;\n\n            if (searchNode.y > 0) {\n                checkAdjacentNode(instance, searchNode,\n                    0, -1, STRAIGHT_COST * getTileCost(searchNode.x, searchNode.y-1));\n            }\n            if (searchNode.x < collisionGrid[0].length-1) {\n                checkAdjacentNode(instance, searchNode,\n                    1, 0, STRAIGHT_COST * getTileCost(searchNode.x+1, searchNode.y));\n            }\n            if (searchNode.y < collisionGrid.length-1) {\n                checkAdjacentNode(instance, searchNode,\n                    0, 1, STRAIGHT_COST * getTileCost(searchNode.x, searchNode.y+1));\n            }\n            if (searchNode.x > 0) {\n                checkAdjacentNode(instance, searchNode,\n                    -1, 0, STRAIGHT_COST * getTileCost(searchNode.x-1, searchNode.y));\n            }\n            if (diagonalsEnabled) {\n                if (searchNode.x > 0 && searchNode.y > 0) {\n\n                    if (allowCornerCutting ||\n                        (isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y-1, searchNode) &&\n                        isTileWalkable(collisionGrid, acceptableTiles, searchNode.x-1, searchNode.y, searchNode))) {\n\n                        checkAdjacentNode(instance, searchNode,\n                            -1, -1, DIAGONAL_COST * getTileCost(searchNode.x-1, searchNode.y-1));\n                    }\n                }\n                if (searchNode.x < collisionGrid[0].length-1 && searchNode.y < collisionGrid.length-1) {\n\n                    if (allowCornerCutting ||\n                        (isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y+1, searchNode) &&\n                        isTileWalkable(collisionGrid, acceptableTiles, searchNode.x+1, searchNode.y, searchNode))) {\n\n                        checkAdjacentNode(instance, searchNode,\n                            1, 1, DIAGONAL_COST * getTileCost(searchNode.x+1, searchNode.y+1));\n                    }\n                }\n                if (searchNode.x < collisionGrid[0].length-1 && searchNode.y > 0) {\n\n                    if (allowCornerCutting ||\n                        (isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y-1, searchNode) &&\n                        isTileWalkable(collisionGrid, acceptableTiles, searchNode.x+1, searchNode.y, searchNode))) {\n\n                        checkAdjacentNode(instance, searchNode,\n                            1, -1, DIAGONAL_COST * getTileCost(searchNode.x+1, searchNode.y-1));\n                    }\n                }\n                if (searchNode.x > 0 && searchNode.y < collisionGrid.length-1) {\n\n                    if (allowCornerCutting ||\n                        (isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y+1, searchNode) &&\n                        isTileWalkable(collisionGrid, acceptableTiles, searchNode.x-1, searchNode.y, searchNode))) {\n\n                        checkAdjacentNode(instance, searchNode,\n                            -1, 1, DIAGONAL_COST * getTileCost(searchNode.x-1, searchNode.y+1));\n                    }\n                }\n            }\n\n        }\n    };\n\n    // Private methods follow\n    var checkAdjacentNode = function(instance, searchNode, x, y, cost) {\n        var adjacentCoordinateX = searchNode.x+x;\n        var adjacentCoordinateY = searchNode.y+y;\n\n        if ((pointsToAvoid[adjacentCoordinateY] === undefined ||\n             pointsToAvoid[adjacentCoordinateY][adjacentCoordinateX] === undefined) &&\n            isTileWalkable(collisionGrid, acceptableTiles, adjacentCoordinateX, adjacentCoordinateY, searchNode)) {\n            var node = coordinateToNode(instance, adjacentCoordinateX,\n                adjacentCoordinateY, searchNode, cost);\n\n            if (node.list === undefined) {\n                node.list = OPEN_LIST;\n                instance.openList.push(node);\n            } else if (searchNode.costSoFar + cost < node.costSoFar) {\n                node.costSoFar = searchNode.costSoFar + cost;\n                node.parent = searchNode;\n                instance.openList.updateItem(node);\n            }\n        }\n    };\n\n    // Helpers\n    var isTileWalkable = function(collisionGrid, acceptableTiles, x, y, sourceNode) {\n        var directionalCondition = directionalConditions[y] && directionalConditions[y][x];\n        if (directionalCondition) {\n            var direction = calculateDirection(sourceNode.x - x, sourceNode.y - y)\n            var directionIncluded = function () {\n                for (var i = 0; i < directionalCondition.length; i++) {\n                    if (directionalCondition[i] === direction) return true\n                }\n                return false\n            }\n            if (!directionIncluded()) return false\n        }\n        for (var i = 0; i < acceptableTiles.length; i++) {\n            if (collisionGrid[y][x] === acceptableTiles[i]) {\n                return true;\n            }\n        }\n\n        return false;\n    };\n\n    /**\n     * -1, -1 | 0, -1  | 1, -1\n     * -1,  0 | SOURCE | 1,  0\n     * -1,  1 | 0,  1  | 1,  1\n     */\n    var calculateDirection = function (diffX, diffY) {\n        if (diffX === 0 && diffY === -1) return EasyStar.TOP\n        else if (diffX === 1 && diffY === -1) return EasyStar.TOP_RIGHT\n        else if (diffX === 1 && diffY === 0) return EasyStar.RIGHT\n        else if (diffX === 1 && diffY === 1) return EasyStar.BOTTOM_RIGHT\n        else if (diffX === 0 && diffY === 1) return EasyStar.BOTTOM\n        else if (diffX === -1 && diffY === 1) return EasyStar.BOTTOM_LEFT\n        else if (diffX === -1 && diffY === 0) return EasyStar.LEFT\n        else if (diffX === -1 && diffY === -1) return EasyStar.TOP_LEFT\n        throw new Error('These differences are not valid: ' + diffX + ', ' + diffY)\n    };\n\n    var getTileCost = function(x, y) {\n        return (pointsToCost[y] && pointsToCost[y][x]) || costMap[collisionGrid[y][x]]\n    };\n\n    var coordinateToNode = function(instance, x, y, parent, cost) {\n        if (instance.nodeHash[y] !== undefined) {\n            if (instance.nodeHash[y][x] !== undefined) {\n                return instance.nodeHash[y][x];\n            }\n        } else {\n            instance.nodeHash[y] = {};\n        }\n        var simpleDistanceToTarget = getDistance(x, y, instance.endX, instance.endY);\n        if (parent!==null) {\n            var costSoFar = parent.costSoFar + cost;\n        } else {\n            costSoFar = 0;\n        }\n        var node = new Node(parent,x,y,costSoFar,simpleDistanceToTarget);\n        instance.nodeHash[y][x] = node;\n        return node;\n    };\n\n    var getDistance = function(x1,y1,x2,y2) {\n        if (diagonalsEnabled) {\n            // Octile distance\n            var dx = Math.abs(x1 - x2);\n            var dy = Math.abs(y1 - y2);\n            if (dx < dy) {\n                return DIAGONAL_COST * dx + dy;\n            } else {\n                return DIAGONAL_COST * dy + dx;\n            }\n        } else {\n            // Manhattan distance\n            var dx = Math.abs(x1 - x2);\n            var dy = Math.abs(y1 - y2);\n            return (dx + dy);\n        }\n    };\n}\n\nEasyStar.TOP = 'TOP'\nEasyStar.TOP_RIGHT = 'TOP_RIGHT'\nEasyStar.RIGHT = 'RIGHT'\nEasyStar.BOTTOM_RIGHT = 'BOTTOM_RIGHT'\nEasyStar.BOTTOM = 'BOTTOM'\nEasyStar.BOTTOM_LEFT = 'BOTTOM_LEFT'\nEasyStar.LEFT = 'LEFT'\nEasyStar.TOP_LEFT = 'TOP_LEFT'\n","import Cell from \"./Cell\";\nimport Agent from \"./Agent\";\nimport EasyStar from \"easystarjs\";\n\nfunction getDirectionArray(direction) {\n  switch (direction) {\n    case \"n\":\n      return [EasyStar.BOTTOM];\n    case \"s\":\n      return [EasyStar.TOP];\n    case \"e\":\n      return [EasyStar.LEFT];\n    case \"w\":\n      return [EasyStar.RIGHT];\n    case \"v\":\n      return [EasyStar.TOP, EasyStar.BOTTOM];\n    case \"h\":\n      return [EasyStar.LEFT, EasyStar.RIGHT];\n    default:\n      return [EasyStar.TOP, EasyStar.BOTTOM, EasyStar.LEFT, EasyStar.RIGHT];\n  }\n}\n\nclass World {\n  constructor(worldmap, mapDirection, selectedStrategies) {\n    this.state = [];\n    this.agents = [];\n\n    this.tickCount = 0;\n\n    // Setup initial state\n    const rows = worldmap.split(\"\\n\").filter((row) => row.length > 0);\n    const directionRows = mapDirection.split(\"\\n\").filter((row) => row.length > 0);\n\n    // Turns the characters from the worldmap into understandable strings\n    const types = {\n      // Useful stuff\n      S: \"SPAWN\",\n      E: \"EXIT\",\n      X: \"BUILDING_ENTRANCE\",\n      b: \"BIKE_PATH\",\n      w: \"PEDESTRIAN_PATH\",\n      a: \"ALL_PATH\",\n      p: \"PARKING\",\n      // Cosmetics\n      _: \"EMPTY\",\n      o: \"BUILDING\",\n    };\n\n    this.bikePathfinder = new EasyStar.js();\n    this.pedestrianPathfinder = new EasyStar.js();\n\n    // Create cells\n    // Loop over the 2D array of types, and create a new cell for each type\n    for (const [y, row] of rows.entries()) {\n      const directionRow = [...directionRows[y]];\n      const rowData = [...row].map((c, x) => {\n        const allowed_direction = directionRow[x];\n        const type = types[c];\n        const cell = new Cell(this, type, x, y, allowed_direction);\n\n        this.bikePathfinder.setDirectionalCondition(x, y, getDirectionArray(allowed_direction));\n        this.pedestrianPathfinder.setDirectionalCondition(x, y, getDirectionArray(allowed_direction));\n\n        return cell;\n      });\n      this.state.push(rowData);\n    }\n\n    this.bikePathfinder.setGrid(\n      this.state.map((row) => row.map((cell) => cell.type))\n    );\n    this.bikePathfinder.setAcceptableTiles([\n      \"SPAWN\",\n      \"BIKE_PATH\",\n      \"ALL_PATH\",\n      \"PARKING\",\n      \"EXIT\",\n    ]);\n    this.bikePathfinder.setTileCost(\"ALL_PATH\", 2);\n    this.bikePathfinder.setTileCost(\"PARKING\", 4);\n\n    this.pedestrianPathfinder.setGrid(\n      this.state.map((row) => row.map((cell) => cell.type))\n    );\n    this.pedestrianPathfinder.setAcceptableTiles([\n      \"PEDESTRIAN_PATH\",\n      \"ALL_PATH\",\n      \"PARKING\",\n      \"BUILDING_ENTRANCE\",\n    ]);\n    this.pedestrianPathfinder.setTileCost(\"ALL_PATH\", 2);\n    this.pedestrianPathfinder.setTileCost(\"PARKING\", 3);\n  }\n\n  getCellAtCoordinates(x, y) {\n    return this.state[y][x];\n  }\n\n  getRandomCellOfType(type) {\n    const cells = this.state.flat().filter((cell) => cell.type === type);\n    return cells[Math.floor(Math.random() * cells.length)];\n  }\n\n  // // Returns all neighbors of a cell\n  // getNeighbors(cell) {\n  //   const { x, y } = cell;\n  //   let neighbors = [];\n\n  //   // Get neighbors in all 4 directions\n  //   if (y > 0) {\n  //     neighbors.push(this.state[y - 1][x]);\n  //   }\n  //   if (y < this.state.length - 1) {\n  //     neighbors.push(this.state[y + 1][x]);\n  //   }\n  //   if (x > 0) {\n  //     neighbors.push(this.state[y][x - 1]);\n  //   }\n  //   if (x < this.state[y].length - 1) {\n  //     neighbors.push(this.state[y][x + 1]);\n  //   }\n  //   return neighbors;\n  // }\n\n  // Adds a new agent to the world, at a random spawn point\n  spawnAgent(strategy) {\n    // Randomly pick a spawn cell\n    const spawn = this.getRandomCellOfType(\"SPAWN\");\n    const agent = new Agent(this, \"BIKE\", spawn, strategy);\n\n    if (spawn.checkAddAgent(agent)) {\n      // Add agent of type \"BIKE\" to this cell\n      spawn.addAgent(agent);\n      this.agents.push(agent);\n    }\n  }\n\n  // Remove agent\n  removeAgent(agent) {\n    this.agents = this.agents.filter((a) => a !== agent);\n    agent.cell.removeAgent(agent);\n  }\n\n  // // Moves agent to a new cell\n  moveAgent(agent, cell) {\n    if (cell.checkAddAgent(agent)) {\n      agent.cell.removeAgent(agent);\n      cell.addAgent(agent);\n      agent.cell = cell;\n    }\n  }\n\n  tick() {\n    this.tickCount++;\n    this.agents.sort(function () {\n      return 0.5 - Math.random();\n    });\n    for (const agent of this.agents) {\n      if(agent.type === \"BIKE\") {\n        agent.act();\n      } else if(agent.type === \"PEDESTRIAN\" && this.tickCount % 2 === 0) {\n        agent.act();\n      }\n    }\n  }\n}\n\nexport default World;\n","import \"./styles.css\";\nimport worldmap, { mapDirection } from \"./map\";\n\nimport World from \"./World\";\n\nconst STRATEGIES = [\n  \"DEFAULT\",\n  \"PARKING_LOT_PREFERENCE\"\n]\n\n// Set default selected strategies\nlet selectedStrategies = [\n  \"DEFAULT\",\n  // \"PARKING_LOT_PREFERENCE\"\n];\n\nvar timeToParkData = [selectedStrategies];\nvar timeToGoalData = [selectedStrategies];\n\nfunction reset() {\n  world = new World(worldmap, mapDirection);\n  timeToParkData = [selectedStrategies];\n  timeToGoalData = [selectedStrategies];\n  DrawChart('time-to-park', timeToParkData);\n  DrawChart('time-to-goal', timeToGoalData);\n}\n\nfunction strategyName(strategy) {\n  return strategy.toLowerCase().replace(/^_*(.)|_+(.)/g, (s, c, d) => c ? c.toUpperCase() : ' ' + d.toUpperCase());\n}\n\nconst squareSize = 32;\n\nlet tickdelay = 20;\nlet spawnspeed = 0.2;\nlet paused = false;\nvar realtimeChart = true;\n\n// **********************************\n// Controls\n// **********************************\n\n// Reset button\ndocument.getElementById(\"reset\").addEventListener(\"click\", () => {\n  reset();\n});\n\n// Create HTML checkboxes for each strategy, and add them and remove them to selectedStrategies when enabled/disabled\nconst strategyCheckboxes = document.getElementById(\"strategy-checkboxes\");\nSTRATEGIES.forEach(strategy => {\n  const container = document.createElement(\"div\");\n  container.classList.add(\"form-check\");\n  const checkbox = document.createElement(\"input\");\n  checkbox.classList.add(\"form-check-input\");\n  checkbox.type = \"checkbox\";\n  checkbox.id = strategy;\n  // Check the box if it's in selectedStrategies\n  checkbox.checked = selectedStrategies.includes(strategy);\n  checkbox.addEventListener(\"change\", () => {\n    if (checkbox.checked) {\n      selectedStrategies.push(strategy);\n    } else {\n      selectedStrategies = selectedStrategies.filter(s => s !== strategy);\n    }\n    reset();\n  });\n  const label = document.createElement(\"label\");\n  label.htmlFor = strategy;\n  label.classList.add(\"form-check-label\");\n  label.appendChild(document.createTextNode(strategyName(strategy)));\n  strategyCheckboxes.appendChild(container);\n  container.appendChild(checkbox);\n  container.appendChild(label);\n});\n\n// Control if the chart is updated in realtime\nconst realtimeChartCheckbox = document.getElementById(\"realtime-charts\");\nrealtimeChartCheckbox.addEventListener(\"change\", () => {\n  if (realtimeChartCheckbox.checked) {\n    realtimeChart = true;\n  } else {\n    realtimeChart = false;\n  }\n});\n\n// Control play/pause button\ndocument.getElementById(\"play-pause\").addEventListener(\"click\", () => {\n  if (document.getElementById(\"play-pause\").innerHTML === \"Play\") {\n    document.getElementById(\"play-pause\").innerHTML = \"Pause\";\n    paused = false;\n  } else {\n    document.getElementById(\"play-pause\").innerHTML = \"Play\";\n    paused = true;\n  }\n});\n\n// Control tickdelay\ndocument.getElementById(\"tickdelay\").addEventListener(\"input\", (e) => {\n  tickdelay = e.target.value;\n});\n\ndocument.getElementById(\"spawnspeed\").addEventListener(\"input\", (e) => {\n  spawnspeed = e.target.value;\n});\n\n// **********************************\n// Read worldmap and create worldData\n// **********************************\n\nlet world = new World(worldmap, mapDirection);\n\n// **********************************\n// This is where the simulation loop\n// goes later or something\n// **********************************\n\nfunction gameTick() {\n  if (!paused) {\n    // Spawn new agent sometimes\n    if (Math.random() < spawnspeed) {\n      // Pick random strategy from selectedStrategies\n      if (selectedStrategies.length > 0) {\n        const strategy = selectedStrategies[Math.floor(Math.random() * selectedStrategies.length)];\n        world.spawnAgent(strategy);\n      }\n    }\n\n    // Move current agents\n    world.tick();\n  }\n  setTimeout(gameTick, tickdelay);\n}\n\ngameTick();\n\n// **********************************\n// Draw world state to canvas\n// **********************************\n\nconst gridWidth = world.state[0].length;\nconst gridHeight = world.state.length;\n\nconst canvasWidth = gridWidth * squareSize;\nconst canvasHeight = gridHeight * squareSize;\n\nvar c = document.getElementById(\"canvas\");\nvar ctx = c.getContext(\"2d\");\nctx.canvas.width = canvasWidth;\nctx.canvas.height = canvasHeight;\n\nfunction drawCanvas() {\n  for (const [y, row] of world.state.entries()) {\n    for (const [x, cell] of row.entries()) {\n      cell.draw(ctx, x, y, squareSize);\n    }\n  }\n  requestAnimationFrame(drawCanvas);\n}\n\nrequestAnimationFrame(drawCanvas);\n\n// **********************************\n// Draw graphs for time-to-park and time-to-goal\n// **********************************\n\ngoogle.charts.load('current', { 'packages': ['corechart'] });\ngoogle.charts.setOnLoadCallback(() => DrawChart('time-to-park', timeToParkData));\n\nfunction DrawChart(id, data) {\n\n  // Create the data table.\n  var data = google.visualization.arrayToDataTable(data);\n\n  // Set chart options\n  var options = {\n    'width': \"100%\",\n    'height': 300,\n    bar: { gap: 0 },\n    chartArea: { 'width': '100%', 'height': '80%' },\n    legend: { 'position': 'bottom' },\n    interpolateNulls: false,\n    histogram: {\n      maxNumBuckets: 50,\n      minValue: 0,\n      maxValue: 150\n    }\n  };\n\n  // Instantiate and draw our chart, passing in some options.\n  var chart = new google.visualization.Histogram(document.getElementById(id));\n  chart.draw(data, options);\n}\n\nexport function addTimeToPark(strategy, data) {\n  // Create array of 0's, with length of number of strategies,\n  // and set the index of the strategy to the data \n  const index = selectedStrategies.indexOf(strategy)\n  const row = Array(selectedStrategies.length).fill(null);\n  row[index] = data;\n  timeToParkData.push(row);\n  if (realtimeChart) {\n    DrawChart('time-to-park', timeToParkData);\n  }\n}\n\nexport function addTimeToGoal(strategy, data) {\n  const index = selectedStrategies.indexOf(strategy)\n  const row = Array(selectedStrategies.length).fill(null);\n  row[index] = data;\n  timeToGoalData.push(row);\n  if (realtimeChart) {\n    DrawChart('time-to-goal', timeToGoalData);\n  }\n}\n"]}